
Virtus_CC_Projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e49c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  0800e670  0800e670  0000f670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f358  0800f358  00011280  2**0
                  CONTENTS
  4 .ARM          00000008  0800f358  0800f358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f360  0800f360  00011280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f360  0800f360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f364  0800f364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800f368  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000280  0800f5e8  00011280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800f5e8  00011b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015518  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f26  00000000  00000000  000267c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  000296f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5a  00000000  00000000  0002aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025715  00000000  00000000  0002b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190c4  00000000  00000000  000510d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e36de  00000000  00000000  0006a19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b48  00000000  00000000  0014d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00154404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e654 	.word	0x0800e654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0800e654 	.word	0x0800e654

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f001 f9ab 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f8a7 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 fb19 	bl	8001708 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d6:	f000 fafd 	bl	80016d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010da:	f000 fad1 	bl	8001680 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010de:	f000 f95f 	bl	80013a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010e2:	f000 fa0f 	bl	8001504 <MX_TIM3_Init>
  MX_TIM1_Init();
 80010e6:	f000 f989 	bl	80013fc <MX_TIM1_Init>
  MX_TIM14_Init();
 80010ea:	f000 fa81 	bl	80015f0 <MX_TIM14_Init>
  MX_ADC1_Init();
 80010ee:	f000 f905 	bl	80012fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  modules_init();
 80010f2:	f000 fcc1 	bl	8001a78 <modules_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    bmp280_read_float(&bmp280, &temperatureBMP280, &pressureBMP280, &humidityBMP280 , &altitudeBMP280);
 80010f6:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <main+0x118>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <main+0x11c>)
 80010fc:	4a39      	ldr	r2, [pc, #228]	@ (80011e4 <main+0x120>)
 80010fe:	493a      	ldr	r1, [pc, #232]	@ (80011e8 <main+0x124>)
 8001100:	483a      	ldr	r0, [pc, #232]	@ (80011ec <main+0x128>)
 8001102:	f007 f93f 	bl	8008384 <bmp280_read_float>
    MPU6050_Read_All(&hi2c1, &MPU6050);
 8001106:	493a      	ldr	r1, [pc, #232]	@ (80011f0 <main+0x12c>)
 8001108:	483a      	ldr	r0, [pc, #232]	@ (80011f4 <main+0x130>)
 800110a:	f007 f9fd 	bl	8008508 <MPU6050_Read_All>
    HCSR04_Read();
 800110e:	f000 fd13 	bl	8001b38 <HCSR04_Read>

    if (buttons)
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <main+0x134>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <main+0x5c>
      lcd_write_mpu();
 800111a:	f000 fbaf 	bl	800187c <lcd_write_mpu>
 800111e:	e001      	b.n	8001124 <main+0x60>
    else
      lcd_write_bmp();
 8001120:	f000 fc1a 	bl	8001958 <lcd_write_bmp>

    servo_motor(460 + 2140 * (pressureBMP280 + minus_pressure));
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <main+0x120>)
 8001126:	ed93 7a00 	vldr	s14, [r3]
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <main+0x138>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001200 <main+0x13c>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001204 <main+0x140>
 8001140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001148:	ee17 3a90 	vmov	r3, s15
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fb66 	bl	8001820 <servo_motor>


    if (Distance < 100)
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <main+0x144>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	2b63      	cmp	r3, #99	@ 0x63
 800115a:	d805      	bhi.n	8001168 <main+0xa4>
      buzzer(Distance);
 800115c:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <main+0x144>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fb6f 	bl	8001844 <buzzer>
 8001166:	e002      	b.n	800116e <main+0xaa>
    else
      buzzer(0);
 8001168:	2000      	movs	r0, #0
 800116a:	f000 fb6b 	bl	8001844 <buzzer>

    adc_val = 0;
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <main+0x148>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 5; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e00c      	b.n	8001194 <main+0xd0>
      adc_val += adc_buffer[i];
 800117a:	4a25      	ldr	r2, [pc, #148]	@ (8001210 <main+0x14c>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001182:	461a      	mov	r2, r3
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <main+0x148>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a20      	ldr	r2, [pc, #128]	@ (800120c <main+0x148>)
 800118c:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < 5; i++)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b04      	cmp	r3, #4
 8001198:	ddef      	ble.n	800117a <main+0xb6>
    adc_val /= 5;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <main+0x148>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <main+0x150>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1052      	asrs	r2, r2, #1
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <main+0x148>)
 80011ac:	6013      	str	r3, [r2, #0]
    minus_temperature = (adc_val - 2050) / 400.0;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <main+0x148>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <main+0x154>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fd2b 	bl	8000c28 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a11      	ldr	r2, [pc, #68]	@ (800121c <main+0x158>)
 80011d6:	6013      	str	r3, [r2, #0]
    bmp280_read_float(&bmp280, &temperatureBMP280, &pressureBMP280, &humidityBMP280 , &altitudeBMP280);
 80011d8:	e78d      	b.n	80010f6 <main+0x32>
 80011da:	bf00      	nop
 80011dc:	200004ec 	.word	0x200004ec
 80011e0:	200004f8 	.word	0x200004f8
 80011e4:	200004f0 	.word	0x200004f0
 80011e8:	200004f4 	.word	0x200004f4
 80011ec:	200004b8 	.word	0x200004b8
 80011f0:	20000500 	.word	0x20000500
 80011f4:	20000344 	.word	0x20000344
 80011f8:	200005b0 	.word	0x200005b0
 80011fc:	200005b4 	.word	0x200005b4
 8001200:	4505c000 	.word	0x4505c000
 8001204:	43e60000 	.word	0x43e60000
 8001208:	20000566 	.word	0x20000566
 800120c:	200005b8 	.word	0x200005b8
 8001210:	200005a0 	.word	0x200005a0
 8001214:	66666667 	.word	0x66666667
 8001218:	40790000 	.word	0x40790000
 800121c:	200005ac 	.word	0x200005ac

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	@ 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2234      	movs	r2, #52	@ 0x34
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f008 ff03 	bl	800a03a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <SystemClock_Config+0xd4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a29      	ldr	r2, [pc, #164]	@ (80012f4 <SystemClock_Config+0xd4>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <SystemClock_Config+0xd4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <SystemClock_Config+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800126c:	4a22      	ldr	r2, [pc, #136]	@ (80012f8 <SystemClock_Config+0xd8>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <SystemClock_Config+0xd8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001294:	2310      	movs	r3, #16
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001298:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800129c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129e:	2304      	movs	r3, #4
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 f84a 	bl	8005348 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012ba:	f000 fd49 	bl	8001d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 fcea 	bl	8004cb4 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012e6:	f000 fd33 	bl	8001d50 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3750      	adds	r7, #80	@ 0x50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001310:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <MX_ADC1_Init+0x9c>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001316:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800131a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_ADC1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001324:	2201      	movs	r2, #1
 8001326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_ADC1_Init+0x98>)
 800132a:	2201      	movs	r2, #1
 800132c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_ADC1_Init+0x98>)
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <MX_ADC1_Init+0xa0>)
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_ADC1_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_ADC1_Init+0x98>)
 800135e:	f001 f8f7 	bl	8002550 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 fcf2 	bl	8001d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_ADC1_Init+0x98>)
 800137e:	f001 fa59 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001388:	f000 fce2 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000029c 	.word	0x2000029c
 8001398:	40012000 	.word	0x40012000
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <MX_I2C1_Init+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_I2C1_Init+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_I2C1_Init+0x50>)
 80013de:	f002 f997 	bl	8003710 <HAL_I2C_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 fcb2 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000344 	.word	0x20000344
 80013f4:	40005400 	.word	0x40005400
 80013f8:	00061a80 	.word	0x00061a80

080013fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b092      	sub	sp, #72	@ 0x48
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2220      	movs	r2, #32
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f008 fe07 	bl	800a03a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <MX_TIM1_Init+0x100>)
 800142e:	4a34      	ldr	r2, [pc, #208]	@ (8001500 <MX_TIM1_Init+0x104>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001432:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <MX_TIM1_Init+0x100>)
 8001434:	2254      	movs	r2, #84	@ 0x54
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <MX_TIM1_Init+0x100>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <MX_TIM1_Init+0x100>)
 8001440:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <MX_TIM1_Init+0x100>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <MX_TIM1_Init+0x100>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <MX_TIM1_Init+0x100>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	4828      	ldr	r0, [pc, #160]	@ (80014fc <MX_TIM1_Init+0x100>)
 800145a:	f004 fa62 	bl	8005922 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001464:	f000 fc74 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001470:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001474:	4619      	mov	r1, r3
 8001476:	4821      	ldr	r0, [pc, #132]	@ (80014fc <MX_TIM1_Init+0x100>)
 8001478:	f005 fcb4 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001482:	f000 fc65 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	@ 0x60
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 800148a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_TIM1_Init+0x100>)
 80014ae:	f004 fe5d 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80014b8:	f000 fc4a 	bl	8001d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <MX_TIM1_Init+0x100>)
 80014e0:	f005 fcfc 	bl	8006edc <HAL_TIMEx_ConfigBreakDeadTime>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80014ea:	f000 fc31 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MX_TIM1_Init+0x100>)
 80014f0:	f000 fda4 	bl	800203c <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3748      	adds	r7, #72	@ 0x48
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000398 	.word	0x20000398
 8001500:	40010000 	.word	0x40010000

08001504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	@ 0x38
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001534:	4b2c      	ldr	r3, [pc, #176]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001536:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <MX_TIM3_Init+0xe8>)
 8001538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 800153c:	227f      	movs	r2, #127	@ 0x7f
 800153e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001548:	2263      	movs	r2, #99	@ 0x63
 800154a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001558:	4823      	ldr	r0, [pc, #140]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 800155a:	f004 f993 	bl	8005884 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001564:	f000 fbf4 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001572:	4619      	mov	r1, r3
 8001574:	481c      	ldr	r0, [pc, #112]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001576:	f004 febb 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001580:	f000 fbe6 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001584:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 8001586:	f004 f9cc 	bl	8005922 <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001590:	f000 fbde 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	4619      	mov	r1, r3
 80015a2:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 80015a4:	f005 fc1e 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80015ae:	f000 fbcf 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	@ 0x60
 80015b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2208      	movs	r2, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 80015ca:	f004 fdcf 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80015d4:	f000 fbbc 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <MX_TIM3_Init+0xe4>)
 80015da:	f000 fd2f 	bl	800203c <HAL_TIM_MspPostInit>

}
 80015de:	bf00      	nop
 80015e0:	3738      	adds	r7, #56	@ 0x38
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200003e0 	.word	0x200003e0
 80015ec:	40000400 	.word	0x40000400

080015f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_TIM14_Init+0x88>)
 8001604:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <MX_TIM14_Init+0x8c>)
 8001606:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 72;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_TIM14_Init+0x88>)
 800160a:	2248      	movs	r2, #72	@ 0x48
 800160c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_TIM14_Init+0x88>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_TIM14_Init+0x88>)
 8001616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_TIM14_Init+0x88>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_TIM14_Init+0x88>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001628:	4813      	ldr	r0, [pc, #76]	@ (8001678 <MX_TIM14_Init+0x88>)
 800162a:	f004 f92b 	bl	8005884 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001634:	f000 fb8c 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8001638:	480f      	ldr	r0, [pc, #60]	@ (8001678 <MX_TIM14_Init+0x88>)
 800163a:	f004 fa89 	bl	8005b50 <HAL_TIM_IC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 fb84 	bl	8001d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800164c:	2301      	movs	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM14_Init+0x88>)
 8001660:	f004 fce8 	bl	8006034 <HAL_TIM_IC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM14_Init+0x7e>
  {
    Error_Handler();
 800166a:	f000 fb71 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000428 	.word	0x20000428
 800167c:	40002000 	.word	0x40002000

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f005 fc76 	bl	8006fa8 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 fb45 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000470 	.word	0x20000470
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_DMA_Init+0x30>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <MX_DMA_Init+0x30>)
 80016e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_DMA_Init+0x30>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a34      	ldr	r2, [pc, #208]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <MX_GPIO_Init+0x10c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <MX_GPIO_Init+0x10c>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <MX_GPIO_Init+0x10c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2140      	movs	r1, #64	@ 0x40
 8001792:	4821      	ldr	r0, [pc, #132]	@ (8001818 <MX_GPIO_Init+0x110>)
 8001794:	f001 ff8a 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	481b      	ldr	r0, [pc, #108]	@ (800181c <MX_GPIO_Init+0x114>)
 80017b0:	f001 fde8 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80017b4:	2312      	movs	r3, #18
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4813      	ldr	r0, [pc, #76]	@ (8001818 <MX_GPIO_Init+0x110>)
 80017ca:	f001 fddb 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ce:	2340      	movs	r3, #64	@ 0x40
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <MX_GPIO_Init+0x110>)
 80017e6:	f001 fdcd 	bl	8003384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2007      	movs	r0, #7
 80017f0:	f001 fbab 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017f4:	2007      	movs	r0, #7
 80017f6:	f001 fbc4 	bl	8002f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	200a      	movs	r0, #10
 8001800:	f001 fba3 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001804:	200a      	movs	r0, #10
 8001806:	f001 fbbc 	bl	8002f82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020800 	.word	0x40020800

08001820 <servo_motor>:

/* USER CODE BEGIN 4 */

void servo_motor(uint16_t step)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, step);
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <servo_motor+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000398 	.word	0x20000398

08001844 <buzzer>:

void buzzer(uint16_t duty)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_AUTORELOAD(&htim3, duty * 2);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	005a      	lsls	r2, r3, #1
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <buzzer+0x34>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <buzzer+0x34>)
 8001860:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <buzzer+0x34>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(100);
 800186a:	2064      	movs	r0, #100	@ 0x64
 800186c:	f000 fe4c 	bl	8002508 <HAL_Delay>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200003e0 	.word	0x200003e0

0800187c <lcd_write_mpu>:

void lcd_write_mpu(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08e      	sub	sp, #56	@ 0x38
 8001880:	af00      	add	r7, sp, #0
  char buffer[50];
  SSD1306_Clear();
 8001882:	f007 fba6 	bl	8008fd2 <SSD1306_Clear>

  sprintf(buffer, "Gx: %.1f", MPU6050.KalmanAngleX);
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <lcd_write_mpu+0xc0>)
 8001888:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800188c:	1d38      	adds	r0, r7, #4
 800188e:	492c      	ldr	r1, [pc, #176]	@ (8001940 <lcd_write_mpu+0xc4>)
 8001890:	f008 fb70 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 1);
 8001894:	2101      	movs	r1, #1
 8001896:	2001      	movs	r0, #1
 8001898:	f007 fae2 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2201      	movs	r2, #1
 80018a0:	4928      	ldr	r1, [pc, #160]	@ (8001944 <lcd_write_mpu+0xc8>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f007 fb70 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Gy: %.1f", MPU6050.KalmanAngleY);
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <lcd_write_mpu+0xc0>)
 80018aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80018ae:	1d38      	adds	r0, r7, #4
 80018b0:	4925      	ldr	r1, [pc, #148]	@ (8001948 <lcd_write_mpu+0xcc>)
 80018b2:	f008 fb5f 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 16);
 80018b6:	2110      	movs	r1, #16
 80018b8:	2001      	movs	r0, #1
 80018ba:	f007 fad1 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2201      	movs	r2, #1
 80018c2:	4920      	ldr	r1, [pc, #128]	@ (8001944 <lcd_write_mpu+0xc8>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fb5f 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Ax: %.1f", MPU6050.Ax);
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <lcd_write_mpu+0xc0>)
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	1d38      	adds	r0, r7, #4
 80018d2:	491e      	ldr	r1, [pc, #120]	@ (800194c <lcd_write_mpu+0xd0>)
 80018d4:	f008 fb4e 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 27);
 80018d8:	211b      	movs	r1, #27
 80018da:	2001      	movs	r0, #1
 80018dc:	f007 fac0 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2201      	movs	r2, #1
 80018e4:	4917      	ldr	r1, [pc, #92]	@ (8001944 <lcd_write_mpu+0xc8>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 fb4e 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Ay: %.1f", MPU6050.Ay);
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <lcd_write_mpu+0xc0>)
 80018ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018f2:	1d38      	adds	r0, r7, #4
 80018f4:	4916      	ldr	r1, [pc, #88]	@ (8001950 <lcd_write_mpu+0xd4>)
 80018f6:	f008 fb3d 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 39);
 80018fa:	2127      	movs	r1, #39	@ 0x27
 80018fc:	2001      	movs	r0, #1
 80018fe:	f007 faaf 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer , &Font_7x10, 1);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2201      	movs	r2, #1
 8001906:	490f      	ldr	r1, [pc, #60]	@ (8001944 <lcd_write_mpu+0xc8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fb3d 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Az: %.1f", MPU6050.Az);
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <lcd_write_mpu+0xc0>)
 8001910:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001914:	1d38      	adds	r0, r7, #4
 8001916:	490f      	ldr	r1, [pc, #60]	@ (8001954 <lcd_write_mpu+0xd8>)
 8001918:	f008 fb2c 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 50);
 800191c:	2132      	movs	r1, #50	@ 0x32
 800191e:	2001      	movs	r0, #1
 8001920:	f007 fa9e 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2201      	movs	r2, #1
 8001928:	4906      	ldr	r1, [pc, #24]	@ (8001944 <lcd_write_mpu+0xc8>)
 800192a:	4618      	mov	r0, r3
 800192c:	f007 fb2c 	bl	8008f88 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001930:	f007 f9f0 	bl	8008d14 <SSD1306_UpdateScreen>
}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	@ 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000500 	.word	0x20000500
 8001940:	0800e670 	.word	0x0800e670
 8001944:	200000a0 	.word	0x200000a0
 8001948:	0800e67c 	.word	0x0800e67c
 800194c:	0800e688 	.word	0x0800e688
 8001950:	0800e694 	.word	0x0800e694
 8001954:	0800e6a0 	.word	0x0800e6a0

08001958 <lcd_write_bmp>:

void lcd_write_bmp(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	@ 0x38
 800195c:	af00      	add	r7, sp, #0
  char buffer[50];
  SSD1306_Clear();
 800195e:	f007 fb38 	bl	8008fd2 <SSD1306_Clear>

  sprintf(buffer, "Pressure: %.1f", pressureBMP280 + minus_pressure);
 8001962:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <lcd_write_bmp+0xf0>)
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <lcd_write_bmp+0xf4>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	ee17 0a90 	vmov	r0, s15
 8001976:	f7fe fe07 	bl	8000588 <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	1d38      	adds	r0, r7, #4
 8001980:	4933      	ldr	r1, [pc, #204]	@ (8001a50 <lcd_write_bmp+0xf8>)
 8001982:	f008 faf7 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 1);
 8001986:	2101      	movs	r1, #1
 8001988:	2001      	movs	r0, #1
 800198a:	f007 fa69 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2201      	movs	r2, #1
 8001992:	4930      	ldr	r1, [pc, #192]	@ (8001a54 <lcd_write_bmp+0xfc>)
 8001994:	4618      	mov	r0, r3
 8001996:	f007 faf7 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Altitude: %.1f", altitudeBMP280);
 800199a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <lcd_write_bmp+0x100>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdf2 	bl	8000588 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	1d38      	adds	r0, r7, #4
 80019aa:	492c      	ldr	r1, [pc, #176]	@ (8001a5c <lcd_write_bmp+0x104>)
 80019ac:	f008 fae2 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 16);
 80019b0:	2110      	movs	r1, #16
 80019b2:	2001      	movs	r0, #1
 80019b4:	f007 fa54 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2201      	movs	r2, #1
 80019bc:	4925      	ldr	r1, [pc, #148]	@ (8001a54 <lcd_write_bmp+0xfc>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f007 fae2 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Temperature: %.1f", temperatureBMP280 + minus_temperature);
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <lcd_write_bmp+0x108>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <lcd_write_bmp+0x10c>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	ee17 0a90 	vmov	r0, s15
 80019d8:	f7fe fdd6 	bl	8000588 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	1d38      	adds	r0, r7, #4
 80019e2:	4921      	ldr	r1, [pc, #132]	@ (8001a68 <lcd_write_bmp+0x110>)
 80019e4:	f008 fac6 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 27);
 80019e8:	211b      	movs	r1, #27
 80019ea:	2001      	movs	r0, #1
 80019ec:	f007 fa38 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer, &Font_7x10, 1);
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2201      	movs	r2, #1
 80019f4:	4917      	ldr	r1, [pc, #92]	@ (8001a54 <lcd_write_bmp+0xfc>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f007 fac6 	bl	8008f88 <SSD1306_Puts>

  sprintf(buffer, "Compressor: %d", (int)((minus_pressure) * -100));
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <lcd_write_bmp+0xf4>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001a6c <lcd_write_bmp+0x114>
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	ee17 2a90 	vmov	r2, s15
 8001a14:	4916      	ldr	r1, [pc, #88]	@ (8001a70 <lcd_write_bmp+0x118>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f008 faac 	bl	8009f74 <siprintf>
  SSD1306_GotoXY (1, 39);
 8001a1c:	2127      	movs	r1, #39	@ 0x27
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f007 fa1e 	bl	8008e60 <SSD1306_GotoXY>
  SSD1306_Puts (buffer , &Font_7x10, 1);
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2201      	movs	r2, #1
 8001a28:	490a      	ldr	r1, [pc, #40]	@ (8001a54 <lcd_write_bmp+0xfc>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 faac 	bl	8008f88 <SSD1306_Puts>

  SSD1306_Puts ("%", &Font_7x10, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <lcd_write_bmp+0xfc>)
 8001a34:	480f      	ldr	r0, [pc, #60]	@ (8001a74 <lcd_write_bmp+0x11c>)
 8001a36:	f007 faa7 	bl	8008f88 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001a3a:	f007 f96b 	bl	8008d14 <SSD1306_UpdateScreen>
}
 8001a3e:	bf00      	nop
 8001a40:	3738      	adds	r7, #56	@ 0x38
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200004f0 	.word	0x200004f0
 8001a4c:	200005b4 	.word	0x200005b4
 8001a50:	0800e6ac 	.word	0x0800e6ac
 8001a54:	200000a0 	.word	0x200000a0
 8001a58:	200004ec 	.word	0x200004ec
 8001a5c:	0800e6bc 	.word	0x0800e6bc
 8001a60:	200004f4 	.word	0x200004f4
 8001a64:	200005ac 	.word	0x200005ac
 8001a68:	0800e6cc 	.word	0x0800e6cc
 8001a6c:	c2c80000 	.word	0xc2c80000
 8001a70:	0800e6e0 	.word	0x0800e6e0
 8001a74:	0800e6f0 	.word	0x0800e6f0

08001a78 <modules_init>:

void modules_init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  MPU6050_Init(&hi2c1); // Mpu
 8001a7c:	4822      	ldr	r0, [pc, #136]	@ (8001b08 <modules_init+0x90>)
 8001a7e:	f006 fce7 	bl	8008450 <MPU6050_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Servo
 8001a82:	2100      	movs	r1, #0
 8001a84:	4821      	ldr	r0, [pc, #132]	@ (8001b0c <modules_init+0x94>)
 8001a86:	f003 ff9b 	bl	80059c0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1); // Ultra
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4820      	ldr	r0, [pc, #128]	@ (8001b10 <modules_init+0x98>)
 8001a8e:	f004 f8b9 	bl	8005c04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Temperatura/Pressão
 8001a92:	2108      	movs	r1, #8
 8001a94:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <modules_init+0x9c>)
 8001a96:	f003 ff93 	bl	80059c0 <HAL_TIM_PWM_Start>
  SSD1306_Init();
 8001a9a:	f007 f877 	bl	8008b8c <SSD1306_Init>
  SSD1306_Clear();
 8001a9e:	f007 fa98 	bl	8008fd2 <SSD1306_Clear>
  HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 5);
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	491c      	ldr	r1, [pc, #112]	@ (8001b18 <modules_init+0xa0>)
 8001aa6:	481d      	ldr	r0, [pc, #116]	@ (8001b1c <modules_init+0xa4>)
 8001aa8:	f000 fd96 	bl	80025d8 <HAL_ADC_Start_DMA>

  bmp280_init_default_params(&bmp280.params);
 8001aac:	481c      	ldr	r0, [pc, #112]	@ (8001b20 <modules_init+0xa8>)
 8001aae:	f005 fe87 	bl	80077c0 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <modules_init+0xac>)
 8001ab4:	2276      	movs	r2, #118	@ 0x76
 8001ab6:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <modules_init+0xac>)
 8001aba:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <modules_init+0x90>)
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28
  while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001abe:	e016      	b.n	8001aee <modules_init+0x76>
  {
    size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001ac0:	4919      	ldr	r1, [pc, #100]	@ (8001b28 <modules_init+0xb0>)
 8001ac2:	481a      	ldr	r0, [pc, #104]	@ (8001b2c <modules_init+0xb4>)
 8001ac4:	f008 fa56 	bl	8009f74 <siprintf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <modules_init+0xb8>)
 8001ace:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (char *)Data, strlen(Data), 10000);
 8001ad0:	4816      	ldr	r0, [pc, #88]	@ (8001b2c <modules_init+0xb4>)
 8001ad2:	f7fe fbed 	bl	80002b0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ade:	4913      	ldr	r1, [pc, #76]	@ (8001b2c <modules_init+0xb4>)
 8001ae0:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <modules_init+0xbc>)
 8001ae2:	f005 fab1 	bl	8007048 <HAL_UART_Transmit>
    HAL_Delay(2000);
 8001ae6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001aea:	f000 fd0d 	bl	8002508 <HAL_Delay>
  while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001aee:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <modules_init+0xa8>)
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <modules_init+0xac>)
 8001af2:	f005 ffdf 	bl	8007ab4 <bmp280_init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1de      	bne.n	8001ac0 <modules_init+0x48>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000344 	.word	0x20000344
 8001b0c:	20000398 	.word	0x20000398
 8001b10:	20000428 	.word	0x20000428
 8001b14:	200003e0 	.word	0x200003e0
 8001b18:	200005a0 	.word	0x200005a0
 8001b1c:	2000029c 	.word	0x2000029c
 8001b20:	200004e4 	.word	0x200004e4
 8001b24:	200004b8 	.word	0x200004b8
 8001b28:	0800e6f4 	.word	0x0800e6f4
 8001b2c:	2000056c 	.word	0x2000056c
 8001b30:	20000568 	.word	0x20000568
 8001b34:	20000470 	.word	0x20000470

08001b38 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2140      	movs	r1, #64	@ 0x40
 8001b40:	480a      	ldr	r0, [pc, #40]	@ (8001b6c <HCSR04_Read+0x34>)
 8001b42:	f001 fdb3 	bl	80036ac <HAL_GPIO_WritePin>
  HAL_Delay(10);  // wait for 10 us
 8001b46:	200a      	movs	r0, #10
 8001b48:	f000 fcde 	bl	8002508 <HAL_Delay>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	@ 0x40
 8001b50:	4806      	ldr	r0, [pc, #24]	@ (8001b6c <HCSR04_Read+0x34>)
 8001b52:	f001 fdab 	bl	80036ac <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim14, TIM_IT_CC1);
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HCSR04_Read+0x38>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <HCSR04_Read+0x38>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0202 	orr.w	r2, r2, #2
 8001b64:	60da      	str	r2, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	20000428 	.word	0x20000428
 8001b74:	00000000 	.word	0x00000000

08001b78 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 8083 	bne.w	8001c90 <HAL_TIM_IC_CaptureCallback+0x118>
  {
    if (Is_First_Captured==0) // if the first value is not captured
 8001b8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11a      	bne.n	8001bc8 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001b92:	2100      	movs	r1, #0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f004 fc73 	bl	8006480 <HAL_TIM_ReadCapturedValue>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001b9e:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;  // set the first captured as true
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 020a 	bic.w	r2, r2, #10
 8001bb4:	621a      	str	r2, [r3, #32]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0202 	orr.w	r2, r2, #2
 8001bc4:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
    }
  }
}
 8001bc6:	e063      	b.n	8001c90 <HAL_TIM_IC_CaptureCallback+0x118>
    else if (Is_First_Captured==1)   // if the first is already captured
 8001bc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d15f      	bne.n	8001c90 <HAL_TIM_IC_CaptureCallback+0x118>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f004 fc54 	bl	8006480 <HAL_TIM_ReadCapturedValue>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bdc:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
      if (IC_Val2 > IC_Val1)
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d907      	bls.n	8001c02 <HAL_TIM_IC_CaptureCallback+0x8a>
        Difference = IC_Val2-IC_Val1;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001cac <HAL_TIM_IC_CaptureCallback+0x134>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e00f      	b.n	8001c22 <HAL_TIM_IC_CaptureCallback+0xaa>
      else if (IC_Val1 > IC_Val2)
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d909      	bls.n	8001c22 <HAL_TIM_IC_CaptureCallback+0xaa>
        Difference = (0xffff - IC_Val1) + IC_Val2;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c1c:	33ff      	adds	r3, #255	@ 0xff
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c20:	6013      	str	r3, [r2, #0]
      Distance = Difference * .034/2;
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc8c 	bl	8000544 <__aeabi_ui2d>
 8001c2c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c98 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c46:	f7fe fe21 	bl	800088c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ffc9 	bl	8000be8 <__aeabi_d2uiz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c5c:	801a      	strh	r2, [r3, #0]
      Is_First_Captured = 0; // set it back to false
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 020a 	bic.w	r2, r2, #10
 8001c72:	621a      	str	r2, [r3, #32]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a12      	ldr	r2, [r2, #32]
 8001c7e:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0202 	bic.w	r2, r2, #2
 8001c8e:	60da      	str	r2, [r3, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	b020c49c 	.word	0xb020c49c
 8001c9c:	3fa16872 	.word	0x3fa16872
 8001ca0:	20000564 	.word	0x20000564
 8001ca4:	20000558 	.word	0x20000558
 8001ca8:	2000055c 	.word	0x2000055c
 8001cac:	20000560 	.word	0x20000560
 8001cb0:	20000566 	.word	0x20000566
 8001cb4:	20000398 	.word	0x20000398

08001cb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_1)
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x30>
  {
    buttons = ~buttons;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cd2:	701a      	strb	r2, [r3, #0]
    if (buttons)
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x2a>
      lcd_write_mpu();
 8001cdc:	f7ff fdce 	bl	800187c <lcd_write_mpu>
  {
    minus_pressure -= 0.1;
    if (minus_pressure <= -1)
      minus_pressure = 0;
  }
}
 8001ce0:	e027      	b.n	8001d32 <HAL_GPIO_EXTI_Callback+0x7a>
      lcd_write_bmp();
 8001ce2:	f7ff fe39 	bl	8001958 <lcd_write_bmp>
}
 8001ce6:	e024      	b.n	8001d32 <HAL_GPIO_EXTI_Callback+0x7a>
  else if (GPIO_Pin == GPIO_PIN_4)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d121      	bne.n	8001d32 <HAL_GPIO_EXTI_Callback+0x7a>
    minus_pressure -= 0.1;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc48 	bl	8000588 <__aeabi_f2d>
 8001cf8:	a311      	add	r3, pc, #68	@ (adr r3, 8001d40 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fae3 	bl	80002c8 <__aeabi_dsub>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff8d 	bl	8000c28 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001d12:	6013      	str	r3, [r2, #0]
    if (minus_pressure <= -1)
 8001d14:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d900      	bls.n	8001d2a <HAL_GPIO_EXTI_Callback+0x72>
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_EXTI_Callback+0x7a>
      minus_pressure = 0;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	9999999a 	.word	0x9999999a
 8001d44:	3fb99999 	.word	0x3fb99999
 8001d48:	200005b0 	.word	0x200005b0
 8001d4c:	200005b4 	.word	0x200005b4

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <Error_Handler+0x8>

08001d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_MspInit+0x4c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d9a:	2007      	movs	r0, #7
 8001d9c:	f001 f8ca 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	@ 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e88 <HAL_ADC_MspInit+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d157      	bne.n	8001e7e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	481d      	ldr	r0, [pc, #116]	@ (8001e90 <HAL_ADC_MspInit+0xe4>)
 8001e1a:	f001 fab3 	bl	8003384 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e20:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_ADC_MspInit+0xec>)
 8001e22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e30:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e62:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e64:	f001 f8a8 	bl	8002fb8 <HAL_DMA_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e6e:	f7ff ff6f 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a07      	ldr	r2, [pc, #28]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	200002e4 	.word	0x200002e4
 8001e98:	40026410 	.word	0x40026410

08001e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	@ 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_I2C_MspInit+0x84>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d12c      	bne.n	8001f18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <HAL_I2C_MspInit+0x8c>)
 8001ef8:	f001 fa44 	bl	8003384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_I2C_MspInit+0x88>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	@ 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x40>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x40>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x40>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_TIM_Base_MspInit+0xbc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001fae:	e038      	b.n	8002022 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM14)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_TIM_Base_MspInit+0xc4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d133      	bne.n	8002022 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_TIM_Base_MspInit+0xc0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002002:	2309      	movs	r3, #9
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	480a      	ldr	r0, [pc, #40]	@ (8002038 <HAL_TIM_Base_MspInit+0xc8>)
 800200e:	f001 f9b9 	bl	8003384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	202d      	movs	r0, #45	@ 0x2d
 8002018:	f000 ff97 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800201c:	202d      	movs	r0, #45	@ 0x2d
 800201e:	f000 ffb0 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	@ 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40000400 	.word	0x40000400
 8002030:	40023800 	.word	0x40023800
 8002034:	40002000 	.word	0x40002000
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <HAL_TIM_MspPostInit+0xb0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11f      	bne.n	800209e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800207a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800208c:	2301      	movs	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4817      	ldr	r0, [pc, #92]	@ (80020f4 <HAL_TIM_MspPostInit+0xb8>)
 8002098:	f001 f974 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800209c:	e022      	b.n	80020e4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a15      	ldr	r2, [pc, #84]	@ (80020f8 <HAL_TIM_MspPostInit+0xbc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11d      	bne.n	80020e4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	4a0f      	ldr	r2, [pc, #60]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b8:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c4:	2301      	movs	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d4:	2302      	movs	r3, #2
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	@ (80020fc <HAL_TIM_MspPostInit+0xc0>)
 80020e0:	f001 f950 	bl	8003384 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40020400 	.word	0x40020400

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_UART_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12b      	bne.n	800217a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_UART_MspInit+0x88>)
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800215a:	230c      	movs	r3, #12
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216a:	2307      	movs	r3, #7
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	@ (800218c <HAL_UART_MspInit+0x8c>)
 8002176:	f001 f905 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	@ 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40004400 	.word	0x40004400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e6:	f000 f96f 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}

080021ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021f2:	2002      	movs	r0, #2
 80021f4:	f001 fa74 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002200:	2010      	movs	r0, #16
 8002202:	f001 fa6d 	bl	80036e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002212:	f003 fe1f 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000428 	.word	0x20000428

08002220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_kill>:

int _kill(int pid, int sig)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223a:	f007 ff51 	bl	800a0e0 <__errno>
 800223e:	4603      	mov	r3, r0
 8002240:	2216      	movs	r2, #22
 8002242:	601a      	str	r2, [r3, #0]
  return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_exit>:

void _exit (int status)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe7 	bl	8002230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <_exit+0x12>

08002266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e00a      	b.n	800228e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002278:	f3af 8000 	nop.w
 800227c:	4601      	mov	r1, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	60ba      	str	r2, [r7, #8]
 8002284:	b2ca      	uxtb	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	dbf0      	blt.n	8002278 <_read+0x12>
  }

  return len;
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e009      	b.n	80022c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dbf1      	blt.n	80022b2 <_write+0x12>
  }
  return len;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_close>:

int _close(int file)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002300:	605a      	str	r2, [r3, #4]
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_isatty>:

int _isatty(int file)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f007 feb6 	bl	800a0e0 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20020000 	.word	0x20020000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	200005bc 	.word	0x200005bc
 80023a8:	20000b20 	.word	0x20000b20

080023ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002408 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023d4:	f7ff ffea 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f0:	4c0a      	ldr	r4, [pc, #40]	@ (800241c <LoopFillZerobss+0x22>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f007 fe75 	bl	800a0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002402:	f7fe fe5f 	bl	80010c4 <main>
  bx  lr    
 8002406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002414:	0800f368 	.word	0x0800f368
  ldr r2, =_sbss
 8002418:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 800241c:	20000b1c 	.word	0x20000b1c

08002420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC_IRQHandler>
	...

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <HAL_Init+0x40>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_Init+0x40>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800243e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <HAL_Init+0x40>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 fd71 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fc80 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00

08002468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd89 	bl	8002f9e <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 fd51 	bl	8002f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000008 	.word	0x20000008
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008
 80024ec:	200005c0 	.word	0x200005c0

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	200005c0 	.word	0x200005c0

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008

08002550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e033      	b.n	80025ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fc1c 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002596:	f023 0302 	bic.w	r3, r3, #2
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa78 	bl	8002a98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80025be:	e001      	b.n	80025c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Start_DMA+0x1e>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0e9      	b.n	80027ca <HAL_ADC_Start_DMA+0x1f2>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d018      	beq.n	800263e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800261c:	4b6d      	ldr	r3, [pc, #436]	@ (80027d4 <HAL_ADC_Start_DMA+0x1fc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6d      	ldr	r2, [pc, #436]	@ (80027d8 <HAL_ADC_Start_DMA+0x200>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9a      	lsrs	r2, r3, #18
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002630:	e002      	b.n	8002638 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3b01      	subs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800264c:	d107      	bne.n	800265e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800265c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 80a1 	bne.w	80027b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002698:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f023 0206 	bic.w	r2, r3, #6
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80026ba:	e002      	b.n	80026c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ca:	4b44      	ldr	r3, [pc, #272]	@ (80027dc <HAL_ADC_Start_DMA+0x204>)
 80026cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	4a43      	ldr	r2, [pc, #268]	@ (80027e0 <HAL_ADC_Start_DMA+0x208>)
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <HAL_ADC_Start_DMA+0x20c>)
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	4a41      	ldr	r2, [pc, #260]	@ (80027e8 <HAL_ADC_Start_DMA+0x210>)
 80026e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	334c      	adds	r3, #76	@ 0x4c
 800271a:	4619      	mov	r1, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f000 fcf8 	bl	8003114 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b00      	cmp	r3, #0
 800272e:	d12a      	bne.n	8002786 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2d      	ldr	r2, [pc, #180]	@ (80027ec <HAL_ADC_Start_DMA+0x214>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d015      	beq.n	8002766 <HAL_ADC_Start_DMA+0x18e>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	@ (80027f0 <HAL_ADC_Start_DMA+0x218>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d105      	bne.n	8002750 <HAL_ADC_Start_DMA+0x178>
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_ADC_Start_DMA+0x204>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a27      	ldr	r2, [pc, #156]	@ (80027f4 <HAL_ADC_Start_DMA+0x21c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d136      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_ADC_Start_DMA+0x204>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d130      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d129      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	e020      	b.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <HAL_ADC_Start_DMA+0x214>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d11b      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e00b      	b.n	80027c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f043 0210 	orr.w	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	40012300 	.word	0x40012300
 80027e0:	08002c91 	.word	0x08002c91
 80027e4:	08002d4b 	.word	0x08002d4b
 80027e8:	08002d67 	.word	0x08002d67
 80027ec:	40012000 	.word	0x40012000
 80027f0:	40012100 	.word	0x40012100
 80027f4:	40012200 	.word	0x40012200

080027f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e113      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x244>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b09      	cmp	r3, #9
 800285e:	d925      	bls.n	80028ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68d9      	ldr	r1, [r3, #12]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	3b1e      	subs	r3, #30
 8002876:	2207      	movs	r2, #7
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68d9      	ldr	r1, [r3, #12]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	4603      	mov	r3, r0
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4403      	add	r3, r0
 800289e:	3b1e      	subs	r3, #30
 80028a0:	409a      	lsls	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e022      	b.n	80028f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	2207      	movs	r2, #7
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4403      	add	r3, r0
 80028e8:	409a      	lsls	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d824      	bhi.n	8002944 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b05      	subs	r3, #5
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	400a      	ands	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b05      	subs	r3, #5
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
 8002942:	e04c      	b.n	80029de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d824      	bhi.n	8002996 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b23      	subs	r3, #35	@ 0x23
 800295e:	221f      	movs	r2, #31
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43da      	mvns	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	400a      	ands	r2, r1
 800296c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b23      	subs	r3, #35	@ 0x23
 8002988:	fa00 f203 	lsl.w	r2, r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
 8002994:	e023      	b.n	80029de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b41      	subs	r3, #65	@ 0x41
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b41      	subs	r3, #65	@ 0x41
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_ADC_ConfigChannel+0x250>)
 80029e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <HAL_ADC_ConfigChannel+0x254>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10f      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b12      	cmp	r3, #18
 80029f2:	d10b      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <HAL_ADC_ConfigChannel+0x254>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12b      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a8c <HAL_ADC_ConfigChannel+0x258>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x1f4>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b11      	cmp	r3, #17
 8002a26:	d122      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a11      	ldr	r2, [pc, #68]	@ (8002a8c <HAL_ADC_ConfigChannel+0x258>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d111      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_ADC_ConfigChannel+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_ADC_ConfigChannel+0x260>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9a      	lsrs	r2, r3, #18
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	10000012 	.word	0x10000012
 8002a90:	20000000 	.word	0x20000000
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa0:	4b79      	ldr	r3, [pc, #484]	@ (8002c88 <ADC_Init+0x1f0>)
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	4a58      	ldr	r2, [pc, #352]	@ (8002c8c <ADC_Init+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e00f      	b.n	8002b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0202 	bic.w	r2, r2, #2
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	005a      	lsls	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	035a      	lsls	r2, r3, #13
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e007      	b.n	8002c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	051a      	lsls	r2, r3, #20
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c4e:	025a      	lsls	r2, r3, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	029a      	lsls	r2, r3, #10
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012300 	.word	0x40012300
 8002c8c:	0f000001 	.word	0x0f000001

08002c90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13c      	bne.n	8002d24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d12b      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d127      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d119      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0220 	bic.w	r2, r2, #32
 8002cf6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fd6b 	bl	80027f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d22:	e00e      	b.n	8002d42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fd75 	bl	8002820 <HAL_ADC_ErrorCallback>
}
 8002d36:	e004      	b.n	8002d42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fd57 	bl	800280c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff fd4a 	bl	8002820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	@ (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff fa94 	bl	80024f0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e099      	b.n	8003108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	e00f      	b.n	8003016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff6:	f7ff fa7b 	bl	80024f0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d908      	bls.n	8003016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e078      	b.n	8003108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <HAL_DMA_Init+0x158>)
 8003030:	4013      	ands	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	2b04      	cmp	r3, #4
 800306e:	d107      	bne.n	8003080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	4313      	orrs	r3, r2
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d117      	bne.n	80030da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8e5 	bl	800328c <DMA_CheckFifoParam>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030d6:	2301      	movs	r3, #1
 80030d8:	e016      	b.n	8003108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f89c 	bl	8003220 <DMA_CalcBaseAndBitshift>
 80030e8:	4603      	mov	r3, r0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	223f      	movs	r2, #63	@ 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f010803f 	.word	0xf010803f

08003114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_DMA_Start_IT+0x26>
 8003136:	2302      	movs	r3, #2
 8003138:	e040      	b.n	80031bc <HAL_DMA_Start_IT+0xa8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d12f      	bne.n	80031ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f82e 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	223f      	movs	r2, #63	@ 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0216 	orr.w	r2, r2, #22
 8003182:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e005      	b.n	80031ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	0800e72c 	.word	0x0800e72c

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d856      	bhi.n	800335a <DMA_CheckFifoParam+0xce>
 80032ac:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	0800335b 	.word	0x0800335b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d046      	beq.n	800335e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e043      	b.n	800335e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032de:	d140      	bne.n	8003362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03d      	b.n	8003362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d837      	bhi.n	8003366 <DMA_CheckFifoParam+0xda>
 80032f6:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e030      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d025      	beq.n	800336a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e022      	b.n	800336a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800332c:	d11f      	bne.n	800336e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01c      	b.n	800336e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d903      	bls.n	8003342 <DMA_CheckFifoParam+0xb6>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d003      	beq.n	8003348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003340:	e018      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e015      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e00b      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335a:	bf00      	nop
 800335c:	e00a      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e008      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e006      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;   
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
    }
  } 
  
  return status; 
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e165      	b.n	800366c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a0:	2201      	movs	r2, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	f040 8154 	bne.w	8003666 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d005      	beq.n	80033d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d130      	bne.n	8003438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b03      	cmp	r3, #3
 8003442:	d017      	beq.n	8003474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d123      	bne.n	80034c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80ae 	beq.w	8003666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b5d      	ldr	r3, [pc, #372]	@ (8003684 <HAL_GPIO_Init+0x300>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	4a5c      	ldr	r2, [pc, #368]	@ (8003684 <HAL_GPIO_Init+0x300>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003518:	6453      	str	r3, [r2, #68]	@ 0x44
 800351a:	4b5a      	ldr	r3, [pc, #360]	@ (8003684 <HAL_GPIO_Init+0x300>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003526:	4a58      	ldr	r2, [pc, #352]	@ (8003688 <HAL_GPIO_Init+0x304>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_GPIO_Init+0x308>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x21a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4e      	ldr	r2, [pc, #312]	@ (8003690 <HAL_GPIO_Init+0x30c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x216>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4d      	ldr	r2, [pc, #308]	@ (8003694 <HAL_GPIO_Init+0x310>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x212>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_GPIO_Init+0x314>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_GPIO_Init+0x318>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x20a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <HAL_GPIO_Init+0x31c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x206>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <HAL_GPIO_Init+0x320>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x202>
 8003582:	2306      	movs	r3, #6
 8003584:	e00c      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 8003586:	2307      	movs	r3, #7
 8003588:	e00a      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 800358a:	2305      	movs	r3, #5
 800358c:	e008      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 800358e:	2304      	movs	r3, #4
 8003590:	e006      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 8003592:	2303      	movs	r3, #3
 8003594:	e004      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 8003596:	2302      	movs	r3, #2
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_GPIO_Init+0x21c>
 800359e:	2300      	movs	r3, #0
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	f002 0203 	and.w	r2, r2, #3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4093      	lsls	r3, r2
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b0:	4935      	ldr	r1, [pc, #212]	@ (8003688 <HAL_GPIO_Init+0x304>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035be:	4b3a      	ldr	r3, [pc, #232]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035e2:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e8:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800360c:	4a26      	ldr	r2, [pc, #152]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003612:	4b25      	ldr	r3, [pc, #148]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003636:	4a1c      	ldr	r2, [pc, #112]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363c:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003660:	4a11      	ldr	r2, [pc, #68]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	f67f ae96 	bls.w	80033a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40013800 	.word	0x40013800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40020800 	.word	0x40020800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40021000 	.word	0x40021000
 80036a0:	40021400 	.word	0x40021400
 80036a4:	40021800 	.word	0x40021800
 80036a8:	40013c00 	.word	0x40013c00

080036ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c8:	e003      	b.n	80036d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	041a      	lsls	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	619a      	str	r2, [r3, #24]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036ea:	4b08      	ldr	r3, [pc, #32]	@ (800370c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036f6:	4a05      	ldr	r2, [pc, #20]	@ (800370c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fada 	bl	8001cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40013c00 	.word	0x40013c00

08003710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e12b      	b.n	800397a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe fbb0 	bl	8001e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003774:	f001 fb90 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8003778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a81      	ldr	r2, [pc, #516]	@ (8003984 <HAL_I2C_Init+0x274>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d807      	bhi.n	8003794 <HAL_I2C_Init+0x84>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a80      	ldr	r2, [pc, #512]	@ (8003988 <HAL_I2C_Init+0x278>)
 8003788:	4293      	cmp	r3, r2
 800378a:	bf94      	ite	ls
 800378c:	2301      	movls	r3, #1
 800378e:	2300      	movhi	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e006      	b.n	80037a2 <HAL_I2C_Init+0x92>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a7d      	ldr	r2, [pc, #500]	@ (800398c <HAL_I2C_Init+0x27c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0e7      	b.n	800397a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a78      	ldr	r2, [pc, #480]	@ (8003990 <HAL_I2C_Init+0x280>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003984 <HAL_I2C_Init+0x274>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <HAL_I2C_Init+0xd4>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3301      	adds	r3, #1
 80037e2:	e009      	b.n	80037f8 <HAL_I2C_Init+0xe8>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_I2C_Init+0x284>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	3301      	adds	r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800380a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	495c      	ldr	r1, [pc, #368]	@ (8003984 <HAL_I2C_Init+0x274>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d819      	bhi.n	800384c <HAL_I2C_Init+0x13c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e59      	subs	r1, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fbb1 f3f3 	udiv	r3, r1, r3
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800382c:	400b      	ands	r3, r1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_I2C_Init+0x138>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e59      	subs	r1, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	e051      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 8003848:	2304      	movs	r3, #4
 800384a:	e04f      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d111      	bne.n	8003878 <HAL_I2C_Init+0x168>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e58      	subs	r0, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e012      	b.n	800389e <HAL_I2C_Init+0x18e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Init+0x196>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <HAL_I2C_Init+0x1bc>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e58      	subs	r0, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	440b      	add	r3, r1
 80038bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ca:	e00f      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	6809      	ldr	r1, [r1, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800391a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6911      	ldr	r1, [r2, #16]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d2      	ldr	r2, [r2, #12]
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	430b      	orrs	r3, r1
 800392e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	000186a0 	.word	0x000186a0
 8003988:	001e847f 	.word	0x001e847f
 800398c:	003d08ff 	.word	0x003d08ff
 8003990:	431bde83 	.word	0x431bde83
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	461a      	mov	r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	817b      	strh	r3, [r7, #10]
 80039a8:	4613      	mov	r3, r2
 80039aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7fe fda0 	bl	80024f0 <HAL_GetTick>
 80039b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 80e0 	bne.w	8003b80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2319      	movs	r3, #25
 80039c6:	2201      	movs	r2, #1
 80039c8:	4970      	ldr	r1, [pc, #448]	@ (8003b8c <HAL_I2C_Master_Transmit+0x1f4>)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 ff3c 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0d3      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2C_Master_Transmit+0x50>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0cc      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d007      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	@ 0x21
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	893a      	ldrh	r2, [r7, #8]
 8003a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a50      	ldr	r2, [pc, #320]	@ (8003b90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fcf6 	bl	8004448 <I2C_MasterRequestWrite>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e08d      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a7c:	e066      	b.n	8003b4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fffa 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x188>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	6a39      	ldr	r1, [r7, #32]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fff1 	bl	8004b0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d107      	bne.n	8003b48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d194      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	00100002 	.word	0x00100002
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bae:	f7fe fc9f 	bl	80024f0 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 80d9 	bne.w	8003d74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	496d      	ldr	r1, [pc, #436]	@ (8003d80 <HAL_I2C_Mem_Write+0x1ec>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fe3b 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e0cc      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Mem_Write+0x56>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0c5      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d007      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2221      	movs	r2, #33	@ 0x21
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2240      	movs	r2, #64	@ 0x40
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d84 <HAL_I2C_Mem_Write+0x1f0>)
 8003c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c52:	88f8      	ldrh	r0, [r7, #6]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4603      	mov	r3, r0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fc72 	bl	800454c <I2C_RequestMemoryWrite>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d052      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e081      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 ff00 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06b      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d11b      	bne.n	8003d14 <HAL_I2C_Mem_Write+0x180>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1aa      	bne.n	8003c72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fef3 	bl	8004b0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d107      	bne.n	8003d44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e016      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	00100002 	.word	0x00100002
 8003d84:	ffff0000 	.word	0xffff0000

08003d88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	@ 0x30
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da2:	f7fe fba5 	bl	80024f0 <HAL_GetTick>
 8003da6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	f040 8214 	bne.w	80041de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2319      	movs	r3, #25
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	497b      	ldr	r1, [pc, #492]	@ (8003fac <HAL_I2C_Mem_Read+0x224>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fd41 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e207      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Mem_Read+0x56>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e200      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d007      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2222      	movs	r2, #34	@ 0x22
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2240      	movs	r2, #64	@ 0x40
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a5b      	ldr	r2, [pc, #364]	@ (8003fb0 <HAL_I2C_Mem_Read+0x228>)
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e46:	88f8      	ldrh	r0, [r7, #6]
 8003e48:	893a      	ldrh	r2, [r7, #8]
 8003e4a:	8979      	ldrh	r1, [r7, #10]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4603      	mov	r3, r0
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fc0e 	bl	8004678 <I2C_RequestMemoryRead>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1bc      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e190      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e170      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d11b      	bne.n	8003f16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	e150      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f2c:	e144      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	f200 80f1 	bhi.w	800411a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d123      	bne.n	8003f88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fe29 	bl	8004b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e145      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f86:	e117      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d14e      	bne.n	800402e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	2200      	movs	r2, #0
 8003f98:	4906      	ldr	r1, [pc, #24]	@ (8003fb4 <HAL_I2C_Mem_Read+0x22c>)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fc54 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e11a      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
 8003faa:	bf00      	nop
 8003fac:	00100002 	.word	0x00100002
 8003fb0:	ffff0000 	.word	0xffff0000
 8003fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800402c:	e0c4      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	2200      	movs	r2, #0
 8004036:	496c      	ldr	r1, [pc, #432]	@ (80041e8 <HAL_I2C_Mem_Read+0x460>)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fc05 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cb      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2200      	movs	r2, #0
 8004092:	4955      	ldr	r1, [pc, #340]	@ (80041e8 <HAL_I2C_Mem_Read+0x460>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fbd7 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e09d      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004118:	e04e      	b.n	80041b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fd3c 	bl	8004b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e058      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d124      	bne.n	80041b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b03      	cmp	r3, #3
 8004174:	d107      	bne.n	8004186 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f aeb6 	bne.w	8003f2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	@ 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00010004 	.word	0x00010004

080041ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	460b      	mov	r3, r1
 80041fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7fe f978 	bl	80024f0 <HAL_GetTick>
 8004200:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b20      	cmp	r3, #32
 8004210:	f040 8111 	bne.w	8004436 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2319      	movs	r3, #25
 800421a:	2201      	movs	r2, #1
 800421c:	4988      	ldr	r1, [pc, #544]	@ (8004440 <HAL_I2C_IsDeviceReady+0x254>)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fb12 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	e104      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_I2C_IsDeviceReady+0x50>
 8004238:	2302      	movs	r3, #2
 800423a:	e0fd      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d007      	beq.n	8004262 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2224      	movs	r2, #36	@ 0x24
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a70      	ldr	r2, [pc, #448]	@ (8004444 <HAL_I2C_IsDeviceReady+0x258>)
 8004284:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004294:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2200      	movs	r2, #0
 800429e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fad0 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042bc:	d103      	bne.n	80042c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b6      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ca:	897b      	ldrh	r3, [r7, #10]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042da:	f7fe f909 	bl	80024f0 <HAL_GetTick>
 80042de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800430e:	e025      	b.n	800435c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fe f8ee 	bl	80024f0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <HAL_I2C_IsDeviceReady+0x13a>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	22a0      	movs	r2, #160	@ 0xa0
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2ba0      	cmp	r3, #160	@ 0xa0
 8004366:	d005      	beq.n	8004374 <HAL_I2C_IsDeviceReady+0x188>
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_I2C_IsDeviceReady+0x188>
 800436e:	7dbb      	ldrb	r3, [r7, #22]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0cd      	beq.n	8004310 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d129      	bne.n	80043de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004398:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	4921      	ldr	r1, [pc, #132]	@ (8004440 <HAL_I2C_IsDeviceReady+0x254>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fa44 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e036      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e02c      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2319      	movs	r3, #25
 80043fe:	2201      	movs	r2, #1
 8004400:	490f      	ldr	r1, [pc, #60]	@ (8004440 <HAL_I2C_IsDeviceReady+0x254>)
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fa20 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e012      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3301      	adds	r3, #1
 8004416:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	f4ff af32 	bcc.w	8004286 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	00100002 	.word	0x00100002
 8004444:	ffff0000 	.word	0xffff0000

08004448 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	460b      	mov	r3, r1
 8004456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d006      	beq.n	8004472 <I2C_MasterRequestWrite+0x2a>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d003      	beq.n	8004472 <I2C_MasterRequestWrite+0x2a>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004470:	d108      	bne.n	8004484 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e00b      	b.n	800449c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	2b12      	cmp	r3, #18
 800448a:	d107      	bne.n	800449c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f9cd 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c2:	d103      	bne.n	80044cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e035      	b.n	800453c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d8:	d108      	bne.n	80044ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044da:	897b      	ldrh	r3, [r7, #10]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044e8:	611a      	str	r2, [r3, #16]
 80044ea:	e01b      	b.n	8004524 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044ec:	897b      	ldrh	r3, [r7, #10]
 80044ee:	11db      	asrs	r3, r3, #7
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0306 	and.w	r3, r3, #6
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f063 030f 	orn	r3, r3, #15
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	490e      	ldr	r1, [pc, #56]	@ (8004544 <I2C_MasterRequestWrite+0xfc>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa16 	bl	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e010      	b.n	800453c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4907      	ldr	r1, [pc, #28]	@ (8004548 <I2C_MasterRequestWrite+0x100>)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa06 	bl	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	00010008 	.word	0x00010008
 8004548:	00010002 	.word	0x00010002

0800454c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	2200      	movs	r2, #0
 800457e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f960 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459c:	d103      	bne.n	80045a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e05f      	b.n	800466a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	492d      	ldr	r1, [pc, #180]	@ (8004674 <I2C_RequestMemoryWrite+0x128>)
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f9bb 	bl	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e04c      	b.n	800466a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	6a39      	ldr	r1, [r7, #32]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fa46 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00d      	beq.n	8004612 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d107      	bne.n	800460e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e02b      	b.n	800466a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004618:	893b      	ldrh	r3, [r7, #8]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]
 8004622:	e021      	b.n	8004668 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fa20 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b04      	cmp	r3, #4
 8004648:	d107      	bne.n	800465a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004658:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e005      	b.n	800466a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800465e:	893b      	ldrh	r3, [r7, #8]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	00010002 	.word	0x00010002

08004678 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	461a      	mov	r2, r3
 8004686:	4603      	mov	r3, r0
 8004688:	817b      	strh	r3, [r7, #10]
 800468a:	460b      	mov	r3, r1
 800468c:	813b      	strh	r3, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8c2 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d8:	d103      	bne.n	80046e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0aa      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	4952      	ldr	r1, [pc, #328]	@ (8004844 <I2C_RequestMemoryRead+0x1cc>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f91d 	bl	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e097      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f9a8 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	2b04      	cmp	r3, #4
 8004738:	d107      	bne.n	800474a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e076      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	e021      	b.n	80047a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004770:	6a39      	ldr	r1, [r7, #32]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f982 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	2b04      	cmp	r3, #4
 8004784:	d107      	bne.n	8004796 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e050      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479a:	893b      	ldrh	r3, [r7, #8]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a6:	6a39      	ldr	r1, [r7, #32]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f967 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d107      	bne.n	80047cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e035      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f82b 	bl	8004848 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004806:	d103      	bne.n	8004810 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e013      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004814:	897b      	ldrh	r3, [r7, #10]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	6a3a      	ldr	r2, [r7, #32]
 8004828:	4906      	ldr	r1, [pc, #24]	@ (8004844 <I2C_RequestMemoryRead+0x1cc>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f886 	bl	800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	00010002 	.word	0x00010002

08004848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004858:	e048      	b.n	80048ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d044      	beq.n	80048ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fd fe45 	bl	80024f0 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d139      	bne.n	80048ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10d      	bne.n	800489e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	e00c      	b.n	80048b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d116      	bne.n	80048ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e023      	b.n	8004934 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10d      	bne.n	8004912 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	43da      	mvns	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	e00c      	b.n	800492c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	43da      	mvns	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4013      	ands	r3, r2
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	429a      	cmp	r2, r3
 8004930:	d093      	beq.n	800485a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494a:	e071      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495a:	d123      	bne.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	f043 0204 	orr.w	r2, r3, #4
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e067      	b.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d041      	beq.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ac:	f7fd fda0 	bl	80024f0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d136      	bne.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10c      	bne.n	80049e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e00b      	b.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e021      	b.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10c      	bne.n	8004a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	43da      	mvns	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e00b      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f af6d 	bne.w	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a88:	e034      	b.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f8e3 	bl	8004c56 <I2C_IsAcknowledgeFailed>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e034      	b.n	8004b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d028      	beq.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fd fd25 	bl	80024f0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11d      	bne.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	2b80      	cmp	r3, #128	@ 0x80
 8004ac4:	d016      	beq.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d1c3      	bne.n	8004a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b18:	e034      	b.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f89b 	bl	8004c56 <I2C_IsAcknowledgeFailed>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e034      	b.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d028      	beq.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fd fcdd 	bl	80024f0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11d      	bne.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d016      	beq.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d1c3      	bne.n	8004b1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba8:	e049      	b.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d119      	bne.n	8004bec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0210 	mvn.w	r2, #16
 8004bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e030      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bec:	f7fd fc80 	bl	80024f0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11d      	bne.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b40      	cmp	r3, #64	@ 0x40
 8004c0e:	d016      	beq.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e007      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b40      	cmp	r3, #64	@ 0x40
 8004c4a:	d1ae      	bne.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6c:	d11b      	bne.n	8004ca6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0cc      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b68      	ldr	r3, [pc, #416]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d90c      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b65      	ldr	r3, [pc, #404]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b63      	ldr	r3, [pc, #396]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0b8      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d08:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a58      	ldr	r2, [pc, #352]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d20:	4b53      	ldr	r3, [pc, #332]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a52      	ldr	r2, [pc, #328]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	494d      	ldr	r1, [pc, #308]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d044      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d003      	beq.n	8004d72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b3f      	ldr	r3, [pc, #252]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e06f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e067      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4934      	ldr	r1, [pc, #208]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da4:	f7fd fba4 	bl	80024f0 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fd fba0 	bl	80024f0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e04f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d20c      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e032      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e08:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4916      	ldr	r1, [pc, #88]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	490e      	ldr	r1, [pc, #56]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3a:	f000 f855 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	490a      	ldr	r1, [pc, #40]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4c:	5ccb      	ldrb	r3, [r1, r3]
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	4a09      	ldr	r2, [pc, #36]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e56:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd fb04 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023c00 	.word	0x40023c00
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800e714 	.word	0x0800e714
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	20000004 	.word	0x20000004

08004e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e84:	4b03      	ldr	r3, [pc, #12]	@ (8004e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000000 	.word	0x20000000

08004e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e9c:	f7ff fff0 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0a9b      	lsrs	r3, r3, #10
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	0800e724 	.word	0x0800e724

08004ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec4:	f7ff ffdc 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0b5b      	lsrs	r3, r3, #13
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	@ (8004ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	0800e724 	.word	0x0800e724

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b0ae      	sub	sp, #184	@ 0xb8
 8004eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0e:	4bcb      	ldr	r3, [pc, #812]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	f200 8206 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x440>
 8004f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f59 	.word	0x08004f59
 8004f28:	08005329 	.word	0x08005329
 8004f2c:	08005329 	.word	0x08005329
 8004f30:	08005329 	.word	0x08005329
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08005329 	.word	0x08005329
 8004f3c:	08005329 	.word	0x08005329
 8004f40:	08005329 	.word	0x08005329
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08005329 	.word	0x08005329
 8004f4c:	08005329 	.word	0x08005329
 8004f50:	08005329 	.word	0x08005329
 8004f54:	08005159 	.word	0x08005159
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4bb9      	ldr	r3, [pc, #740]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f5e:	e1e7      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f60:	4bb8      	ldr	r3, [pc, #736]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f66:	e1e3      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f68:	4bb4      	ldr	r3, [pc, #720]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f74:	4bb1      	ldr	r3, [pc, #708]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d071      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f80:	4bae      	ldr	r3, [pc, #696]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f8c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	0159      	lsls	r1, r3, #5
 8004fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb8:	0150      	lsls	r0, r2, #5
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	1a51      	subs	r1, r2, r1
 8004fc2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004fd8:	4649      	mov	r1, r9
 8004fda:	018b      	lsls	r3, r1, #6
 8004fdc:	4641      	mov	r1, r8
 8004fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	018a      	lsls	r2, r1, #6
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1a51      	subs	r1, r2, r1
 8004fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fec:	4649      	mov	r1, r9
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005000:	4649      	mov	r1, r9
 8005002:	00cb      	lsls	r3, r1, #3
 8005004:	4641      	mov	r1, r8
 8005006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500a:	4641      	mov	r1, r8
 800500c:	00ca      	lsls	r2, r1, #3
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	4603      	mov	r3, r0
 8005014:	4622      	mov	r2, r4
 8005016:	189b      	adds	r3, r3, r2
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
 800501a:	462b      	mov	r3, r5
 800501c:	460a      	mov	r2, r1
 800501e:	eb42 0303 	adc.w	r3, r2, r3
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005030:	4629      	mov	r1, r5
 8005032:	024b      	lsls	r3, r1, #9
 8005034:	4621      	mov	r1, r4
 8005036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800503a:	4621      	mov	r1, r4
 800503c:	024a      	lsls	r2, r1, #9
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800504c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005050:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005054:	f7fb fe88 	bl	8000d68 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005062:	e067      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005064:	4b75      	ldr	r3, [pc, #468]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	099b      	lsrs	r3, r3, #6
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005070:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005074:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800507e:	2300      	movs	r3, #0
 8005080:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005082:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	0159      	lsls	r1, r3, #5
 8005094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005098:	0150      	lsls	r0, r2, #5
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4621      	mov	r1, r4
 80050a0:	1a51      	subs	r1, r2, r1
 80050a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050a4:	4629      	mov	r1, r5
 80050a6:	eb63 0301 	sbc.w	r3, r3, r1
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80050b8:	4649      	mov	r1, r9
 80050ba:	018b      	lsls	r3, r1, #6
 80050bc:	4641      	mov	r1, r8
 80050be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050c2:	4641      	mov	r1, r8
 80050c4:	018a      	lsls	r2, r1, #6
 80050c6:	4641      	mov	r1, r8
 80050c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80050cc:	4649      	mov	r1, r9
 80050ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050e6:	4692      	mov	sl, r2
 80050e8:	469b      	mov	fp, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb1a 0303 	adds.w	r3, sl, r3
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	462b      	mov	r3, r5
 80050f4:	eb4b 0303 	adc.w	r3, fp, r3
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005106:	4629      	mov	r1, r5
 8005108:	028b      	lsls	r3, r1, #10
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005110:	4621      	mov	r1, r4
 8005112:	028a      	lsls	r2, r1, #10
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800511c:	2200      	movs	r2, #0
 800511e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005120:	677a      	str	r2, [r7, #116]	@ 0x74
 8005122:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005126:	f7fb fe1f 	bl	8000d68 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4613      	mov	r3, r2
 8005130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005134:	4b41      	ldr	r3, [pc, #260]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800514a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005156:	e0eb      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005158:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005164:	4b35      	ldr	r3, [pc, #212]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d06b      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005170:	4b32      	ldr	r3, [pc, #200]	@ (800523c <HAL_RCC_GetSysClockFreq+0x354>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	099b      	lsrs	r3, r3, #6
 8005176:	2200      	movs	r2, #0
 8005178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800517a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800517c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	663b      	str	r3, [r7, #96]	@ 0x60
 8005184:	2300      	movs	r3, #0
 8005186:	667b      	str	r3, [r7, #100]	@ 0x64
 8005188:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800518c:	4622      	mov	r2, r4
 800518e:	462b      	mov	r3, r5
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519e:	0150      	lsls	r0, r2, #5
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4621      	mov	r1, r4
 80051a6:	1a51      	subs	r1, r2, r1
 80051a8:	61b9      	str	r1, [r7, #24]
 80051aa:	4629      	mov	r1, r5
 80051ac:	eb63 0301 	sbc.w	r3, r3, r1
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80051be:	4659      	mov	r1, fp
 80051c0:	018b      	lsls	r3, r1, #6
 80051c2:	4651      	mov	r1, sl
 80051c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051c8:	4651      	mov	r1, sl
 80051ca:	018a      	lsls	r2, r1, #6
 80051cc:	4651      	mov	r1, sl
 80051ce:	ebb2 0801 	subs.w	r8, r2, r1
 80051d2:	4659      	mov	r1, fp
 80051d4:	eb63 0901 	sbc.w	r9, r3, r1
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ec:	4690      	mov	r8, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	4623      	mov	r3, r4
 80051f2:	eb18 0303 	adds.w	r3, r8, r3
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	462b      	mov	r3, r5
 80051fa:	eb49 0303 	adc.w	r3, r9, r3
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800520c:	4629      	mov	r1, r5
 800520e:	024b      	lsls	r3, r1, #9
 8005210:	4621      	mov	r1, r4
 8005212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005216:	4621      	mov	r1, r4
 8005218:	024a      	lsls	r2, r1, #9
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005222:	2200      	movs	r2, #0
 8005224:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005226:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005228:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800522c:	f7fb fd9c 	bl	8000d68 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4613      	mov	r3, r2
 8005236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800523a:	e065      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x420>
 800523c:	40023800 	.word	0x40023800
 8005240:	00f42400 	.word	0x00f42400
 8005244:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005248:	4b3d      	ldr	r3, [pc, #244]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x458>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	2200      	movs	r2, #0
 8005250:	4618      	mov	r0, r3
 8005252:	4611      	mov	r1, r2
 8005254:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005258:	653b      	str	r3, [r7, #80]	@ 0x50
 800525a:	2300      	movs	r3, #0
 800525c:	657b      	str	r3, [r7, #84]	@ 0x54
 800525e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005262:	4642      	mov	r2, r8
 8005264:	464b      	mov	r3, r9
 8005266:	f04f 0000 	mov.w	r0, #0
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	0159      	lsls	r1, r3, #5
 8005270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005274:	0150      	lsls	r0, r2, #5
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4641      	mov	r1, r8
 800527c:	1a51      	subs	r1, r2, r1
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4649      	mov	r1, r9
 8005282:	eb63 0301 	sbc.w	r3, r3, r1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005294:	4659      	mov	r1, fp
 8005296:	018b      	lsls	r3, r1, #6
 8005298:	4651      	mov	r1, sl
 800529a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800529e:	4651      	mov	r1, sl
 80052a0:	018a      	lsls	r2, r1, #6
 80052a2:	4651      	mov	r1, sl
 80052a4:	1a54      	subs	r4, r2, r1
 80052a6:	4659      	mov	r1, fp
 80052a8:	eb63 0501 	sbc.w	r5, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	4643      	mov	r3, r8
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	464b      	mov	r3, r9
 80052c8:	eb45 0303 	adc.w	r3, r5, r3
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052da:	4629      	mov	r1, r5
 80052dc:	028b      	lsls	r3, r1, #10
 80052de:	4621      	mov	r1, r4
 80052e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e4:	4621      	mov	r1, r4
 80052e6:	028a      	lsls	r2, r1, #10
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052f0:	2200      	movs	r2, #0
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052fa:	f7fb fd35 	bl	8000d68 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4613      	mov	r3, r2
 8005304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005308:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x458>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	0f1b      	lsrs	r3, r3, #28
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800531a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005326:	e003      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x45c>)
 800532a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800532e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005334:	4618      	mov	r0, r3
 8005336:	37b8      	adds	r7, #184	@ 0xb8
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400

08005348 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e28d      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8083 	beq.w	800546e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005368:	4b94      	ldr	r3, [pc, #592]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b04      	cmp	r3, #4
 8005372:	d019      	beq.n	80053a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005374:	4b91      	ldr	r3, [pc, #580]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
        || \
 800537c:	2b08      	cmp	r3, #8
 800537e:	d106      	bne.n	800538e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005380:	4b8e      	ldr	r3, [pc, #568]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800538c:	d00c      	beq.n	80053a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538e:	4b8b      	ldr	r3, [pc, #556]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d112      	bne.n	80053c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b88      	ldr	r3, [pc, #544]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	4b84      	ldr	r3, [pc, #528]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05b      	beq.n	800546c <HAL_RCC_OscConfig+0x124>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d157      	bne.n	800546c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e25a      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d106      	bne.n	80053d8 <HAL_RCC_OscConfig+0x90>
 80053ca:	4b7c      	ldr	r3, [pc, #496]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a7b      	ldr	r2, [pc, #492]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e01d      	b.n	8005414 <HAL_RCC_OscConfig+0xcc>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0xb4>
 80053e2:	4b76      	ldr	r3, [pc, #472]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a75      	ldr	r2, [pc, #468]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b73      	ldr	r3, [pc, #460]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a72      	ldr	r2, [pc, #456]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e00b      	b.n	8005414 <HAL_RCC_OscConfig+0xcc>
 80053fc:	4b6f      	ldr	r3, [pc, #444]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6e      	ldr	r2, [pc, #440]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	4b6c      	ldr	r3, [pc, #432]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6b      	ldr	r2, [pc, #428]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800540e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d013      	beq.n	8005444 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd f868 	bl	80024f0 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005424:	f7fd f864 	bl	80024f0 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	@ 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e21f      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b61      	ldr	r3, [pc, #388]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0xdc>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd f854 	bl	80024f0 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544c:	f7fd f850 	bl	80024f0 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	@ 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e20b      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	4b57      	ldr	r3, [pc, #348]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x104>
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d06f      	beq.n	800555a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800547a:	4b50      	ldr	r3, [pc, #320]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b00      	cmp	r3, #0
 8005484:	d017      	beq.n	80054b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005486:	4b4d      	ldr	r3, [pc, #308]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
        || \
 800548e:	2b08      	cmp	r3, #8
 8005490:	d105      	bne.n	800549e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005492:	4b4a      	ldr	r3, [pc, #296]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b47      	ldr	r3, [pc, #284]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d11c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054aa:	4b44      	ldr	r3, [pc, #272]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d116      	bne.n	80054e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	4b41      	ldr	r3, [pc, #260]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_RCC_OscConfig+0x186>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e1d3      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ce:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4937      	ldr	r1, [pc, #220]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e2:	e03a      	b.n	800555a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ec:	4b34      	ldr	r3, [pc, #208]	@ (80055c0 <HAL_RCC_OscConfig+0x278>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fc fffd 	bl	80024f0 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fa:	f7fc fff9 	bl	80024f0 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e1b4      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550c:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005518:	4b28      	ldr	r3, [pc, #160]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4925      	ldr	r1, [pc, #148]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	e015      	b.n	800555a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552e:	4b24      	ldr	r3, [pc, #144]	@ (80055c0 <HAL_RCC_OscConfig+0x278>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fc ffdc 	bl	80024f0 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553c:	f7fc ffd8 	bl	80024f0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e193      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554e:	4b1b      	ldr	r3, [pc, #108]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d036      	beq.n	80055d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	4b15      	ldr	r3, [pc, #84]	@ (80055c4 <HAL_RCC_OscConfig+0x27c>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc ffbc 	bl	80024f0 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800557c:	f7fc ffb8 	bl	80024f0 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e173      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558e:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x234>
 800559a:	e01b      	b.n	80055d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559c:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <HAL_RCC_OscConfig+0x27c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fc ffa5 	bl	80024f0 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	e00e      	b.n	80055c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fc ffa1 	bl	80024f0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d907      	bls.n	80055c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e15c      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
 80055bc:	40023800 	.word	0x40023800
 80055c0:	42470000 	.word	0x42470000
 80055c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	4b8a      	ldr	r3, [pc, #552]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ea      	bne.n	80055aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8097 	beq.w	8005710 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e6:	4b83      	ldr	r3, [pc, #524]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	4b7f      	ldr	r3, [pc, #508]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	4a7e      	ldr	r2, [pc, #504]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005600:	6413      	str	r3, [r2, #64]	@ 0x40
 8005602:	4b7c      	ldr	r3, [pc, #496]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b79      	ldr	r3, [pc, #484]	@ (80057f8 <HAL_RCC_OscConfig+0x4b0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d118      	bne.n	8005650 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561e:	4b76      	ldr	r3, [pc, #472]	@ (80057f8 <HAL_RCC_OscConfig+0x4b0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a75      	ldr	r2, [pc, #468]	@ (80057f8 <HAL_RCC_OscConfig+0x4b0>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562a:	f7fc ff61 	bl	80024f0 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fc ff5d 	bl	80024f0 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e118      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	4b6c      	ldr	r3, [pc, #432]	@ (80057f8 <HAL_RCC_OscConfig+0x4b0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x31e>
 8005658:	4b66      	ldr	r3, [pc, #408]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	4a65      	ldr	r2, [pc, #404]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	@ 0x70
 8005664:	e01c      	b.n	80056a0 <HAL_RCC_OscConfig+0x358>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x340>
 800566e:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a60      	ldr	r2, [pc, #384]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005674:	f043 0304 	orr.w	r3, r3, #4
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
 800567a:	4b5e      	ldr	r3, [pc, #376]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	4a5d      	ldr	r2, [pc, #372]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	@ 0x70
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0x358>
 8005688:	4b5a      	ldr	r3, [pc, #360]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a59      	ldr	r2, [pc, #356]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
 8005694:	4b57      	ldr	r3, [pc, #348]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005698:	4a56      	ldr	r2, [pc, #344]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800569a:	f023 0304 	bic.w	r3, r3, #4
 800569e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc ff22 	bl	80024f0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fc ff1e 	bl	80024f0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0d7      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	4b4b      	ldr	r3, [pc, #300]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0ee      	beq.n	80056b0 <HAL_RCC_OscConfig+0x368>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fc ff0c 	bl	80024f0 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fc ff08 	bl	80024f0 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0c1      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f2:	4b40      	ldr	r3, [pc, #256]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ee      	bne.n	80056dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	4a3a      	ldr	r2, [pc, #232]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800570a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800570e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80ad 	beq.w	8005874 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b08      	cmp	r3, #8
 8005724:	d060      	beq.n	80057e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d145      	bne.n	80057ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <HAL_RCC_OscConfig+0x4b4>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fc fedc 	bl	80024f0 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fc fed8 	bl	80024f0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e093      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005768:	019b      	lsls	r3, r3, #6
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	3b01      	subs	r3, #1
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	071b      	lsls	r3, r3, #28
 8005786:	491b      	ldr	r1, [pc, #108]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <HAL_RCC_OscConfig+0x4b4>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fc fead 	bl	80024f0 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579a:	f7fc fea9 	bl	80024f0 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e064      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ac:	4b11      	ldr	r3, [pc, #68]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x452>
 80057b8:	e05c      	b.n	8005874 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ba:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <HAL_RCC_OscConfig+0x4b4>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fc fe96 	bl	80024f0 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fc fe92 	bl	80024f0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e04d      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <HAL_RCC_OscConfig+0x4ac>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x480>
 80057e6:	e045      	b.n	8005874 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e040      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40007000 	.word	0x40007000
 80057fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <HAL_RCC_OscConfig+0x538>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d030      	beq.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d129      	bne.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d122      	bne.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005830:	4013      	ands	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005838:	4293      	cmp	r3, r2
 800583a:	d119      	bne.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	3b01      	subs	r3, #1
 800584a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d10f      	bne.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800

08005884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e041      	b.n	800591a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fc fb60 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f000 fe48 	bl	8006558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e041      	b.n	80059b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fc faef 	bl	8001f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f000 fdf9 	bl	8006558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x24>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e022      	b.n	8005a2a <HAL_TIM_PWM_Start+0x6a>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d109      	bne.n	80059fe <HAL_TIM_PWM_Start+0x3e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e015      	b.n	8005a2a <HAL_TIM_PWM_Start+0x6a>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d109      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x58>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e008      	b.n	8005a2a <HAL_TIM_PWM_Start+0x6a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e07c      	b.n	8005b2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0x82>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a40:	e013      	b.n	8005a6a <HAL_TIM_PWM_Start+0xaa>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x92>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a50:	e00b      	b.n	8005a6a <HAL_TIM_PWM_Start+0xaa>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a60:	e003      	b.n	8005a6a <HAL_TIM_PWM_Start+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f990 	bl	8006d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b34 <HAL_TIM_PWM_Start+0x174>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_TIM_PWM_Start+0xcc>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <HAL_TIM_PWM_Start+0x178>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_PWM_Start+0xd0>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_PWM_Start+0xd2>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <HAL_TIM_PWM_Start+0x174>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d022      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d01d      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <HAL_TIM_PWM_Start+0x17c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d018      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <HAL_TIM_PWM_Start+0x180>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_TIM_PWM_Start+0x184>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <HAL_TIM_PWM_Start+0x178>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <HAL_TIM_PWM_Start+0x188>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_PWM_Start+0x136>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <HAL_TIM_PWM_Start+0x18c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d111      	bne.n	8005b1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b06      	cmp	r3, #6
 8005b06:	d010      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	e007      	b.n	8005b2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40001800 	.word	0x40001800

08005b50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e041      	b.n	8005be6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f839 	bl	8005bee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fce2 	bl	8006558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_IC_Start_IT+0x1e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e013      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_IC_Start_IT+0x2e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e00b      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0x3e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e003      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_TIM_IC_Start_IT+0x58>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e013      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d104      	bne.n	8005c6c <HAL_TIM_IC_Start_IT+0x68>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e00b      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d104      	bne.n	8005c7c <HAL_TIM_IC_Start_IT+0x78>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e003      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8c:	7b7b      	ldrb	r3, [r7, #13]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0cc      	b.n	8005e30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_IC_Start_IT+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ca4:	e013      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_IC_Start_IT+0xb2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb4:	e00b      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_IC_Start_IT+0xc2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cc4:	e003      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_IC_Start_IT+0xda>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_IC_Start_IT+0xea>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_IC_Start_IT+0xfa>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d841      	bhi.n	8005d90 <HAL_TIM_IC_Start_IT+0x18c>
 8005d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <HAL_TIM_IC_Start_IT+0x110>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d7f 	.word	0x08005d7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0202 	orr.w	r2, r2, #2
 8005d56:	60da      	str	r2, [r3, #12]
      break;
 8005d58:	e01d      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0204 	orr.w	r2, r2, #4
 8005d68:	60da      	str	r2, [r3, #12]
      break;
 8005d6a:	e014      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	60da      	str	r2, [r3, #12]
      break;
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0210 	orr.w	r2, r2, #16
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d148      	bne.n	8005e2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2201      	movs	r2, #1
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fff7 	bl	8006d98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <HAL_TIM_IC_Start_IT+0x234>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d022      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbc:	d01d      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e3c <HAL_TIM_IC_Start_IT+0x238>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d018      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e40 <HAL_TIM_IC_Start_IT+0x23c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <HAL_TIM_IC_Start_IT+0x240>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00e      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a19      	ldr	r2, [pc, #100]	@ (8005e48 <HAL_TIM_IC_Start_IT+0x244>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a18      	ldr	r2, [pc, #96]	@ (8005e4c <HAL_TIM_IC_Start_IT+0x248>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0x1f6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <HAL_TIM_IC_Start_IT+0x24c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	d010      	beq.n	8005e2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	e007      	b.n	8005e2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40001800 	.word	0x40001800

08005e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0202 	mvn.w	r2, #2
 8005e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fb fe6a 	bl	8001b78 <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb38 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb3f 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0204 	mvn.w	r2, #4
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fb fe44 	bl	8001b78 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fb12 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fb19 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0208 	mvn.w	r2, #8
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fe1e 	bl	8001b78 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 faec 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 faf3 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2208      	movs	r2, #8
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fdf8 	bl	8001b78 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fac6 	bl	800651c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 facd 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0201 	mvn.w	r2, #1
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 faa4 	bl	8006508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 ffd8 	bl	8006f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa9e 	bl	8006544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00c      	beq.n	800602c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0220 	mvn.w	r2, #32
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ffaa 	bl	8006f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_TIM_IC_ConfigChannel+0x1e>
 800604e:	2302      	movs	r3, #2
 8006050:	e088      	b.n	8006164 <HAL_TIM_IC_ConfigChannel+0x130>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006070:	f000 fcce 	bl	8006a10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 020c 	bic.w	r2, r2, #12
 8006082:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6999      	ldr	r1, [r3, #24]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	619a      	str	r2, [r3, #24]
 8006096:	e060      	b.n	800615a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b04      	cmp	r3, #4
 800609c:	d11c      	bne.n	80060d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80060ae:	f000 fd52 	bl	8006b56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6999      	ldr	r1, [r3, #24]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	619a      	str	r2, [r3, #24]
 80060d6:	e040      	b.n	800615a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d11b      	bne.n	8006116 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060ee:	f000 fd9f 	bl	8006c30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 020c 	bic.w	r2, r2, #12
 8006100:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	61da      	str	r2, [r3, #28]
 8006114:	e021      	b.n	800615a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b0c      	cmp	r3, #12
 800611a:	d11c      	bne.n	8006156 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800612c:	f000 fdbc 	bl	8006ca8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800613e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69d9      	ldr	r1, [r3, #28]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	61da      	str	r2, [r3, #28]
 8006154:	e001      	b.n	800615a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0ae      	b.n	80062e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	f200 809f 	bhi.w	80062d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080062d9 	.word	0x080062d9
 80061a8:	080062d9 	.word	0x080062d9
 80061ac:	080062d9 	.word	0x080062d9
 80061b0:	08006215 	.word	0x08006215
 80061b4:	080062d9 	.word	0x080062d9
 80061b8:	080062d9 	.word	0x080062d9
 80061bc:	080062d9 	.word	0x080062d9
 80061c0:	08006257 	.word	0x08006257
 80061c4:	080062d9 	.word	0x080062d9
 80061c8:	080062d9 	.word	0x080062d9
 80061cc:	080062d9 	.word	0x080062d9
 80061d0:	08006297 	.word	0x08006297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa68 	bl	80066b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	619a      	str	r2, [r3, #24]
      break;
 8006212:	e064      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fab8 	bl	8006790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6999      	ldr	r1, [r3, #24]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	619a      	str	r2, [r3, #24]
      break;
 8006254:	e043      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fb0d 	bl	800687c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0204 	bic.w	r2, r2, #4
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	61da      	str	r2, [r3, #28]
      break;
 8006294:	e023      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb61 	bl	8006964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69d9      	ldr	r1, [r3, #28]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	61da      	str	r2, [r3, #28]
      break;
 80062d6:	e002      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x1c>
 8006308:	2302      	movs	r3, #2
 800630a:	e0b4      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x186>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006344:	d03e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634a:	f200 8087 	bhi.w	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	f000 8086 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x172>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800635a:	d87f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b70      	cmp	r3, #112	@ 0x70
 800635e:	d01a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0xa6>
 8006360:	2b70      	cmp	r3, #112	@ 0x70
 8006362:	d87b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b60      	cmp	r3, #96	@ 0x60
 8006366:	d050      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x11a>
 8006368:	2b60      	cmp	r3, #96	@ 0x60
 800636a:	d877      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b50      	cmp	r3, #80	@ 0x50
 800636e:	d03c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xfa>
 8006370:	2b50      	cmp	r3, #80	@ 0x50
 8006372:	d873      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d058      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x13a>
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d86f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d064      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b30      	cmp	r3, #48	@ 0x30
 8006382:	d86b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d060      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d867      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d05a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	e062      	b.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a6:	f000 fcd7 	bl	8006d58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e04f      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d4:	f000 fcc0 	bl	8006d58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e6:	609a      	str	r2, [r3, #8]
      break;
 80063e8:	e03c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fb7e 	bl	8006af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2150      	movs	r1, #80	@ 0x50
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fc8d 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006408:	e02c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fbda 	bl	8006bd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	@ 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fc7d 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006428:	e01c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006436:	461a      	mov	r2, r3
 8006438:	f000 fb5e 	bl	8006af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2140      	movs	r1, #64	@ 0x40
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fc6d 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006448:	e00c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 fc64 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 800645a:	e003      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e000      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d831      	bhi.n	80064f8 <HAL_TIM_ReadCapturedValue+0x78>
 8006494:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064f9 	.word	0x080064f9
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	080064f9 	.word	0x080064f9
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064f9 	.word	0x080064f9
 80064b4:	080064f9 	.word	0x080064f9
 80064b8:	080064f9 	.word	0x080064f9
 80064bc:	080064e5 	.word	0x080064e5
 80064c0:	080064f9 	.word	0x080064f9
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	080064f9 	.word	0x080064f9
 80064cc:	080064ef 	.word	0x080064ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d6:	60fb      	str	r3, [r7, #12]

      break;
 80064d8:	e00f      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	60fb      	str	r3, [r7, #12]

      break;
 80064e2:	e00a      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ea:	60fb      	str	r3, [r7, #12]

      break;
 80064ec:	e005      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	60fb      	str	r3, [r7, #12]

      break;
 80064f6:	e000      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064f8:	bf00      	nop
  }

  return tmpreg;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a46      	ldr	r2, [pc, #280]	@ (8006684 <TIM_Base_SetConfig+0x12c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006576:	d00f      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a43      	ldr	r2, [pc, #268]	@ (8006688 <TIM_Base_SetConfig+0x130>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a42      	ldr	r2, [pc, #264]	@ (800668c <TIM_Base_SetConfig+0x134>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a41      	ldr	r2, [pc, #260]	@ (8006690 <TIM_Base_SetConfig+0x138>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_Base_SetConfig+0x40>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a40      	ldr	r2, [pc, #256]	@ (8006694 <TIM_Base_SetConfig+0x13c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d108      	bne.n	80065aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a35      	ldr	r2, [pc, #212]	@ (8006684 <TIM_Base_SetConfig+0x12c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b8:	d027      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a32      	ldr	r2, [pc, #200]	@ (8006688 <TIM_Base_SetConfig+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d023      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a31      	ldr	r2, [pc, #196]	@ (800668c <TIM_Base_SetConfig+0x134>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01f      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a30      	ldr	r2, [pc, #192]	@ (8006690 <TIM_Base_SetConfig+0x138>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006694 <TIM_Base_SetConfig+0x13c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d017      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006698 <TIM_Base_SetConfig+0x140>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2d      	ldr	r2, [pc, #180]	@ (800669c <TIM_Base_SetConfig+0x144>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00f      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2c      	ldr	r2, [pc, #176]	@ (80066a0 <TIM_Base_SetConfig+0x148>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00b      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2b      	ldr	r2, [pc, #172]	@ (80066a4 <TIM_Base_SetConfig+0x14c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d007      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2a      	ldr	r2, [pc, #168]	@ (80066a8 <TIM_Base_SetConfig+0x150>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a29      	ldr	r2, [pc, #164]	@ (80066ac <TIM_Base_SetConfig+0x154>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d108      	bne.n	800661c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a10      	ldr	r2, [pc, #64]	@ (8006684 <TIM_Base_SetConfig+0x12c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0xf8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a12      	ldr	r2, [pc, #72]	@ (8006694 <TIM_Base_SetConfig+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d103      	bne.n	8006658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d105      	bne.n	8006676 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]
  }
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40010400 	.word	0x40010400
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800
 80066a4:	40001800 	.word	0x40001800
 80066a8:	40001c00 	.word	0x40001c00
 80066ac:	40002000 	.word	0x40002000

080066b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 0201 	bic.w	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 0302 	bic.w	r3, r3, #2
 80066f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a20      	ldr	r2, [pc, #128]	@ (8006788 <TIM_OC1_SetConfig+0xd8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC1_SetConfig+0x64>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1f      	ldr	r2, [pc, #124]	@ (800678c <TIM_OC1_SetConfig+0xdc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10c      	bne.n	800672e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0308 	bic.w	r3, r3, #8
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <TIM_OC1_SetConfig+0xd8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_OC1_SetConfig+0x8e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a14      	ldr	r2, [pc, #80]	@ (800678c <TIM_OC1_SetConfig+0xdc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d111      	bne.n	8006762 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 0210 	bic.w	r2, r3, #16
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0320 	bic.w	r3, r3, #32
 80067da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a22      	ldr	r2, [pc, #136]	@ (8006874 <TIM_OC2_SetConfig+0xe4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC2_SetConfig+0x68>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a21      	ldr	r2, [pc, #132]	@ (8006878 <TIM_OC2_SetConfig+0xe8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d10d      	bne.n	8006814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <TIM_OC2_SetConfig+0xe4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC2_SetConfig+0x94>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a16      	ldr	r2, [pc, #88]	@ (8006878 <TIM_OC2_SetConfig+0xe8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d113      	bne.n	800684c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800682a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40010400 	.word	0x40010400

0800687c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a21      	ldr	r2, [pc, #132]	@ (800695c <TIM_OC3_SetConfig+0xe0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC3_SetConfig+0x66>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a20      	ldr	r2, [pc, #128]	@ (8006960 <TIM_OC3_SetConfig+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10d      	bne.n	80068fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a16      	ldr	r2, [pc, #88]	@ (800695c <TIM_OC3_SetConfig+0xe0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC3_SetConfig+0x92>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <TIM_OC3_SetConfig+0xe4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d113      	bne.n	8006936 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400

08006964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800699a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <TIM_OC4_SetConfig+0xa4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC4_SetConfig+0x68>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <TIM_OC4_SetConfig+0xa8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d109      	bne.n	80069e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 0201 	bic.w	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a28      	ldr	r2, [pc, #160]	@ (8006adc <TIM_TI1_SetConfig+0xcc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01b      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a44:	d017      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a25      	ldr	r2, [pc, #148]	@ (8006ae0 <TIM_TI1_SetConfig+0xd0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a24      	ldr	r2, [pc, #144]	@ (8006ae4 <TIM_TI1_SetConfig+0xd4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a23      	ldr	r2, [pc, #140]	@ (8006ae8 <TIM_TI1_SetConfig+0xd8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a22      	ldr	r2, [pc, #136]	@ (8006aec <TIM_TI1_SetConfig+0xdc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a21      	ldr	r2, [pc, #132]	@ (8006af0 <TIM_TI1_SetConfig+0xe0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_TI1_SetConfig+0x66>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a20      	ldr	r2, [pc, #128]	@ (8006af4 <TIM_TI1_SetConfig+0xe4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <TIM_TI1_SetConfig+0x6a>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <TIM_TI1_SetConfig+0x6c>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e003      	b.n	8006a9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f023 030a 	bic.w	r3, r3, #10
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f003 030a 	and.w	r3, r3, #10
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40010400 	.word	0x40010400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40001800 	.word	0x40001800

08006af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f023 0201 	bic.w	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 030a 	bic.w	r3, r3, #10
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0210 	bic.w	r2, r3, #16
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	031b      	lsls	r3, r3, #12
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f023 0303 	bic.w	r3, r3, #3
 8006c5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	621a      	str	r2, [r3, #32]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ce6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	031b      	lsls	r3, r3, #12
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	031b      	lsls	r3, r3, #12
 8006d00:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f043 0307 	orr.w	r3, r3, #7
 8006d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	609a      	str	r2, [r3, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2201      	movs	r2, #1
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
 8006db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1a      	ldr	r2, [r3, #32]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	43db      	mvns	r3, r3
 8006dba:	401a      	ands	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1a      	ldr	r2, [r3, #32]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e05a      	b.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a21      	ldr	r2, [pc, #132]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e48:	d01d      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1a      	ldr	r2, [pc, #104]	@ (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a17      	ldr	r2, [pc, #92]	@ (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a15      	ldr	r2, [pc, #84]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10c      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800
 8006ecc:	40000c00 	.word	0x40000c00
 8006ed0:	40010400 	.word	0x40010400
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40001800 	.word	0x40001800

08006edc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e03d      	b.n	8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e042      	b.n	8007040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fb f896 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	@ 0x24
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f973 	bl	80072d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	@ 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b20      	cmp	r3, #32
 8007066:	d175      	bne.n	8007154 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_UART_Transmit+0x2c>
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e06e      	b.n	8007156 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2221      	movs	r2, #33	@ 0x21
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007086:	f7fb fa33 	bl	80024f0 <HAL_GetTick>
 800708a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a0:	d108      	bne.n	80070b4 <HAL_UART_Transmit+0x6c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e003      	b.n	80070bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070bc:	e02e      	b.n	800711c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2180      	movs	r1, #128	@ 0x80
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f848 	bl	800715e <UART_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e03a      	b.n	8007156 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3302      	adds	r3, #2
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e007      	b.n	800710e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1cb      	bne.n	80070be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	2140      	movs	r1, #64	@ 0x40
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f814 	bl	800715e <UART_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b086      	sub	sp, #24
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716e:	e03b      	b.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d037      	beq.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007178:	f7fb f9ba 	bl	80024f0 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	6a3a      	ldr	r2, [r7, #32]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <UART_WaitOnFlagUntilTimeout+0x30>
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e03a      	b.n	8007208 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d023      	beq.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b80      	cmp	r3, #128	@ 0x80
 80071a4:	d020      	beq.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d01d      	beq.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d116      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f81d 	bl	8007210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2208      	movs	r2, #8
 80071da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e00f      	b.n	8007208 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	4013      	ands	r3, r2
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	429a      	cmp	r2, r3
 8007204:	d0b4      	beq.n	8007170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b095      	sub	sp, #84	@ 0x54
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800722e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007238:	643a      	str	r2, [r7, #64]	@ 0x40
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800723e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e5      	bne.n	8007218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	61fb      	str	r3, [r7, #28]
   return(result);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800726c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800726e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e5      	bne.n	800724c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007284:	2b01      	cmp	r3, #1
 8007286:	d119      	bne.n	80072bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	60bb      	str	r3, [r7, #8]
   return(result);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a8:	61ba      	str	r2, [r7, #24]
 80072aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6979      	ldr	r1, [r7, #20]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	613b      	str	r3, [r7, #16]
   return(result);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e5      	bne.n	8007288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072ca:	bf00      	nop
 80072cc:	3754      	adds	r7, #84	@ 0x54
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b0c0      	sub	sp, #256	@ 0x100
 80072de:	af00      	add	r7, sp, #0
 80072e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f4:	68d9      	ldr	r1, [r3, #12]
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	ea40 0301 	orr.w	r3, r0, r1
 8007300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	431a      	orrs	r2, r3
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007330:	f021 010c 	bic.w	r1, r1, #12
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800733e:	430b      	orrs	r3, r1
 8007340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007352:	6999      	ldr	r1, [r3, #24]
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	ea40 0301 	orr.w	r3, r0, r1
 800735e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b8f      	ldr	r3, [pc, #572]	@ (80075a4 <UART_SetConfig+0x2cc>)
 8007368:	429a      	cmp	r2, r3
 800736a:	d005      	beq.n	8007378 <UART_SetConfig+0xa0>
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b8d      	ldr	r3, [pc, #564]	@ (80075a8 <UART_SetConfig+0x2d0>)
 8007374:	429a      	cmp	r2, r3
 8007376:	d104      	bne.n	8007382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fd fda2 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 800737c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007380:	e003      	b.n	800738a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007382:	f7fd fd89 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8007386:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007394:	f040 810c 	bne.w	80075b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739c:	2200      	movs	r2, #0
 800739e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	1891      	adds	r1, r2, r2
 80073b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073b2:	415b      	adcs	r3, r3
 80073b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073ba:	4621      	mov	r1, r4
 80073bc:	eb12 0801 	adds.w	r8, r2, r1
 80073c0:	4629      	mov	r1, r5
 80073c2:	eb43 0901 	adc.w	r9, r3, r1
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073da:	4690      	mov	r8, r2
 80073dc:	4699      	mov	r9, r3
 80073de:	4623      	mov	r3, r4
 80073e0:	eb18 0303 	adds.w	r3, r8, r3
 80073e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073e8:	462b      	mov	r3, r5
 80073ea:	eb49 0303 	adc.w	r3, r9, r3
 80073ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007406:	460b      	mov	r3, r1
 8007408:	18db      	adds	r3, r3, r3
 800740a:	653b      	str	r3, [r7, #80]	@ 0x50
 800740c:	4613      	mov	r3, r2
 800740e:	eb42 0303 	adc.w	r3, r2, r3
 8007412:	657b      	str	r3, [r7, #84]	@ 0x54
 8007414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800741c:	f7f9 fca4 	bl	8000d68 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4b61      	ldr	r3, [pc, #388]	@ (80075ac <UART_SetConfig+0x2d4>)
 8007426:	fba3 2302 	umull	r2, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	011c      	lsls	r4, r3, #4
 800742e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007438:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800743c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	1891      	adds	r1, r2, r2
 8007446:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007448:	415b      	adcs	r3, r3
 800744a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007450:	4641      	mov	r1, r8
 8007452:	eb12 0a01 	adds.w	sl, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb43 0b01 	adc.w	fp, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800746c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007470:	4692      	mov	sl, r2
 8007472:	469b      	mov	fp, r3
 8007474:	4643      	mov	r3, r8
 8007476:	eb1a 0303 	adds.w	r3, sl, r3
 800747a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800747e:	464b      	mov	r3, r9
 8007480:	eb4b 0303 	adc.w	r3, fp, r3
 8007484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007494:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800749c:	460b      	mov	r3, r1
 800749e:	18db      	adds	r3, r3, r3
 80074a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074a2:	4613      	mov	r3, r2
 80074a4:	eb42 0303 	adc.w	r3, r2, r3
 80074a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074b2:	f7f9 fc59 	bl	8000d68 <__aeabi_uldivmod>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	4b3b      	ldr	r3, [pc, #236]	@ (80075ac <UART_SetConfig+0x2d4>)
 80074be:	fba3 2301 	umull	r2, r3, r3, r1
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2264      	movs	r2, #100	@ 0x64
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	1acb      	subs	r3, r1, r3
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074d2:	4b36      	ldr	r3, [pc, #216]	@ (80075ac <UART_SetConfig+0x2d4>)
 80074d4:	fba3 2302 	umull	r2, r3, r3, r2
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074e0:	441c      	add	r4, r3
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074fc:	415b      	adcs	r3, r3
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007504:	4641      	mov	r1, r8
 8007506:	1851      	adds	r1, r2, r1
 8007508:	6339      	str	r1, [r7, #48]	@ 0x30
 800750a:	4649      	mov	r1, r9
 800750c:	414b      	adcs	r3, r1
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800751c:	4659      	mov	r1, fp
 800751e:	00cb      	lsls	r3, r1, #3
 8007520:	4651      	mov	r1, sl
 8007522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007526:	4651      	mov	r1, sl
 8007528:	00ca      	lsls	r2, r1, #3
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	4603      	mov	r3, r0
 8007530:	4642      	mov	r2, r8
 8007532:	189b      	adds	r3, r3, r2
 8007534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007538:	464b      	mov	r3, r9
 800753a:	460a      	mov	r2, r1
 800753c:	eb42 0303 	adc.w	r3, r2, r3
 8007540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007550:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007558:	460b      	mov	r3, r1
 800755a:	18db      	adds	r3, r3, r3
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800755e:	4613      	mov	r3, r2
 8007560:	eb42 0303 	adc.w	r3, r2, r3
 8007564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800756a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800756e:	f7f9 fbfb 	bl	8000d68 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <UART_SetConfig+0x2d4>)
 8007578:	fba3 1302 	umull	r1, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	2164      	movs	r1, #100	@ 0x64
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	3332      	adds	r3, #50	@ 0x32
 800758a:	4a08      	ldr	r2, [pc, #32]	@ (80075ac <UART_SetConfig+0x2d4>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 0207 	and.w	r2, r3, #7
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4422      	add	r2, r4
 800759e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075a0:	e106      	b.n	80077b0 <UART_SetConfig+0x4d8>
 80075a2:	bf00      	nop
 80075a4:	40011000 	.word	0x40011000
 80075a8:	40011400 	.word	0x40011400
 80075ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	1891      	adds	r1, r2, r2
 80075c8:	6239      	str	r1, [r7, #32]
 80075ca:	415b      	adcs	r3, r3
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075d2:	4641      	mov	r1, r8
 80075d4:	1854      	adds	r4, r2, r1
 80075d6:	4649      	mov	r1, r9
 80075d8:	eb43 0501 	adc.w	r5, r3, r1
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	00eb      	lsls	r3, r5, #3
 80075e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ea:	00e2      	lsls	r2, r4, #3
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	4643      	mov	r3, r8
 80075f2:	18e3      	adds	r3, r4, r3
 80075f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075f8:	464b      	mov	r3, r9
 80075fa:	eb45 0303 	adc.w	r3, r5, r3
 80075fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800760e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800761e:	4629      	mov	r1, r5
 8007620:	008b      	lsls	r3, r1, #2
 8007622:	4621      	mov	r1, r4
 8007624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007628:	4621      	mov	r1, r4
 800762a:	008a      	lsls	r2, r1, #2
 800762c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007630:	f7f9 fb9a 	bl	8000d68 <__aeabi_uldivmod>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4b60      	ldr	r3, [pc, #384]	@ (80077bc <UART_SetConfig+0x4e4>)
 800763a:	fba3 2302 	umull	r2, r3, r3, r2
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	011c      	lsls	r4, r3, #4
 8007642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007646:	2200      	movs	r2, #0
 8007648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800764c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	1891      	adds	r1, r2, r2
 800765a:	61b9      	str	r1, [r7, #24]
 800765c:	415b      	adcs	r3, r3
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007664:	4641      	mov	r1, r8
 8007666:	1851      	adds	r1, r2, r1
 8007668:	6139      	str	r1, [r7, #16]
 800766a:	4649      	mov	r1, r9
 800766c:	414b      	adcs	r3, r1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800767c:	4659      	mov	r1, fp
 800767e:	00cb      	lsls	r3, r1, #3
 8007680:	4651      	mov	r1, sl
 8007682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007686:	4651      	mov	r1, sl
 8007688:	00ca      	lsls	r2, r1, #3
 800768a:	4610      	mov	r0, r2
 800768c:	4619      	mov	r1, r3
 800768e:	4603      	mov	r3, r0
 8007690:	4642      	mov	r2, r8
 8007692:	189b      	adds	r3, r3, r2
 8007694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007698:	464b      	mov	r3, r9
 800769a:	460a      	mov	r2, r1
 800769c:	eb42 0303 	adc.w	r3, r2, r3
 80076a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076bc:	4649      	mov	r1, r9
 80076be:	008b      	lsls	r3, r1, #2
 80076c0:	4641      	mov	r1, r8
 80076c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c6:	4641      	mov	r1, r8
 80076c8:	008a      	lsls	r2, r1, #2
 80076ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076ce:	f7f9 fb4b 	bl	8000d68 <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	4b38      	ldr	r3, [pc, #224]	@ (80077bc <UART_SetConfig+0x4e4>)
 80076da:	fba3 2301 	umull	r2, r3, r3, r1
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	2264      	movs	r2, #100	@ 0x64
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	1acb      	subs	r3, r1, r3
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	3332      	adds	r3, #50	@ 0x32
 80076ec:	4a33      	ldr	r2, [pc, #204]	@ (80077bc <UART_SetConfig+0x4e4>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076f8:	441c      	add	r4, r3
 80076fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fe:	2200      	movs	r2, #0
 8007700:	673b      	str	r3, [r7, #112]	@ 0x70
 8007702:	677a      	str	r2, [r7, #116]	@ 0x74
 8007704:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	415b      	adcs	r3, r3
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800774a:	464b      	mov	r3, r9
 800774c:	460a      	mov	r2, r1
 800774e:	eb42 0303 	adc.w	r3, r2, r3
 8007752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	663b      	str	r3, [r7, #96]	@ 0x60
 800775e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800776c:	4649      	mov	r1, r9
 800776e:	008b      	lsls	r3, r1, #2
 8007770:	4641      	mov	r1, r8
 8007772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007776:	4641      	mov	r1, r8
 8007778:	008a      	lsls	r2, r1, #2
 800777a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800777e:	f7f9 faf3 	bl	8000d68 <__aeabi_uldivmod>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <UART_SetConfig+0x4e4>)
 8007788:	fba3 1302 	umull	r1, r3, r3, r2
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	2164      	movs	r1, #100	@ 0x64
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	3332      	adds	r3, #50	@ 0x32
 800779a:	4a08      	ldr	r2, [pc, #32]	@ (80077bc <UART_SetConfig+0x4e4>)
 800779c:	fba2 2303 	umull	r2, r3, r2, r3
 80077a0:	095b      	lsrs	r3, r3, #5
 80077a2:	f003 020f 	and.w	r2, r3, #15
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4422      	add	r2, r4
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077b6:	46bd      	mov	sp, r7
 80077b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077bc:	51eb851f 	.word	0x51eb851f

080077c0 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params)
 {
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2203      	movs	r2, #3
 80077cc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2203      	movs	r2, #3
 80077d8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2203      	movs	r2, #3
 80077de:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2203      	movs	r2, #3
 80077e4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2203      	movs	r2, #3
 80077ea:	715a      	strb	r2, [r3, #5]
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
 {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	460b      	mov	r3, r1
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	b29a      	uxth	r2, r3
 8007816:	8af9      	ldrh	r1, [r7, #22]
 8007818:	f241 3388 	movw	r3, #5000	@ 0x1388
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	2302      	movs	r3, #2
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	f107 0314 	add.w	r3, r7, #20
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2301      	movs	r3, #1
 800782a:	f7fc faad 	bl	8003d88 <HAL_I2C_Mem_Read>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10b      	bne.n	800784c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8007834:	7d7b      	ldrb	r3, [r7, #21]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	b21a      	sxth	r2, r3
 800783a:	7d3b      	ldrb	r3, [r7, #20]
 800783c:	b21b      	sxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b21b      	sxth	r3, r3
 8007842:	b29a      	uxth	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	801a      	strh	r2, [r3, #0]
		return true;
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <read_register16+0x56>
	} else
		return false;
 800784c:	2300      	movs	r3, #0

}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) 
		{
 8007856:	b590      	push	{r4, r7, lr}
 8007858:	b08b      	sub	sp, #44	@ 0x2c
 800785a:	af04      	add	r7, sp, #16
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	461a      	mov	r2, r3
 8007862:	460b      	mov	r3, r1
 8007864:	72fb      	strb	r3, [r7, #11]
 8007866:	4613      	mov	r3, r2
 8007868:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	b29a      	uxth	r2, r3
 800787a:	7abb      	ldrb	r3, [r7, #10]
 800787c:	b29b      	uxth	r3, r3
 800787e:	8af9      	ldrh	r1, [r7, #22]
 8007880:	f241 3488 	movw	r4, #5000	@ 0x1388
 8007884:	9402      	str	r4, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2301      	movs	r3, #1
 800788e:	f7fc fa7b 	bl	8003d88 <HAL_I2C_Mem_Read>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <read_data+0x46>
		return 0;
 8007898:	2300      	movs	r3, #0
 800789a:	e000      	b.n	800789e <read_data+0x48>
	else
		return 1;
 800789c:	2301      	movs	r3, #1

}
 800789e:	4618      	mov	r0, r3
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd90      	pop	{r4, r7, pc}

080078a6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) 
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	461a      	mov	r2, r3
 80078b2:	2188      	movs	r1, #136	@ 0x88
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ff9f 	bl	80077f8 <read_register16>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d06f      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3302      	adds	r3, #2
 80078c4:	461a      	mov	r2, r3
 80078c6:	218a      	movs	r1, #138	@ 0x8a
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff ff95 	bl	80077f8 <read_register16>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d065      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	461a      	mov	r2, r3
 80078da:	218c      	movs	r1, #140	@ 0x8c
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff8b 	bl	80077f8 <read_register16>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d05b      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, (uint16_t *)&dev->dig_P1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3306      	adds	r3, #6
 80078ec:	461a      	mov	r2, r3
 80078ee:	218e      	movs	r1, #142	@ 0x8e
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff81 	bl	80077f8 <read_register16>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d051      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3308      	adds	r3, #8
 8007900:	461a      	mov	r2, r3
 8007902:	2190      	movs	r1, #144	@ 0x90
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff ff77 	bl	80077f8 <read_register16>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d047      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	330a      	adds	r3, #10
 8007914:	461a      	mov	r2, r3
 8007916:	2192      	movs	r1, #146	@ 0x92
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ff6d 	bl	80077f8 <read_register16>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d03d      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	330c      	adds	r3, #12
 8007928:	461a      	mov	r2, r3
 800792a:	2194      	movs	r1, #148	@ 0x94
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff63 	bl	80077f8 <read_register16>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d033      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	330e      	adds	r3, #14
 800793c:	461a      	mov	r2, r3
 800793e:	2196      	movs	r1, #150	@ 0x96
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff59 	bl	80077f8 <read_register16>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d029      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3310      	adds	r3, #16
 8007950:	461a      	mov	r2, r3
 8007952:	2198      	movs	r1, #152	@ 0x98
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ff4f 	bl	80077f8 <read_register16>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01f      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3312      	adds	r3, #18
 8007964:	461a      	mov	r2, r3
 8007966:	219a      	movs	r1, #154	@ 0x9a
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff45 	bl	80077f8 <read_register16>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d015      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3314      	adds	r3, #20
 8007978:	461a      	mov	r2, r3
 800797a:	219c      	movs	r1, #156	@ 0x9c
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff3b 	bl	80077f8 <read_register16>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) 
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3316      	adds	r3, #22
 800798c:	461a      	mov	r2, r3
 800798e:	219e      	movs	r1, #158	@ 0x9e
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ff31 	bl	80077f8 <read_register16>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <read_calibration_data+0xfa>
	{

		return true;
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <read_calibration_data+0xfc>
	}

	return false;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) 
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f103 0218 	add.w	r2, r3, #24
 80079b8:	2301      	movs	r3, #1
 80079ba:	21a1      	movs	r1, #161	@ 0xa1
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff4a 	bl	8007856 <read_data>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d14b      	bne.n	8007a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	331a      	adds	r3, #26
 80079cc:	461a      	mov	r2, r3
 80079ce:	21e1      	movs	r1, #225	@ 0xe1
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff11 	bl	80077f8 <read_register16>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d041      	beq.n	8007a60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f103 021c 	add.w	r2, r3, #28
 80079e2:	2301      	movs	r3, #1
 80079e4:	21e3      	movs	r1, #227	@ 0xe3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff ff35 	bl	8007856 <read_data>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d136      	bne.n	8007a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80079f2:	f107 030e 	add.w	r3, r7, #14
 80079f6:	461a      	mov	r2, r3
 80079f8:	21e4      	movs	r1, #228	@ 0xe4
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fefc 	bl	80077f8 <read_register16>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02c      	beq.n	8007a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	21e5      	movs	r1, #229	@ 0xe5
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fef2 	bl	80077f8 <read_register16>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d022      	beq.n	8007a60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8007a20:	2301      	movs	r3, #1
 8007a22:	21e7      	movs	r1, #231	@ 0xe7
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ff16 	bl	8007856 <read_data>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d117      	bne.n	8007a60 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8007a30:	89fb      	ldrh	r3, [r7, #14]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	b21b      	sxth	r3, r3
 8007a36:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8007a3a:	b21a      	sxth	r2, r3
 8007a3c:	89fb      	ldrh	r3, [r7, #14]
 8007a3e:	121b      	asrs	r3, r3, #8
 8007a40:	b21b      	sxth	r3, r3
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	b21b      	sxth	r3, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	b21a      	sxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8007a50:	89bb      	ldrh	r3, [r7, #12]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b21a      	sxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	841a      	strh	r2, [r3, #32]

		return true;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <read_hum_calibration_data+0xb8>
	}

	return false;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af04      	add	r7, sp, #16
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
 8007a76:	4613      	mov	r3, r2
 8007a78:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	89f9      	ldrh	r1, [r7, #14]
 8007a8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	2301      	movs	r3, #1
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	1cbb      	adds	r3, r7, #2
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f7fc f87a 	bl	8003b94 <HAL_I2C_Mem_Write>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <write_register8+0x40>
		return false;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e000      	b.n	8007aac <write_register8+0x42>
	else
		return true;
 8007aaa:	2301      	movs	r3, #1
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ac2:	2b76      	cmp	r3, #118	@ 0x76
 8007ac4:	d005      	beq.n	8007ad2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007aca:	2b77      	cmp	r3, #119	@ 0x77
 8007acc:	d001      	beq.n	8007ad2 <bmp280_init+0x1e>

		return false;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e099      	b.n	8007c06 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ad8:	2301      	movs	r3, #1
 8007ada:	21d0      	movs	r1, #208	@ 0xd0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff feba 	bl	8007856 <read_data>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <bmp280_init+0x38>
		return false;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e08c      	b.n	8007c06 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007af2:	2b58      	cmp	r3, #88	@ 0x58
 8007af4:	d006      	beq.n	8007b04 <bmp280_init+0x50>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007afc:	2b60      	cmp	r3, #96	@ 0x60
 8007afe:	d001      	beq.n	8007b04 <bmp280_init+0x50>

		return false;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e080      	b.n	8007c06 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8007b04:	22b6      	movs	r2, #182	@ 0xb6
 8007b06:	21e0      	movs	r1, #224	@ 0xe0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ffae 	bl	8007a6a <write_register8>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <bmp280_init+0x64>
		return false;
 8007b14:	2300      	movs	r3, #0
 8007b16:	e076      	b.n	8007c06 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8007b18:	f107 020c 	add.w	r2, r7, #12
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	21f3      	movs	r1, #243	@ 0xf3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fe98 	bl	8007856 <read_data>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f5      	bne.n	8007b18 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8007b2c:	7b3b      	ldrb	r3, [r7, #12]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1f0      	bne.n	8007b18 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff feb5 	bl	80078a6 <read_calibration_data>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f083 0301 	eor.w	r3, r3, #1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d100      	bne.n	8007b4a <bmp280_init+0x96>
 8007b48:	e001      	b.n	8007b4e <bmp280_init+0x9a>
		return false;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e05b      	b.n	8007c06 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007b54:	2b60      	cmp	r3, #96	@ 0x60
 8007b56:	d10a      	bne.n	8007b6e <bmp280_init+0xba>
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff ff26 	bl	80079aa <read_hum_calibration_data>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f083 0301 	eor.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <bmp280_init+0xba>
		return false;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e04b      	b.n	8007c06 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	795b      	ldrb	r3, [r3, #5]
 8007b72:	015b      	lsls	r3, r3, #5
 8007b74:	b25a      	sxtb	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b25b      	sxtb	r3, r3
 8007b82:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	461a      	mov	r2, r3
 8007b88:	21f5      	movs	r1, #245	@ 0xf5
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff ff6d 	bl	8007a6a <write_register8>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <bmp280_init+0xe6>
		return false;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e035      	b.n	8007c06 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d102      	bne.n	8007ba8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8007bae:	b25a      	sxtb	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	b25b      	sxtb	r3, r3
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	b25a      	sxtb	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8007bc6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007bce:	2b60      	cmp	r3, #96	@ 0x60
 8007bd0:	d10d      	bne.n	8007bee <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	791b      	ldrb	r3, [r3, #4]
 8007bd6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8007bd8:	7b7b      	ldrb	r3, [r7, #13]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	21f2      	movs	r1, #242	@ 0xf2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff ff43 	bl	8007a6a <write_register8>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <bmp280_init+0x13a>
			return false;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e00b      	b.n	8007c06 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	21f4      	movs	r1, #244	@ 0xf4
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff ff38 	bl	8007a6a <write_register8>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <bmp280_init+0x150>
		return false;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e000      	b.n	8007c06 <bmp280_init+0x152>
	}

	return true;
 8007c04:	2301      	movs	r3, #1
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8007c0e:	b480      	push	{r7}
 8007c10:	b087      	sub	sp, #28
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	10da      	asrs	r2, r3, #3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8007c30:	12db      	asrs	r3, r3, #11
 8007c32:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	111b      	asrs	r3, r3, #4
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	1112      	asrs	r2, r2, #4
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	8809      	ldrh	r1, [r1, #0]
 8007c46:	1a52      	subs	r2, r2, r1
 8007c48:	fb02 f303 	mul.w	r3, r2, r3
 8007c4c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8007c58:	139b      	asrs	r3, r3, #14
 8007c5a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	3380      	adds	r3, #128	@ 0x80
 8007c72:	121b      	asrs	r3, r3, #8
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8007c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c84:	b0cc      	sub	sp, #304	@ 0x130
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8007c8c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8007c90:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	 int64_t var1, var2, p;

	    // Calculate var1 and var2 based on fine_temp and device calibration parameters
	    var1 = (int64_t)fine_temp - 128000;
 8007c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c98:	17da      	asrs	r2, r3, #31
 8007c9a:	461c      	mov	r4, r3
 8007c9c:	4615      	mov	r5, r2
 8007c9e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8007ca2:	f145 3bff 	adc.w	fp, r5, #4294967295
 8007ca6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	    var2 = var1 * var1 * (int64_t)dev->dig_P6;
 8007caa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cb2:	fb03 f102 	mul.w	r1, r3, r2
 8007cb6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	18ca      	adds	r2, r1, r3
 8007cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cc8:	fba3 8903 	umull	r8, r9, r3, r3
 8007ccc:	eb02 0309 	add.w	r3, r2, r9
 8007cd0:	4699      	mov	r9, r3
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	17da      	asrs	r2, r3, #31
 8007cde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ce2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ce6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007cea:	4603      	mov	r3, r0
 8007cec:	fb03 f209 	mul.w	r2, r3, r9
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	fb08 f303 	mul.w	r3, r8, r3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	fba8 1202 	umull	r1, r2, r8, r2
 8007cfe:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d02:	460a      	mov	r2, r1
 8007d04:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8007d08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d12:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8007d16:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8007d1a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007d26:	b21b      	sxth	r3, r3
 8007d28:	17da      	asrs	r2, r3, #31
 8007d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d2e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d36:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	fb02 f203 	mul.w	r2, r2, r3
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d44:	4621      	mov	r1, r4
 8007d46:	fb01 f303 	mul.w	r3, r1, r3
 8007d4a:	441a      	add	r2, r3
 8007d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d50:	4621      	mov	r1, r4
 8007d52:	fba3 1301 	umull	r1, r3, r3, r1
 8007d56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	18d3      	adds	r3, r2, r3
 8007d66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d6a:	f04f 0000 	mov.w	r0, #0
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8007d76:	462b      	mov	r3, r5
 8007d78:	0459      	lsls	r1, r3, #17
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8007d80:	4623      	mov	r3, r4
 8007d82:	0458      	lsls	r0, r3, #17
 8007d84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007d88:	1814      	adds	r4, r2, r0
 8007d8a:	643c      	str	r4, [r7, #64]	@ 0x40
 8007d8c:	414b      	adcs	r3, r1
 8007d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d90:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8007d94:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	17da      	asrs	r2, r3, #31
 8007da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007da8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007dac:	f04f 0000 	mov.w	r0, #0
 8007db0:	f04f 0100 	mov.w	r1, #0
 8007db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db8:	00d9      	lsls	r1, r3, #3
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007dc0:	1814      	adds	r4, r2, r0
 8007dc2:	63bc      	str	r4, [r7, #56]	@ 0x38
 8007dc4:	414b      	adcs	r3, r1
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8007dcc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) +
 8007dd0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dd8:	fb03 f102 	mul.w	r1, r3, r2
 8007ddc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007de4:	fb02 f303 	mul.w	r3, r2, r3
 8007de8:	18ca      	adds	r2, r1, r3
 8007dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dee:	fba3 1303 	umull	r1, r3, r3, r3
 8007df2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007df6:	460b      	mov	r3, r1
 8007df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e00:	18d3      	adds	r3, r2, r3
 8007e02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007e0e:	b21b      	sxth	r3, r3
 8007e10:	17da      	asrs	r2, r3, #31
 8007e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e1a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8007e1e:	462b      	mov	r3, r5
 8007e20:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e24:	4642      	mov	r2, r8
 8007e26:	fb02 f203 	mul.w	r2, r2, r3
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	4413      	add	r3, r2
 8007e34:	4622      	mov	r2, r4
 8007e36:	4641      	mov	r1, r8
 8007e38:	fba2 1201 	umull	r1, r2, r2, r1
 8007e3c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007e40:	460a      	mov	r2, r1
 8007e42:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8007e46:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e50:	f04f 0000 	mov.w	r0, #0
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	0a18      	lsrs	r0, r3, #8
 8007e60:	462b      	mov	r3, r5
 8007e62:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8007e66:	462b      	mov	r3, r5
 8007e68:	1219      	asrs	r1, r3, #8
	           ((var1 * (int64_t)dev->dig_P2) << 12);
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	17da      	asrs	r2, r3, #31
 8007e76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e7a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e82:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8007e86:	464a      	mov	r2, r9
 8007e88:	fb02 f203 	mul.w	r2, r2, r3
 8007e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e90:	4644      	mov	r4, r8
 8007e92:	fb04 f303 	mul.w	r3, r4, r3
 8007e96:	441a      	add	r2, r3
 8007e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e9c:	4644      	mov	r4, r8
 8007e9e:	fba3 4304 	umull	r4, r3, r3, r4
 8007ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007eac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007eb0:	18d3      	adds	r3, r2, r3
 8007eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	f04f 0300 	mov.w	r3, #0
 8007ebe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8007ec2:	464c      	mov	r4, r9
 8007ec4:	0323      	lsls	r3, r4, #12
 8007ec6:	4644      	mov	r4, r8
 8007ec8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8007ecc:	4644      	mov	r4, r8
 8007ece:	0322      	lsls	r2, r4, #12
	    var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) +
 8007ed0:	1884      	adds	r4, r0, r2
 8007ed2:	633c      	str	r4, [r7, #48]	@ 0x30
 8007ed4:	eb41 0303 	adc.w	r3, r1, r3
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8007ede:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	    var1 = (((int64_t)1 << 47) + var1) * ((int64_t)dev->dig_P1) >> 33;
 8007ee2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007ee6:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8007eea:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8007eee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f08:	462b      	mov	r3, r5
 8007f0a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f0e:	4642      	mov	r2, r8
 8007f10:	fb02 f203 	mul.w	r2, r2, r3
 8007f14:	464b      	mov	r3, r9
 8007f16:	4621      	mov	r1, r4
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4641      	mov	r1, r8
 8007f22:	fba2 1201 	umull	r1, r2, r2, r1
 8007f26:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8007f30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f34:	4413      	add	r3, r2
 8007f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8007f46:	4629      	mov	r1, r5
 8007f48:	104a      	asrs	r2, r1, #1
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	17cb      	asrs	r3, r1, #31
 8007f4e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	    // Check for division by zero
	    if (var1 == 0) {
 8007f52:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007f56:	4313      	orrs	r3, r2
 8007f58:	d101      	bne.n	8007f5e <compensate_pressure+0x2de>
	        return 0.0f; // Avoid division by zero
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e148      	b.n	80081f0 <compensate_pressure+0x570>
	    }

	    // Calculate pressure
	    p = 1048576 - adc_press;
 8007f5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007f62:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8007f66:	17da      	asrs	r2, r3, #31
 8007f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007f70:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	    p = (((p << 31) - var2) * 3125) / var1;
 8007f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f78:	105b      	asrs	r3, r3, #1
 8007f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f82:	07db      	lsls	r3, r3, #31
 8007f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f88:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007f8c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8007f90:	4621      	mov	r1, r4
 8007f92:	1a89      	subs	r1, r1, r2
 8007f94:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007f96:	4629      	mov	r1, r5
 8007f98:	eb61 0303 	sbc.w	r3, r1, r3
 8007f9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	1891      	adds	r1, r2, r2
 8007fa8:	6239      	str	r1, [r7, #32]
 8007faa:	415b      	adcs	r3, r3
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	1851      	adds	r1, r2, r1
 8007fb6:	61b9      	str	r1, [r7, #24]
 8007fb8:	4629      	mov	r1, r5
 8007fba:	414b      	adcs	r3, r1
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007fca:	4649      	mov	r1, r9
 8007fcc:	018b      	lsls	r3, r1, #6
 8007fce:	4641      	mov	r1, r8
 8007fd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	018a      	lsls	r2, r1, #6
 8007fd8:	4641      	mov	r1, r8
 8007fda:	1889      	adds	r1, r1, r2
 8007fdc:	6139      	str	r1, [r7, #16]
 8007fde:	4649      	mov	r1, r9
 8007fe0:	eb43 0101 	adc.w	r1, r3, r1
 8007fe4:	6179      	str	r1, [r7, #20]
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	008b      	lsls	r3, r1, #2
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	008a      	lsls	r2, r1, #2
 8008000:	4610      	mov	r0, r2
 8008002:	4619      	mov	r1, r3
 8008004:	4603      	mov	r3, r0
 8008006:	4622      	mov	r2, r4
 8008008:	189b      	adds	r3, r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	460b      	mov	r3, r1
 800800e:	462a      	mov	r2, r5
 8008010:	eb42 0303 	adc.w	r3, r2, r3
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8008022:	4649      	mov	r1, r9
 8008024:	008b      	lsls	r3, r1, #2
 8008026:	4641      	mov	r1, r8
 8008028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800802c:	4641      	mov	r1, r8
 800802e:	008a      	lsls	r2, r1, #2
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	4603      	mov	r3, r0
 8008036:	4622      	mov	r2, r4
 8008038:	189b      	adds	r3, r3, r2
 800803a:	673b      	str	r3, [r7, #112]	@ 0x70
 800803c:	462b      	mov	r3, r5
 800803e:	460a      	mov	r2, r1
 8008040:	eb42 0303 	adc.w	r3, r2, r3
 8008044:	677b      	str	r3, [r7, #116]	@ 0x74
 8008046:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800804a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800804e:	f7f8 fe3b 	bl	8000cc8 <__aeabi_ldivmod>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	    // Further refine pressure using calibration parameters
	    var1 = ((int64_t)dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008062:	b21b      	sxth	r3, r3
 8008064:	17da      	asrs	r2, r3, #31
 8008066:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008068:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800806a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800806e:	f04f 0000 	mov.w	r0, #0
 8008072:	f04f 0100 	mov.w	r1, #0
 8008076:	0b50      	lsrs	r0, r2, #13
 8008078:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800807c:	1359      	asrs	r1, r3, #13
 800807e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8008082:	462b      	mov	r3, r5
 8008084:	fb00 f203 	mul.w	r2, r0, r3
 8008088:	4623      	mov	r3, r4
 800808a:	fb03 f301 	mul.w	r3, r3, r1
 800808e:	4413      	add	r3, r2
 8008090:	4622      	mov	r2, r4
 8008092:	fba2 1200 	umull	r1, r2, r2, r0
 8008096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800809a:	460a      	mov	r2, r1
 800809c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80080a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80080ae:	f04f 0000 	mov.w	r0, #0
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	0b50      	lsrs	r0, r2, #13
 80080b8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80080bc:	1359      	asrs	r1, r3, #13
 80080be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80080c2:	462b      	mov	r3, r5
 80080c4:	fb00 f203 	mul.w	r2, r0, r3
 80080c8:	4623      	mov	r3, r4
 80080ca:	fb03 f301 	mul.w	r3, r3, r1
 80080ce:	4413      	add	r3, r2
 80080d0:	4622      	mov	r2, r4
 80080d2:	fba2 1200 	umull	r1, r2, r2, r0
 80080d6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080da:	460a      	mov	r2, r1
 80080dc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80080e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80080e4:	4413      	add	r3, r2
 80080e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80080f6:	4621      	mov	r1, r4
 80080f8:	0e4a      	lsrs	r2, r1, #25
 80080fa:	4629      	mov	r1, r5
 80080fc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008100:	4629      	mov	r1, r5
 8008102:	164b      	asrs	r3, r1, #25
 8008104:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	    var2 = ((int64_t)dev->dig_P8 * p) >> 19;
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008110:	b21b      	sxth	r3, r3
 8008112:	17da      	asrs	r2, r3, #31
 8008114:	663b      	str	r3, [r7, #96]	@ 0x60
 8008116:	667a      	str	r2, [r7, #100]	@ 0x64
 8008118:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800811c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008120:	462a      	mov	r2, r5
 8008122:	fb02 f203 	mul.w	r2, r2, r3
 8008126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800812a:	4621      	mov	r1, r4
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008136:	4621      	mov	r1, r4
 8008138:	fba2 1201 	umull	r1, r2, r2, r1
 800813c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008140:	460a      	mov	r2, r1
 8008142:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8008146:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800815c:	4621      	mov	r1, r4
 800815e:	0cca      	lsrs	r2, r1, #19
 8008160:	4629      	mov	r1, r5
 8008162:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8008166:	4629      	mov	r1, r5
 8008168:	14cb      	asrs	r3, r1, #19
 800816a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	    p = ((p + var1 + var2) >> 8) + ((int64_t)dev->dig_P7 << 4);
 800816e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8008172:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008176:	1884      	adds	r4, r0, r2
 8008178:	65bc      	str	r4, [r7, #88]	@ 0x58
 800817a:	eb41 0303 	adc.w	r3, r1, r3
 800817e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008180:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008184:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008188:	4621      	mov	r1, r4
 800818a:	1889      	adds	r1, r1, r2
 800818c:	6539      	str	r1, [r7, #80]	@ 0x50
 800818e:	4629      	mov	r1, r5
 8008190:	eb43 0101 	adc.w	r1, r3, r1
 8008194:	6579      	str	r1, [r7, #84]	@ 0x54
 8008196:	f04f 0000 	mov.w	r0, #0
 800819a:	f04f 0100 	mov.w	r1, #0
 800819e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80081a2:	4623      	mov	r3, r4
 80081a4:	0a18      	lsrs	r0, r3, #8
 80081a6:	462b      	mov	r3, r5
 80081a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80081ac:	462b      	mov	r3, r5
 80081ae:	1219      	asrs	r1, r3, #8
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80081b8:	b21b      	sxth	r3, r3
 80081ba:	17da      	asrs	r2, r3, #31
 80081bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80081cc:	464c      	mov	r4, r9
 80081ce:	0123      	lsls	r3, r4, #4
 80081d0:	4644      	mov	r4, r8
 80081d2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80081d6:	4644      	mov	r4, r8
 80081d8:	0122      	lsls	r2, r4, #4
 80081da:	1884      	adds	r4, r0, r2
 80081dc:	603c      	str	r4, [r7, #0]
 80081de:	eb41 0303 	adc.w	r3, r1, r3
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80081e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

	return p;
 80081ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080081fc <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800820e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	039a      	lsls	r2, r3, #14
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800821a:	051b      	lsls	r3, r3, #20
 800821c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008224:	4619      	mov	r1, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008232:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800823a:	4611      	mov	r1, r2
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	fb01 f202 	mul.w	r2, r1, r2
 8008242:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	7f09      	ldrb	r1, [r1, #28]
 8008248:	4608      	mov	r0, r1
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	fb00 f101 	mul.w	r1, r0, r1
 8008250:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8008252:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8008256:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800825a:	1292      	asrs	r2, r2, #10
 800825c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8008266:	fb01 f202 	mul.w	r2, r1, r2
 800826a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800826e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	13db      	asrs	r3, r3, #15
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	13d2      	asrs	r2, r2, #15
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	7e12      	ldrb	r2, [r2, #24]
 8008288:	fb02 f303 	mul.w	r3, r2, r3
 800828c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800829a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80082a2:	bfa8      	it	ge
 80082a4:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80082a8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	131b      	asrs	r3, r3, #12
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b08c      	sub	sp, #48	@ 0x30
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80082ce:	2b60      	cmp	r3, #96	@ 0x60
 80082d0:	d007      	beq.n	80082e2 <bmp280_read_fixed+0x28>
		if (humidity)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <bmp280_read_fixed+0x24>
			*humidity = 0;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <bmp280_read_fixed+0x32>
 80082e8:	2308      	movs	r3, #8
 80082ea:	e000      	b.n	80082ee <bmp280_read_fixed+0x34>
 80082ec:	2306      	movs	r3, #6
 80082ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f107 0218 	add.w	r2, r7, #24
 80082f8:	21f7      	movs	r1, #247	@ 0xf7
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff faab 	bl	8007856 <read_data>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <bmp280_read_fixed+0x50>
		return false;
 8008306:	2300      	movs	r3, #0
 8008308:	e038      	b.n	800837c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800830a:	7e3b      	ldrb	r3, [r7, #24]
 800830c:	031a      	lsls	r2, r3, #12
 800830e:	7e7b      	ldrb	r3, [r7, #25]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	4313      	orrs	r3, r2
 8008314:	7eba      	ldrb	r2, [r7, #26]
 8008316:	0912      	lsrs	r2, r2, #4
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	4313      	orrs	r3, r2
 800831c:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800831e:	7efb      	ldrb	r3, [r7, #27]
 8008320:	031a      	lsls	r2, r3, #12
 8008322:	7f3b      	ldrb	r3, [r7, #28]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	4313      	orrs	r3, r2
 8008328:	7f7a      	ldrb	r2, [r7, #29]
 800832a:	0912      	lsrs	r2, r2, #4
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	4313      	orrs	r3, r2
 8008330:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8008332:	f107 0314 	add.w	r3, r7, #20
 8008336:	461a      	mov	r2, r3
 8008338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fc67 	bl	8007c0e <compensate_temperature>
 8008340:	4602      	mov	r2, r0
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	461a      	mov	r2, r3
 800834a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fc97 	bl	8007c80 <compensate_pressure>
 8008352:	4602      	mov	r2, r0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800835e:	7fbb      	ldrb	r3, [r7, #30]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	7ffa      	ldrb	r2, [r7, #31]
 8008364:	4313      	orrs	r3, r2
 8008366:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	461a      	mov	r2, r3
 800836c:	6a39      	ldr	r1, [r7, #32]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff ff44 	bl	80081fc <compensate_humidity>
 8008374:	4602      	mov	r2, r0
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	601a      	str	r2, [r3, #0]
	}

	return true;
 800837a:	2301      	movs	r3, #1
}
 800837c:	4618      	mov	r0, r3
 800837e:	3730      	adds	r7, #48	@ 0x30
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity , float *altitude) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,&fixed_humidity)) {
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	f107 0218 	add.w	r2, r7, #24
 800839a:	f107 011c 	add.w	r1, r7, #28
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff ff8b 	bl	80082ba <bmp280_read_fixed>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d043      	beq.n	8008432 <bmp280_read_float+0xae>
		*temperature = (float) fixed_temperature / 100;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083b4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800843c <bmp280_read_float+0xb8>
 80083b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	edc3 7a00 	vstr	s15, [r3]
        *pressure = (float) (fixed_pressure / 25600.0f) / 1013.25;  // Convertendo de hPa para atm
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083cc:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8008440 <bmp280_read_float+0xbc>
 80083d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083d4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8008444 <bmp280_read_float+0xc0>
 80083d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	edc3 7a00 	vstr	s15, [r3]
		*humidity = (float) fixed_humidity;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	edc3 7a00 	vstr	s15, [r3]
	    *altitude = 44330.0f * (1.0f - powf((float) (fixed_pressure / 25600.0f) / 1013.25 , 1.0f / 5.255f));
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	ee07 3a90 	vmov	s15, r3
 80083f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083fc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8008440 <bmp280_read_float+0xbc>
 8008400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008404:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8008444 <bmp280_read_float+0xc0>
 8008408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800840c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8008448 <bmp280_read_float+0xc4>
 8008410:	eeb0 0a47 	vmov.f32	s0, s14
 8008414:	f005 fbb4 	bl	800db80 <powf>
 8008418:	eef0 7a40 	vmov.f32	s15, s0
 800841c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008424:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800844c <bmp280_read_float+0xc8>
 8008428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	edc3 7a00 	vstr	s15, [r3]

	}

	return true;
 8008432:	2301      	movs	r3, #1
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	42c80000 	.word	0x42c80000
 8008440:	46c80000 	.word	0x46c80000
 8008444:	447d5000 	.word	0x447d5000
 8008448:	3e42dcae 	.word	0x3e42dcae
 800844c:	472d2a00 	.word	0x472d2a00

08008450 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af04      	add	r7, sp, #16
 8008456:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8008458:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800845c:	9302      	str	r3, [sp, #8]
 800845e:	2301      	movs	r3, #1
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	f107 030f 	add.w	r3, r7, #15
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	2301      	movs	r3, #1
 800846a:	2275      	movs	r2, #117	@ 0x75
 800846c:	21d0      	movs	r1, #208	@ 0xd0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fb fc8a 	bl	8003d88 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	2b68      	cmp	r3, #104	@ 0x68
 8008478:	d141      	bne.n	80084fe <MPU6050_Init+0xae>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800847e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008482:	9302      	str	r3, [sp, #8]
 8008484:	2301      	movs	r3, #1
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	f107 030e 	add.w	r3, r7, #14
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2301      	movs	r3, #1
 8008490:	226b      	movs	r2, #107	@ 0x6b
 8008492:	21d0      	movs	r1, #208	@ 0xd0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7fb fb7d 	bl	8003b94 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800849a:	2307      	movs	r3, #7
 800849c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800849e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	2301      	movs	r3, #1
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	f107 030e 	add.w	r3, r7, #14
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2301      	movs	r3, #1
 80084b0:	2219      	movs	r2, #25
 80084b2:	21d0      	movs	r1, #208	@ 0xd0
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fb fb6d 	bl	8003b94 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80084be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084c2:	9302      	str	r3, [sp, #8]
 80084c4:	2301      	movs	r3, #1
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	f107 030e 	add.w	r3, r7, #14
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	2301      	movs	r3, #1
 80084d0:	221c      	movs	r2, #28
 80084d2:	21d0      	movs	r1, #208	@ 0xd0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7fb fb5d 	bl	8003b94 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80084da:	2300      	movs	r3, #0
 80084dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80084de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	2301      	movs	r3, #1
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	f107 030e 	add.w	r3, r7, #14
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	2301      	movs	r3, #1
 80084f0:	221b      	movs	r2, #27
 80084f2:	21d0      	movs	r1, #208	@ 0xd0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fb fb4d 	bl	8003b94 <HAL_I2C_Mem_Write>
        return 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <MPU6050_Init+0xb0>
    }
    return 1;
 80084fe:	2301      	movs	r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *hi2c, MPU6050_t *DataStruct)
{
 8008508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800850c:	b094      	sub	sp, #80	@ 0x50
 800850e:	af04      	add	r7, sp, #16
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8008514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008518:	9302      	str	r3, [sp, #8]
 800851a:	230e      	movs	r3, #14
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	2301      	movs	r3, #1
 8008526:	223b      	movs	r2, #59	@ 0x3b
 8008528:	21d0      	movs	r1, #208	@ 0xd0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fb fc2c 	bl	8003d88 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8008530:	7a3b      	ldrb	r3, [r7, #8]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	b21a      	sxth	r2, r3
 8008536:	7a7b      	ldrb	r3, [r7, #9]
 8008538:	b21b      	sxth	r3, r3
 800853a:	4313      	orrs	r3, r2
 800853c:	b21a      	sxth	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8008542:	7abb      	ldrb	r3, [r7, #10]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b21a      	sxth	r2, r3
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	b21b      	sxth	r3, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	b21a      	sxth	r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8008554:	7b3b      	ldrb	r3, [r7, #12]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	b21a      	sxth	r2, r3
 800855a:	7b7b      	ldrb	r3, [r7, #13]
 800855c:	b21b      	sxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b21a      	sxth	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	b21a      	sxth	r2, r3
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	b21b      	sxth	r3, r3
 8008570:	4313      	orrs	r3, r2
 8008572:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8008574:	7c3b      	ldrb	r3, [r7, #16]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b21a      	sxth	r2, r3
 800857a:	7c7b      	ldrb	r3, [r7, #17]
 800857c:	b21b      	sxth	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b21a      	sxth	r2, r3
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8008586:	7cbb      	ldrb	r3, [r7, #18]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b21a      	sxth	r2, r3
 800858c:	7cfb      	ldrb	r3, [r7, #19]
 800858e:	b21b      	sxth	r3, r3
 8008590:	4313      	orrs	r3, r2
 8008592:	b21a      	sxth	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8008598:	7d3b      	ldrb	r3, [r7, #20]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	b21a      	sxth	r2, r3
 800859e:	7d7b      	ldrb	r3, [r7, #21]
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	b21a      	sxth	r2, r3
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f7 ffd7 	bl	8000564 <__aeabi_i2d>
 80085b6:	f04f 0200 	mov.w	r2, #0
 80085ba:	4bbd      	ldr	r3, [pc, #756]	@ (80088b0 <MPU6050_Read_All+0x3a8>)
 80085bc:	f7f8 f966 	bl	800088c <__aeabi_ddiv>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7f7 ffc7 	bl	8000564 <__aeabi_i2d>
 80085d6:	f04f 0200 	mov.w	r2, #0
 80085da:	4bb5      	ldr	r3, [pc, #724]	@ (80088b0 <MPU6050_Read_All+0x3a8>)
 80085dc:	f7f8 f956 	bl	800088c <__aeabi_ddiv>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f7 ffb7 	bl	8000564 <__aeabi_i2d>
 80085f6:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008898 <MPU6050_Read_All+0x390>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f8 f946 	bl	800088c <__aeabi_ddiv>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800860a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008616:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80088b4 <MPU6050_Read_All+0x3ac>
 800861a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800861e:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80088b8 <MPU6050_Read_All+0x3b0>
 8008622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008632:	4618      	mov	r0, r3
 8008634:	f7f7 ff96 	bl	8000564 <__aeabi_i2d>
 8008638:	a399      	add	r3, pc, #612	@ (adr r3, 80088a0 <MPU6050_Read_All+0x398>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f8 f925 	bl	800088c <__aeabi_ddiv>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8008652:	4618      	mov	r0, r3
 8008654:	f7f7 ff86 	bl	8000564 <__aeabi_i2d>
 8008658:	a391      	add	r3, pc, #580	@ (adr r3, 80088a0 <MPU6050_Read_All+0x398>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f8 f915 	bl	800088c <__aeabi_ddiv>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8008672:	4618      	mov	r0, r3
 8008674:	f7f7 ff76 	bl	8000564 <__aeabi_i2d>
 8008678:	a389      	add	r3, pc, #548	@ (adr r3, 80088a0 <MPU6050_Read_All+0x398>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f8 f905 	bl	800088c <__aeabi_ddiv>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800868c:	f7f9 ff30 	bl	80024f0 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	4b8a      	ldr	r3, [pc, #552]	@ (80088bc <MPU6050_Read_All+0x3b4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	4618      	mov	r0, r3
 800869a:	f7f7 ff53 	bl	8000544 <__aeabi_ui2d>
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	4b87      	ldr	r3, [pc, #540]	@ (80088c0 <MPU6050_Read_All+0x3b8>)
 80086a4:	f7f8 f8f2 	bl	800088c <__aeabi_ddiv>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80086b0:	f7f9 ff1e 	bl	80024f0 <HAL_GetTick>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4a81      	ldr	r2, [pc, #516]	@ (80088bc <MPU6050_Read_All+0x3b4>)
 80086b8:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086c0:	461a      	mov	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086c8:	fb03 f202 	mul.w	r2, r3, r2
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086d2:	4619      	mov	r1, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7f7 ff3f 	bl	8000564 <__aeabi_i2d>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	ec43 2b10 	vmov	d0, r2, r3
 80086ee:	f005 f87b 	bl	800d7e8 <sqrt>
 80086f2:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008702:	f7f8 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d11f      	bne.n	800874c <MPU6050_Read_All+0x244>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008712:	4618      	mov	r0, r3
 8008714:	f7f7 ff26 	bl	8000564 <__aeabi_i2d>
 8008718:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800871c:	f7f8 f8b6 	bl	800088c <__aeabi_ddiv>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	ec43 2b17 	vmov	d7, r2, r3
 8008728:	eeb0 0a47 	vmov.f32	s0, s14
 800872c:	eef0 0a67 	vmov.f32	s1, s15
 8008730:	f005 f886 	bl	800d840 <atan>
 8008734:	ec51 0b10 	vmov	r0, r1, d0
 8008738:	a35b      	add	r3, pc, #364	@ (adr r3, 80088a8 <MPU6050_Read_All+0x3a0>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff7b 	bl	8000638 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800874a:	e005      	b.n	8008758 <MPU6050_Read_All+0x250>
    }
    else
    {
        roll = 0.0;
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800875e:	425b      	negs	r3, r3
 8008760:	4618      	mov	r0, r3
 8008762:	f7f7 feff 	bl	8000564 <__aeabi_i2d>
 8008766:	4682      	mov	sl, r0
 8008768:	468b      	mov	fp, r1
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008770:	4618      	mov	r0, r3
 8008772:	f7f7 fef7 	bl	8000564 <__aeabi_i2d>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	ec43 2b11 	vmov	d1, r2, r3
 800877e:	ec4b ab10 	vmov	d0, sl, fp
 8008782:	f005 f82f 	bl	800d7e4 <atan2>
 8008786:	ec51 0b10 	vmov	r0, r1, d0
 800878a:	a347      	add	r3, pc, #284	@ (adr r3, 80088a8 <MPU6050_Read_All+0x3a0>)
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	f7f7 ff52 	bl	8000638 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	4b48      	ldr	r3, [pc, #288]	@ (80088c4 <MPU6050_Read_All+0x3bc>)
 80087a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087a6:	f7f8 f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00a      	beq.n	80087c6 <MPU6050_Read_All+0x2be>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	4b43      	ldr	r3, [pc, #268]	@ (80088c8 <MPU6050_Read_All+0x3c0>)
 80087bc:	f7f8 f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d114      	bne.n	80087f0 <MPU6050_Read_All+0x2e8>
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	4b3f      	ldr	r3, [pc, #252]	@ (80088c8 <MPU6050_Read_All+0x3c0>)
 80087cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087d0:	f7f8 f9c2 	bl	8000b58 <__aeabi_dcmpgt>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d015      	beq.n	8008806 <MPU6050_Read_All+0x2fe>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	4b37      	ldr	r3, [pc, #220]	@ (80088c4 <MPU6050_Read_All+0x3bc>)
 80087e6:	f7f8 f999 	bl	8000b1c <__aeabi_dcmplt>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <MPU6050_Read_All+0x2fe>
    {
        KalmanY.angle = pitch;
 80087f0:	4936      	ldr	r1, [pc, #216]	@ (80088cc <MPU6050_Read_All+0x3c4>)
 80087f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008800:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8008804:	e014      	b.n	8008830 <MPU6050_Read_All+0x328>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800880c:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8008810:	eeb0 1a47 	vmov.f32	s2, s14
 8008814:	eef0 1a67 	vmov.f32	s3, s15
 8008818:	ed97 0b06 	vldr	d0, [r7, #24]
 800881c:	482b      	ldr	r0, [pc, #172]	@ (80088cc <MPU6050_Read_All+0x3c4>)
 800881e:	f000 f859 	bl	80088d4 <Kalman_getAngle>
 8008822:	eeb0 7a40 	vmov.f32	s14, s0
 8008826:	eef0 7a60 	vmov.f32	s15, s1
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008836:	4690      	mov	r8, r2
 8008838:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	4b21      	ldr	r3, [pc, #132]	@ (80088c8 <MPU6050_Read_All+0x3c0>)
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f8 f987 	bl	8000b58 <__aeabi_dcmpgt>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <MPU6050_Read_All+0x35a>
        DataStruct->Gx = -DataStruct->Gx;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008856:	4614      	mov	r4, r2
 8008858:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8008868:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800886c:	eeb0 1a47 	vmov.f32	s2, s14
 8008870:	eef0 1a67 	vmov.f32	s3, s15
 8008874:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8008878:	4815      	ldr	r0, [pc, #84]	@ (80088d0 <MPU6050_Read_All+0x3c8>)
 800887a:	f000 f82b 	bl	80088d4 <Kalman_getAngle>
 800887e:	eeb0 7a40 	vmov.f32	s14, s0
 8008882:	eef0 7a60 	vmov.f32	s15, s1
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800888c:	bf00      	nop
 800888e:	3740      	adds	r7, #64	@ 0x40
 8008890:	46bd      	mov	sp, r7
 8008892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008896:	bf00      	nop
 8008898:	00000000 	.word	0x00000000
 800889c:	40cc2900 	.word	0x40cc2900
 80088a0:	00000000 	.word	0x00000000
 80088a4:	40606000 	.word	0x40606000
 80088a8:	1a63c1f8 	.word	0x1a63c1f8
 80088ac:	404ca5dc 	.word	0x404ca5dc
 80088b0:	40d00000 	.word	0x40d00000
 80088b4:	43aa0000 	.word	0x43aa0000
 80088b8:	42121eb8 	.word	0x42121eb8
 80088bc:	200005c4 	.word	0x200005c4
 80088c0:	408f4000 	.word	0x408f4000
 80088c4:	c0568000 	.word	0xc0568000
 80088c8:	40568000 	.word	0x40568000
 80088cc:	20000058 	.word	0x20000058
 80088d0:	20000010 	.word	0x20000010

080088d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80088d4:	b5b0      	push	{r4, r5, r7, lr}
 80088d6:	b096      	sub	sp, #88	@ 0x58
 80088d8:	af00      	add	r7, sp, #0
 80088da:	61f8      	str	r0, [r7, #28]
 80088dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80088e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80088e4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088f2:	f7f7 fce9 	bl	80002c8 <__aeabi_dsub>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008904:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800890c:	f7f7 fe94 	bl	8000638 <__aeabi_dmul>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fcd8 	bl	80002cc <__adddf3>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008936:	f7f7 fe7f 	bl	8000638 <__aeabi_dmul>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008948:	f7f7 fcbe 	bl	80002c8 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800895a:	f7f7 fcb5 	bl	80002c8 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fcae 	bl	80002cc <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897c:	f7f7 fe5c 	bl	8000638 <__aeabi_dmul>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fca0 	bl	80002cc <__adddf3>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	69f9      	ldr	r1, [r7, #28]
 8008992:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80089a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a6:	f7f7 fe47 	bl	8000638 <__aeabi_dmul>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7f7 fc89 	bl	80002c8 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	69f9      	ldr	r1, [r7, #28]
 80089bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80089cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d0:	f7f7 fe32 	bl	8000638 <__aeabi_dmul>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 fc74 	bl	80002c8 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	69f9      	ldr	r1, [r7, #28]
 80089e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80089f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fa:	f7f7 fe1d 	bl	8000638 <__aeabi_dmul>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4620      	mov	r0, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	f7f7 fc61 	bl	80002cc <__adddf3>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	69f9      	ldr	r1, [r7, #28]
 8008a10:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008a20:	f7f7 fc54 	bl	80002cc <__adddf3>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008a32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a36:	f7f7 ff29 	bl	800088c <__aeabi_ddiv>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a4c:	f7f7 ff1e 	bl	800088c <__aeabi_ddiv>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008a5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a62:	f7f7 fc31 	bl	80002c8 <__aeabi_dsub>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008a74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a7c:	f7f7 fddc 	bl	8000638 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fc20 	bl	80002cc <__adddf3>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	69f9      	ldr	r1, [r7, #28]
 8008a92:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8008a9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fc0c 	bl	80002cc <__adddf3>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	69f9      	ldr	r1, [r7, #28]
 8008aba:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008ac4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008ace:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008ad8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ae0:	f7f7 fdaa 	bl	8000638 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fbec 	bl	80002c8 <__aeabi_dsub>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	69f9      	ldr	r1, [r7, #28]
 8008af6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008b00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008b08:	f7f7 fd96 	bl	8000638 <__aeabi_dmul>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4620      	mov	r0, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	f7f7 fbd8 	bl	80002c8 <__aeabi_dsub>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	69f9      	ldr	r1, [r7, #28]
 8008b1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008b28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b30:	f7f7 fd82 	bl	8000638 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fbc4 	bl	80002c8 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	69f9      	ldr	r1, [r7, #28]
 8008b46:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008b50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008b58:	f7f7 fd6e 	bl	8000638 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4620      	mov	r0, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fbb0 	bl	80002c8 <__aeabi_dsub>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008b78:	ec43 2b17 	vmov	d7, r2, r3
};
 8008b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8008b80:	eef0 0a67 	vmov.f32	s1, s15
 8008b84:	3758      	adds	r7, #88	@ 0x58
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008b8c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8008b92:	f000 fa27 	bl	8008fe4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8008b96:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	2178      	movs	r1, #120	@ 0x78
 8008b9e:	485b      	ldr	r0, [pc, #364]	@ (8008d0c <SSD1306_Init+0x180>)
 8008ba0:	f7fb fb24 	bl	80041ec <HAL_I2C_IsDeviceReady>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e0a9      	b.n	8008d02 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8008bae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8008bb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008bb4:	e002      	b.n	8008bbc <SSD1306_Init+0x30>
		p--;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f9      	bne.n	8008bb6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8008bc2:	22ae      	movs	r2, #174	@ 0xae
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	2078      	movs	r0, #120	@ 0x78
 8008bc8:	f000 fa88 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8008bcc:	2220      	movs	r2, #32
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2078      	movs	r0, #120	@ 0x78
 8008bd2:	f000 fa83 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	2100      	movs	r1, #0
 8008bda:	2078      	movs	r0, #120	@ 0x78
 8008bdc:	f000 fa7e 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008be0:	22b0      	movs	r2, #176	@ 0xb0
 8008be2:	2100      	movs	r1, #0
 8008be4:	2078      	movs	r0, #120	@ 0x78
 8008be6:	f000 fa79 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8008bea:	22c8      	movs	r2, #200	@ 0xc8
 8008bec:	2100      	movs	r1, #0
 8008bee:	2078      	movs	r0, #120	@ 0x78
 8008bf0:	f000 fa74 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	2078      	movs	r0, #120	@ 0x78
 8008bfa:	f000 fa6f 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8008bfe:	2210      	movs	r2, #16
 8008c00:	2100      	movs	r1, #0
 8008c02:	2078      	movs	r0, #120	@ 0x78
 8008c04:	f000 fa6a 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8008c08:	2240      	movs	r2, #64	@ 0x40
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	2078      	movs	r0, #120	@ 0x78
 8008c0e:	f000 fa65 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8008c12:	2281      	movs	r2, #129	@ 0x81
 8008c14:	2100      	movs	r1, #0
 8008c16:	2078      	movs	r0, #120	@ 0x78
 8008c18:	f000 fa60 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8008c1c:	22ff      	movs	r2, #255	@ 0xff
 8008c1e:	2100      	movs	r1, #0
 8008c20:	2078      	movs	r0, #120	@ 0x78
 8008c22:	f000 fa5b 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8008c26:	22a1      	movs	r2, #161	@ 0xa1
 8008c28:	2100      	movs	r1, #0
 8008c2a:	2078      	movs	r0, #120	@ 0x78
 8008c2c:	f000 fa56 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8008c30:	22a6      	movs	r2, #166	@ 0xa6
 8008c32:	2100      	movs	r1, #0
 8008c34:	2078      	movs	r0, #120	@ 0x78
 8008c36:	f000 fa51 	bl	80090dc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008c3a:	22a8      	movs	r2, #168	@ 0xa8
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	2078      	movs	r0, #120	@ 0x78
 8008c40:	f000 fa4c 	bl	80090dc <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8008c44:	223f      	movs	r2, #63	@ 0x3f
 8008c46:	2100      	movs	r1, #0
 8008c48:	2078      	movs	r0, #120	@ 0x78
 8008c4a:	f000 fa47 	bl	80090dc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008c4e:	22a4      	movs	r2, #164	@ 0xa4
 8008c50:	2100      	movs	r1, #0
 8008c52:	2078      	movs	r0, #120	@ 0x78
 8008c54:	f000 fa42 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8008c58:	22d3      	movs	r2, #211	@ 0xd3
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2078      	movs	r0, #120	@ 0x78
 8008c5e:	f000 fa3d 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2078      	movs	r0, #120	@ 0x78
 8008c68:	f000 fa38 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8008c6c:	22d5      	movs	r2, #213	@ 0xd5
 8008c6e:	2100      	movs	r1, #0
 8008c70:	2078      	movs	r0, #120	@ 0x78
 8008c72:	f000 fa33 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8008c76:	22f0      	movs	r2, #240	@ 0xf0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	2078      	movs	r0, #120	@ 0x78
 8008c7c:	f000 fa2e 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8008c80:	22d9      	movs	r2, #217	@ 0xd9
 8008c82:	2100      	movs	r1, #0
 8008c84:	2078      	movs	r0, #120	@ 0x78
 8008c86:	f000 fa29 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8008c8a:	2222      	movs	r2, #34	@ 0x22
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	2078      	movs	r0, #120	@ 0x78
 8008c90:	f000 fa24 	bl	80090dc <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8008c94:	22da      	movs	r2, #218	@ 0xda
 8008c96:	2100      	movs	r1, #0
 8008c98:	2078      	movs	r0, #120	@ 0x78
 8008c9a:	f000 fa1f 	bl	80090dc <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8008c9e:	2212      	movs	r2, #18
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	2078      	movs	r0, #120	@ 0x78
 8008ca4:	f000 fa1a 	bl	80090dc <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8008ca8:	22db      	movs	r2, #219	@ 0xdb
 8008caa:	2100      	movs	r1, #0
 8008cac:	2078      	movs	r0, #120	@ 0x78
 8008cae:	f000 fa15 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	2078      	movs	r0, #120	@ 0x78
 8008cb8:	f000 fa10 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8008cbc:	228d      	movs	r2, #141	@ 0x8d
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	2078      	movs	r0, #120	@ 0x78
 8008cc2:	f000 fa0b 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8008cc6:	2214      	movs	r2, #20
 8008cc8:	2100      	movs	r1, #0
 8008cca:	2078      	movs	r0, #120	@ 0x78
 8008ccc:	f000 fa06 	bl	80090dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8008cd0:	22af      	movs	r2, #175	@ 0xaf
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	2078      	movs	r0, #120	@ 0x78
 8008cd6:	f000 fa01 	bl	80090dc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8008cda:	222e      	movs	r2, #46	@ 0x2e
 8008cdc:	2100      	movs	r1, #0
 8008cde:	2078      	movs	r0, #120	@ 0x78
 8008ce0:	f000 f9fc 	bl	80090dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f000 f843 	bl	8008d70 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8008cea:	f000 f813 	bl	8008d14 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008cee:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <SSD1306_Init+0x184>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008cf4:	4b06      	ldr	r3, [pc, #24]	@ (8008d10 <SSD1306_Init+0x184>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8008cfa:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <SSD1306_Init+0x184>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8008d00:	2301      	movs	r3, #1
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000344 	.word	0x20000344
 8008d10:	200009c8 	.word	0x200009c8

08008d14 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	71fb      	strb	r3, [r7, #7]
 8008d1e:	e01d      	b.n	8008d5c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	3b50      	subs	r3, #80	@ 0x50
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	461a      	mov	r2, r3
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2078      	movs	r0, #120	@ 0x78
 8008d2c:	f000 f9d6 	bl	80090dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8008d30:	2200      	movs	r2, #0
 8008d32:	2100      	movs	r1, #0
 8008d34:	2078      	movs	r0, #120	@ 0x78
 8008d36:	f000 f9d1 	bl	80090dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	2078      	movs	r0, #120	@ 0x78
 8008d40:	f000 f9cc 	bl	80090dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	01db      	lsls	r3, r3, #7
 8008d48:	4a08      	ldr	r2, [pc, #32]	@ (8008d6c <SSD1306_UpdateScreen+0x58>)
 8008d4a:	441a      	add	r2, r3
 8008d4c:	2380      	movs	r3, #128	@ 0x80
 8008d4e:	2140      	movs	r1, #64	@ 0x40
 8008d50:	2078      	movs	r0, #120	@ 0x78
 8008d52:	f000 f95d 	bl	8009010 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	71fb      	strb	r3, [r7, #7]
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b07      	cmp	r3, #7
 8008d60:	d9de      	bls.n	8008d20 <SSD1306_UpdateScreen+0xc>
	}
}
 8008d62:	bf00      	nop
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	200005c8 	.word	0x200005c8

08008d70 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <SSD1306_Fill+0x14>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <SSD1306_Fill+0x16>
 8008d84:	23ff      	movs	r3, #255	@ 0xff
 8008d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <SSD1306_Fill+0x2c>)
 8008d8e:	f001 f954 	bl	800a03a <memset>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200005c8 	.word	0x200005c8

08008da0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	80fb      	strh	r3, [r7, #6]
 8008daa:	460b      	mov	r3, r1
 8008dac:	80bb      	strh	r3, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	70fb      	strb	r3, [r7, #3]
	if (
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008db6:	d848      	bhi.n	8008e4a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8008db8:	88bb      	ldrh	r3, [r7, #4]
 8008dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8008dbc:	d845      	bhi.n	8008e4a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8008dbe:	4b26      	ldr	r3, [pc, #152]	@ (8008e58 <SSD1306_DrawPixel+0xb8>)
 8008dc0:	791b      	ldrb	r3, [r3, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d006      	beq.n	8008dd4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	bf0c      	ite	eq
 8008dcc:	2301      	moveq	r3, #1
 8008dce:	2300      	movne	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d11a      	bne.n	8008e10 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	88bb      	ldrh	r3, [r7, #4]
 8008dde:	08db      	lsrs	r3, r3, #3
 8008de0:	b298      	uxth	r0, r3
 8008de2:	4603      	mov	r3, r0
 8008de4:	01db      	lsls	r3, r3, #7
 8008de6:	4413      	add	r3, r2
 8008de8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e5c <SSD1306_DrawPixel+0xbc>)
 8008dea:	5cd3      	ldrb	r3, [r2, r3]
 8008dec:	b25a      	sxtb	r2, r3
 8008dee:	88bb      	ldrh	r3, [r7, #4]
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	2101      	movs	r1, #1
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b259      	sxtb	r1, r3
 8008e00:	88fa      	ldrh	r2, [r7, #6]
 8008e02:	4603      	mov	r3, r0
 8008e04:	01db      	lsls	r3, r3, #7
 8008e06:	4413      	add	r3, r2
 8008e08:	b2c9      	uxtb	r1, r1
 8008e0a:	4a14      	ldr	r2, [pc, #80]	@ (8008e5c <SSD1306_DrawPixel+0xbc>)
 8008e0c:	54d1      	strb	r1, [r2, r3]
 8008e0e:	e01d      	b.n	8008e4c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	88bb      	ldrh	r3, [r7, #4]
 8008e14:	08db      	lsrs	r3, r3, #3
 8008e16:	b298      	uxth	r0, r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	01db      	lsls	r3, r3, #7
 8008e1c:	4413      	add	r3, r2
 8008e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8008e5c <SSD1306_DrawPixel+0xbc>)
 8008e20:	5cd3      	ldrb	r3, [r2, r3]
 8008e22:	b25a      	sxtb	r2, r3
 8008e24:	88bb      	ldrh	r3, [r7, #4]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	43db      	mvns	r3, r3
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	4013      	ands	r3, r2
 8008e38:	b259      	sxtb	r1, r3
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	01db      	lsls	r3, r3, #7
 8008e40:	4413      	add	r3, r2
 8008e42:	b2c9      	uxtb	r1, r1
 8008e44:	4a05      	ldr	r2, [pc, #20]	@ (8008e5c <SSD1306_DrawPixel+0xbc>)
 8008e46:	54d1      	strb	r1, [r2, r3]
 8008e48:	e000      	b.n	8008e4c <SSD1306_DrawPixel+0xac>
		return;
 8008e4a:	bf00      	nop
	}
}
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	200009c8 	.word	0x200009c8
 8008e5c:	200005c8 	.word	0x200005c8

08008e60 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	460a      	mov	r2, r1
 8008e6a:	80fb      	strh	r3, [r7, #6]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8008e70:	4a05      	ldr	r2, [pc, #20]	@ (8008e88 <SSD1306_GotoXY+0x28>)
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8008e76:	4a04      	ldr	r2, [pc, #16]	@ (8008e88 <SSD1306_GotoXY+0x28>)
 8008e78:	88bb      	ldrh	r3, [r7, #4]
 8008e7a:	8053      	strh	r3, [r2, #2]
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	200009c8 	.word	0x200009c8

08008e8c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	6039      	str	r1, [r7, #0]
 8008e96:	71fb      	strb	r3, [r7, #7]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8008e9c:	4b39      	ldr	r3, [pc, #228]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	4413      	add	r3, r2
	if (
 8008ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008eaa:	dc07      	bgt.n	8008ebc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8008eac:	4b35      	ldr	r3, [pc, #212]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008eae:	885b      	ldrh	r3, [r3, #2]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8008eb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8008eba:	dd01      	ble.n	8008ec0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e05d      	b.n	8008f7c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e04b      	b.n	8008f5e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3b20      	subs	r3, #32
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	7849      	ldrb	r1, [r1, #1]
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	440b      	add	r3, r1
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	613b      	str	r3, [r7, #16]
 8008ee8:	e030      	b.n	8008f4c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8008efa:	4b22      	ldr	r3, [pc, #136]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008efc:	881a      	ldrh	r2, [r3, #0]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	4413      	add	r3, r2
 8008f04:	b298      	uxth	r0, r3
 8008f06:	4b1f      	ldr	r3, [pc, #124]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008f08:	885a      	ldrh	r2, [r3, #2]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	4413      	add	r3, r2
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	79ba      	ldrb	r2, [r7, #6]
 8008f14:	4619      	mov	r1, r3
 8008f16:	f7ff ff43 	bl	8008da0 <SSD1306_DrawPixel>
 8008f1a:	e014      	b.n	8008f46 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8008f1c:	4b19      	ldr	r3, [pc, #100]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008f1e:	881a      	ldrh	r2, [r3, #0]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4413      	add	r3, r2
 8008f26:	b298      	uxth	r0, r3
 8008f28:	4b16      	ldr	r3, [pc, #88]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008f2a:	885a      	ldrh	r2, [r3, #2]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	4413      	add	r3, r2
 8008f32:	b299      	uxth	r1, r3
 8008f34:	79bb      	ldrb	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bf0c      	ite	eq
 8008f3a:	2301      	moveq	r3, #1
 8008f3c:	2300      	movne	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	f7ff ff2d 	bl	8008da0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d3c8      	bcc.n	8008eea <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	461a      	mov	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d3ad      	bcc.n	8008ec6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8008f6a:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	7812      	ldrb	r2, [r2, #0]
 8008f72:	4413      	add	r3, r2
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <SSD1306_Putc+0xf8>)
 8008f78:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	200009c8 	.word	0x200009c8

08008f88 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8008f96:	e012      	b.n	8008fbe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	79fa      	ldrb	r2, [r7, #7]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff ff73 	bl	8008e8c <SSD1306_Putc>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d002      	beq.n	8008fb8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	e008      	b.n	8008fca <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e8      	bne.n	8008f98 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	f7ff feca 	bl	8008d70 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8008fdc:	f7ff fe9a 	bl	8008d14 <SSD1306_UpdateScreen>
}
 8008fe0:	bf00      	nop
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8008fea:	4b08      	ldr	r3, [pc, #32]	@ (800900c <ssd1306_I2C_Init+0x28>)
 8008fec:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008fee:	e002      	b.n	8008ff6 <ssd1306_I2C_Init+0x12>
		p--;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f9      	bne.n	8008ff0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	0003d090 	.word	0x0003d090

08009010 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b0c7      	sub	sp, #284	@ 0x11c
 8009014:	af02      	add	r7, sp, #8
 8009016:	4604      	mov	r4, r0
 8009018:	4608      	mov	r0, r1
 800901a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800901e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8009022:	600a      	str	r2, [r1, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800902a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800902e:	4622      	mov	r2, r4
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009036:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800903a:	4602      	mov	r2, r0
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009046:	460a      	mov	r2, r1
 8009048:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800904a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009052:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009056:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800905a:	7812      	ldrb	r2, [r2, #0]
 800905c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800905e:	2300      	movs	r3, #0
 8009060:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8009064:	e015      	b.n	8009092 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8009066:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800906a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800906e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	441a      	add	r2, r3
 8009076:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800907a:	3301      	adds	r3, #1
 800907c:	7811      	ldrb	r1, [r2, #0]
 800907e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009082:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8009086:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8009088:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800908c:	3301      	adds	r3, #1
 800908e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8009092:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8009096:	b29b      	uxth	r3, r3
 8009098:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800909c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80090a0:	8812      	ldrh	r2, [r2, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8df      	bhi.n	8009066 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80090a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	b299      	uxth	r1, r3
 80090b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f107 020c 	add.w	r2, r7, #12
 80090c4:	200a      	movs	r0, #10
 80090c6:	9000      	str	r0, [sp, #0]
 80090c8:	4803      	ldr	r0, [pc, #12]	@ (80090d8 <ssd1306_I2C_WriteMulti+0xc8>)
 80090ca:	f7fa fc65 	bl	8003998 <HAL_I2C_Master_Transmit>
}
 80090ce:	bf00      	nop
 80090d0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd90      	pop	{r4, r7, pc}
 80090d8:	20000344 	.word	0x20000344

080090dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
 80090e6:	460b      	mov	r3, r1
 80090e8:	71bb      	strb	r3, [r7, #6]
 80090ea:	4613      	mov	r3, r2
 80090ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80090ee:	79bb      	ldrb	r3, [r7, #6]
 80090f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80090f2:	797b      	ldrb	r3, [r7, #5]
 80090f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	b299      	uxth	r1, r3
 80090fa:	f107 020c 	add.w	r2, r7, #12
 80090fe:	230a      	movs	r3, #10
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2302      	movs	r3, #2
 8009104:	4803      	ldr	r0, [pc, #12]	@ (8009114 <ssd1306_I2C_Write+0x38>)
 8009106:	f7fa fc47 	bl	8003998 <HAL_I2C_Master_Transmit>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000344 	.word	0x20000344

08009118 <__cvt>:
 8009118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	ec57 6b10 	vmov	r6, r7, d0
 8009120:	2f00      	cmp	r7, #0
 8009122:	460c      	mov	r4, r1
 8009124:	4619      	mov	r1, r3
 8009126:	463b      	mov	r3, r7
 8009128:	bfbb      	ittet	lt
 800912a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800912e:	461f      	movlt	r7, r3
 8009130:	2300      	movge	r3, #0
 8009132:	232d      	movlt	r3, #45	@ 0x2d
 8009134:	700b      	strb	r3, [r1, #0]
 8009136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009138:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800913c:	4691      	mov	r9, r2
 800913e:	f023 0820 	bic.w	r8, r3, #32
 8009142:	bfbc      	itt	lt
 8009144:	4632      	movlt	r2, r6
 8009146:	4616      	movlt	r6, r2
 8009148:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800914c:	d005      	beq.n	800915a <__cvt+0x42>
 800914e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009152:	d100      	bne.n	8009156 <__cvt+0x3e>
 8009154:	3401      	adds	r4, #1
 8009156:	2102      	movs	r1, #2
 8009158:	e000      	b.n	800915c <__cvt+0x44>
 800915a:	2103      	movs	r1, #3
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	ab02      	add	r3, sp, #8
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	ec47 6b10 	vmov	d0, r6, r7
 8009168:	4653      	mov	r3, sl
 800916a:	4622      	mov	r2, r4
 800916c:	f001 f874 	bl	800a258 <_dtoa_r>
 8009170:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009174:	4605      	mov	r5, r0
 8009176:	d119      	bne.n	80091ac <__cvt+0x94>
 8009178:	f019 0f01 	tst.w	r9, #1
 800917c:	d00e      	beq.n	800919c <__cvt+0x84>
 800917e:	eb00 0904 	add.w	r9, r0, r4
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fcbd 	bl	8000b08 <__aeabi_dcmpeq>
 800918e:	b108      	cbz	r0, 8009194 <__cvt+0x7c>
 8009190:	f8cd 900c 	str.w	r9, [sp, #12]
 8009194:	2230      	movs	r2, #48	@ 0x30
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	454b      	cmp	r3, r9
 800919a:	d31e      	bcc.n	80091da <__cvt+0xc2>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091a0:	1b5b      	subs	r3, r3, r5
 80091a2:	4628      	mov	r0, r5
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	b004      	add	sp, #16
 80091a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091b0:	eb00 0904 	add.w	r9, r0, r4
 80091b4:	d1e5      	bne.n	8009182 <__cvt+0x6a>
 80091b6:	7803      	ldrb	r3, [r0, #0]
 80091b8:	2b30      	cmp	r3, #48	@ 0x30
 80091ba:	d10a      	bne.n	80091d2 <__cvt+0xba>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80091c8:	b918      	cbnz	r0, 80091d2 <__cvt+0xba>
 80091ca:	f1c4 0401 	rsb	r4, r4, #1
 80091ce:	f8ca 4000 	str.w	r4, [sl]
 80091d2:	f8da 3000 	ldr.w	r3, [sl]
 80091d6:	4499      	add	r9, r3
 80091d8:	e7d3      	b.n	8009182 <__cvt+0x6a>
 80091da:	1c59      	adds	r1, r3, #1
 80091dc:	9103      	str	r1, [sp, #12]
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e7d9      	b.n	8009196 <__cvt+0x7e>

080091e2 <__exponent>:
 80091e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e4:	2900      	cmp	r1, #0
 80091e6:	bfba      	itte	lt
 80091e8:	4249      	neglt	r1, r1
 80091ea:	232d      	movlt	r3, #45	@ 0x2d
 80091ec:	232b      	movge	r3, #43	@ 0x2b
 80091ee:	2909      	cmp	r1, #9
 80091f0:	7002      	strb	r2, [r0, #0]
 80091f2:	7043      	strb	r3, [r0, #1]
 80091f4:	dd29      	ble.n	800924a <__exponent+0x68>
 80091f6:	f10d 0307 	add.w	r3, sp, #7
 80091fa:	461d      	mov	r5, r3
 80091fc:	270a      	movs	r7, #10
 80091fe:	461a      	mov	r2, r3
 8009200:	fbb1 f6f7 	udiv	r6, r1, r7
 8009204:	fb07 1416 	mls	r4, r7, r6, r1
 8009208:	3430      	adds	r4, #48	@ 0x30
 800920a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800920e:	460c      	mov	r4, r1
 8009210:	2c63      	cmp	r4, #99	@ 0x63
 8009212:	f103 33ff 	add.w	r3, r3, #4294967295
 8009216:	4631      	mov	r1, r6
 8009218:	dcf1      	bgt.n	80091fe <__exponent+0x1c>
 800921a:	3130      	adds	r1, #48	@ 0x30
 800921c:	1e94      	subs	r4, r2, #2
 800921e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009222:	1c41      	adds	r1, r0, #1
 8009224:	4623      	mov	r3, r4
 8009226:	42ab      	cmp	r3, r5
 8009228:	d30a      	bcc.n	8009240 <__exponent+0x5e>
 800922a:	f10d 0309 	add.w	r3, sp, #9
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	42ac      	cmp	r4, r5
 8009232:	bf88      	it	hi
 8009234:	2300      	movhi	r3, #0
 8009236:	3302      	adds	r3, #2
 8009238:	4403      	add	r3, r0
 800923a:	1a18      	subs	r0, r3, r0
 800923c:	b003      	add	sp, #12
 800923e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009240:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009244:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009248:	e7ed      	b.n	8009226 <__exponent+0x44>
 800924a:	2330      	movs	r3, #48	@ 0x30
 800924c:	3130      	adds	r1, #48	@ 0x30
 800924e:	7083      	strb	r3, [r0, #2]
 8009250:	70c1      	strb	r1, [r0, #3]
 8009252:	1d03      	adds	r3, r0, #4
 8009254:	e7f1      	b.n	800923a <__exponent+0x58>
	...

08009258 <_printf_float>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	b08d      	sub	sp, #52	@ 0x34
 800925e:	460c      	mov	r4, r1
 8009260:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009264:	4616      	mov	r6, r2
 8009266:	461f      	mov	r7, r3
 8009268:	4605      	mov	r5, r0
 800926a:	f000 feef 	bl	800a04c <_localeconv_r>
 800926e:	6803      	ldr	r3, [r0, #0]
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	4618      	mov	r0, r3
 8009274:	f7f7 f81c 	bl	80002b0 <strlen>
 8009278:	2300      	movs	r3, #0
 800927a:	930a      	str	r3, [sp, #40]	@ 0x28
 800927c:	f8d8 3000 	ldr.w	r3, [r8]
 8009280:	9005      	str	r0, [sp, #20]
 8009282:	3307      	adds	r3, #7
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	f103 0208 	add.w	r2, r3, #8
 800928c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009290:	f8d4 b000 	ldr.w	fp, [r4]
 8009294:	f8c8 2000 	str.w	r2, [r8]
 8009298:	e9d3 8900 	ldrd	r8, r9, [r3]
 800929c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092a0:	9307      	str	r3, [sp, #28]
 80092a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80092a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ae:	4b9c      	ldr	r3, [pc, #624]	@ (8009520 <_printf_float+0x2c8>)
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	f7f7 fc5a 	bl	8000b6c <__aeabi_dcmpun>
 80092b8:	bb70      	cbnz	r0, 8009318 <_printf_float+0xc0>
 80092ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092be:	4b98      	ldr	r3, [pc, #608]	@ (8009520 <_printf_float+0x2c8>)
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	f7f7 fc34 	bl	8000b30 <__aeabi_dcmple>
 80092c8:	bb30      	cbnz	r0, 8009318 <_printf_float+0xc0>
 80092ca:	2200      	movs	r2, #0
 80092cc:	2300      	movs	r3, #0
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 fc23 	bl	8000b1c <__aeabi_dcmplt>
 80092d6:	b110      	cbz	r0, 80092de <_printf_float+0x86>
 80092d8:	232d      	movs	r3, #45	@ 0x2d
 80092da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092de:	4a91      	ldr	r2, [pc, #580]	@ (8009524 <_printf_float+0x2cc>)
 80092e0:	4b91      	ldr	r3, [pc, #580]	@ (8009528 <_printf_float+0x2d0>)
 80092e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092e6:	bf94      	ite	ls
 80092e8:	4690      	movls	r8, r2
 80092ea:	4698      	movhi	r8, r3
 80092ec:	2303      	movs	r3, #3
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	f02b 0304 	bic.w	r3, fp, #4
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	f04f 0900 	mov.w	r9, #0
 80092fa:	9700      	str	r7, [sp, #0]
 80092fc:	4633      	mov	r3, r6
 80092fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f9d2 	bl	80096ac <_printf_common>
 8009308:	3001      	adds	r0, #1
 800930a:	f040 808d 	bne.w	8009428 <_printf_float+0x1d0>
 800930e:	f04f 30ff 	mov.w	r0, #4294967295
 8009312:	b00d      	add	sp, #52	@ 0x34
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f7 fc24 	bl	8000b6c <__aeabi_dcmpun>
 8009324:	b140      	cbz	r0, 8009338 <_printf_float+0xe0>
 8009326:	464b      	mov	r3, r9
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfbc      	itt	lt
 800932c:	232d      	movlt	r3, #45	@ 0x2d
 800932e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009332:	4a7e      	ldr	r2, [pc, #504]	@ (800952c <_printf_float+0x2d4>)
 8009334:	4b7e      	ldr	r3, [pc, #504]	@ (8009530 <_printf_float+0x2d8>)
 8009336:	e7d4      	b.n	80092e2 <_printf_float+0x8a>
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800933e:	9206      	str	r2, [sp, #24]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	d13b      	bne.n	80093bc <_printf_float+0x164>
 8009344:	2306      	movs	r3, #6
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800934c:	2300      	movs	r3, #0
 800934e:	6022      	str	r2, [r4, #0]
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	ab0a      	add	r3, sp, #40	@ 0x28
 8009354:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009358:	ab09      	add	r3, sp, #36	@ 0x24
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	6861      	ldr	r1, [r4, #4]
 800935e:	ec49 8b10 	vmov	d0, r8, r9
 8009362:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009366:	4628      	mov	r0, r5
 8009368:	f7ff fed6 	bl	8009118 <__cvt>
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009370:	2b47      	cmp	r3, #71	@ 0x47
 8009372:	4680      	mov	r8, r0
 8009374:	d129      	bne.n	80093ca <_printf_float+0x172>
 8009376:	1cc8      	adds	r0, r1, #3
 8009378:	db02      	blt.n	8009380 <_printf_float+0x128>
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	4299      	cmp	r1, r3
 800937e:	dd41      	ble.n	8009404 <_printf_float+0x1ac>
 8009380:	f1aa 0a02 	sub.w	sl, sl, #2
 8009384:	fa5f fa8a 	uxtb.w	sl, sl
 8009388:	3901      	subs	r1, #1
 800938a:	4652      	mov	r2, sl
 800938c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009390:	9109      	str	r1, [sp, #36]	@ 0x24
 8009392:	f7ff ff26 	bl	80091e2 <__exponent>
 8009396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009398:	1813      	adds	r3, r2, r0
 800939a:	2a01      	cmp	r2, #1
 800939c:	4681      	mov	r9, r0
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	dc02      	bgt.n	80093a8 <_printf_float+0x150>
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	07d2      	lsls	r2, r2, #31
 80093a6:	d501      	bpl.n	80093ac <_printf_float+0x154>
 80093a8:	3301      	adds	r3, #1
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0a2      	beq.n	80092fa <_printf_float+0xa2>
 80093b4:	232d      	movs	r3, #45	@ 0x2d
 80093b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093ba:	e79e      	b.n	80092fa <_printf_float+0xa2>
 80093bc:	9a06      	ldr	r2, [sp, #24]
 80093be:	2a47      	cmp	r2, #71	@ 0x47
 80093c0:	d1c2      	bne.n	8009348 <_printf_float+0xf0>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1c0      	bne.n	8009348 <_printf_float+0xf0>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7bd      	b.n	8009346 <_printf_float+0xee>
 80093ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093ce:	d9db      	bls.n	8009388 <_printf_float+0x130>
 80093d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093d4:	d118      	bne.n	8009408 <_printf_float+0x1b0>
 80093d6:	2900      	cmp	r1, #0
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	dd0b      	ble.n	80093f4 <_printf_float+0x19c>
 80093dc:	6121      	str	r1, [r4, #16]
 80093de:	b913      	cbnz	r3, 80093e6 <_printf_float+0x18e>
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	07d0      	lsls	r0, r2, #31
 80093e4:	d502      	bpl.n	80093ec <_printf_float+0x194>
 80093e6:	3301      	adds	r3, #1
 80093e8:	440b      	add	r3, r1
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093ee:	f04f 0900 	mov.w	r9, #0
 80093f2:	e7db      	b.n	80093ac <_printf_float+0x154>
 80093f4:	b913      	cbnz	r3, 80093fc <_printf_float+0x1a4>
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	07d2      	lsls	r2, r2, #31
 80093fa:	d501      	bpl.n	8009400 <_printf_float+0x1a8>
 80093fc:	3302      	adds	r3, #2
 80093fe:	e7f4      	b.n	80093ea <_printf_float+0x192>
 8009400:	2301      	movs	r3, #1
 8009402:	e7f2      	b.n	80093ea <_printf_float+0x192>
 8009404:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800940a:	4299      	cmp	r1, r3
 800940c:	db05      	blt.n	800941a <_printf_float+0x1c2>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	6121      	str	r1, [r4, #16]
 8009412:	07d8      	lsls	r0, r3, #31
 8009414:	d5ea      	bpl.n	80093ec <_printf_float+0x194>
 8009416:	1c4b      	adds	r3, r1, #1
 8009418:	e7e7      	b.n	80093ea <_printf_float+0x192>
 800941a:	2900      	cmp	r1, #0
 800941c:	bfd4      	ite	le
 800941e:	f1c1 0202 	rsble	r2, r1, #2
 8009422:	2201      	movgt	r2, #1
 8009424:	4413      	add	r3, r2
 8009426:	e7e0      	b.n	80093ea <_printf_float+0x192>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	055a      	lsls	r2, r3, #21
 800942c:	d407      	bmi.n	800943e <_printf_float+0x1e6>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	4642      	mov	r2, r8
 8009432:	4631      	mov	r1, r6
 8009434:	4628      	mov	r0, r5
 8009436:	47b8      	blx	r7
 8009438:	3001      	adds	r0, #1
 800943a:	d12b      	bne.n	8009494 <_printf_float+0x23c>
 800943c:	e767      	b.n	800930e <_printf_float+0xb6>
 800943e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009442:	f240 80dd 	bls.w	8009600 <_printf_float+0x3a8>
 8009446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800944a:	2200      	movs	r2, #0
 800944c:	2300      	movs	r3, #0
 800944e:	f7f7 fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8009452:	2800      	cmp	r0, #0
 8009454:	d033      	beq.n	80094be <_printf_float+0x266>
 8009456:	4a37      	ldr	r2, [pc, #220]	@ (8009534 <_printf_float+0x2dc>)
 8009458:	2301      	movs	r3, #1
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	f43f af54 	beq.w	800930e <_printf_float+0xb6>
 8009466:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800946a:	4543      	cmp	r3, r8
 800946c:	db02      	blt.n	8009474 <_printf_float+0x21c>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	07d8      	lsls	r0, r3, #31
 8009472:	d50f      	bpl.n	8009494 <_printf_float+0x23c>
 8009474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af45 	beq.w	800930e <_printf_float+0xb6>
 8009484:	f04f 0900 	mov.w	r9, #0
 8009488:	f108 38ff 	add.w	r8, r8, #4294967295
 800948c:	f104 0a1a 	add.w	sl, r4, #26
 8009490:	45c8      	cmp	r8, r9
 8009492:	dc09      	bgt.n	80094a8 <_printf_float+0x250>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	079b      	lsls	r3, r3, #30
 8009498:	f100 8103 	bmi.w	80096a2 <_printf_float+0x44a>
 800949c:	68e0      	ldr	r0, [r4, #12]
 800949e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094a0:	4298      	cmp	r0, r3
 80094a2:	bfb8      	it	lt
 80094a4:	4618      	movlt	r0, r3
 80094a6:	e734      	b.n	8009312 <_printf_float+0xba>
 80094a8:	2301      	movs	r3, #1
 80094aa:	4652      	mov	r2, sl
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	f43f af2b 	beq.w	800930e <_printf_float+0xb6>
 80094b8:	f109 0901 	add.w	r9, r9, #1
 80094bc:	e7e8      	b.n	8009490 <_printf_float+0x238>
 80094be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dc39      	bgt.n	8009538 <_printf_float+0x2e0>
 80094c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009534 <_printf_float+0x2dc>)
 80094c6:	2301      	movs	r3, #1
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	f43f af1d 	beq.w	800930e <_printf_float+0xb6>
 80094d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094d8:	ea59 0303 	orrs.w	r3, r9, r3
 80094dc:	d102      	bne.n	80094e4 <_printf_float+0x28c>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	07d9      	lsls	r1, r3, #31
 80094e2:	d5d7      	bpl.n	8009494 <_printf_float+0x23c>
 80094e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f af0d 	beq.w	800930e <_printf_float+0xb6>
 80094f4:	f04f 0a00 	mov.w	sl, #0
 80094f8:	f104 0b1a 	add.w	fp, r4, #26
 80094fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fe:	425b      	negs	r3, r3
 8009500:	4553      	cmp	r3, sl
 8009502:	dc01      	bgt.n	8009508 <_printf_float+0x2b0>
 8009504:	464b      	mov	r3, r9
 8009506:	e793      	b.n	8009430 <_printf_float+0x1d8>
 8009508:	2301      	movs	r3, #1
 800950a:	465a      	mov	r2, fp
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	47b8      	blx	r7
 8009512:	3001      	adds	r0, #1
 8009514:	f43f aefb 	beq.w	800930e <_printf_float+0xb6>
 8009518:	f10a 0a01 	add.w	sl, sl, #1
 800951c:	e7ee      	b.n	80094fc <_printf_float+0x2a4>
 800951e:	bf00      	nop
 8009520:	7fefffff 	.word	0x7fefffff
 8009524:	0800eea0 	.word	0x0800eea0
 8009528:	0800eea4 	.word	0x0800eea4
 800952c:	0800eea8 	.word	0x0800eea8
 8009530:	0800eeac 	.word	0x0800eeac
 8009534:	0800eeb0 	.word	0x0800eeb0
 8009538:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800953a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800953e:	4553      	cmp	r3, sl
 8009540:	bfa8      	it	ge
 8009542:	4653      	movge	r3, sl
 8009544:	2b00      	cmp	r3, #0
 8009546:	4699      	mov	r9, r3
 8009548:	dc36      	bgt.n	80095b8 <_printf_float+0x360>
 800954a:	f04f 0b00 	mov.w	fp, #0
 800954e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009552:	f104 021a 	add.w	r2, r4, #26
 8009556:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009558:	9306      	str	r3, [sp, #24]
 800955a:	eba3 0309 	sub.w	r3, r3, r9
 800955e:	455b      	cmp	r3, fp
 8009560:	dc31      	bgt.n	80095c6 <_printf_float+0x36e>
 8009562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009564:	459a      	cmp	sl, r3
 8009566:	dc3a      	bgt.n	80095de <_printf_float+0x386>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	07da      	lsls	r2, r3, #31
 800956c:	d437      	bmi.n	80095de <_printf_float+0x386>
 800956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009570:	ebaa 0903 	sub.w	r9, sl, r3
 8009574:	9b06      	ldr	r3, [sp, #24]
 8009576:	ebaa 0303 	sub.w	r3, sl, r3
 800957a:	4599      	cmp	r9, r3
 800957c:	bfa8      	it	ge
 800957e:	4699      	movge	r9, r3
 8009580:	f1b9 0f00 	cmp.w	r9, #0
 8009584:	dc33      	bgt.n	80095ee <_printf_float+0x396>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800958e:	f104 0b1a 	add.w	fp, r4, #26
 8009592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009594:	ebaa 0303 	sub.w	r3, sl, r3
 8009598:	eba3 0309 	sub.w	r3, r3, r9
 800959c:	4543      	cmp	r3, r8
 800959e:	f77f af79 	ble.w	8009494 <_printf_float+0x23c>
 80095a2:	2301      	movs	r3, #1
 80095a4:	465a      	mov	r2, fp
 80095a6:	4631      	mov	r1, r6
 80095a8:	4628      	mov	r0, r5
 80095aa:	47b8      	blx	r7
 80095ac:	3001      	adds	r0, #1
 80095ae:	f43f aeae 	beq.w	800930e <_printf_float+0xb6>
 80095b2:	f108 0801 	add.w	r8, r8, #1
 80095b6:	e7ec      	b.n	8009592 <_printf_float+0x33a>
 80095b8:	4642      	mov	r2, r8
 80095ba:	4631      	mov	r1, r6
 80095bc:	4628      	mov	r0, r5
 80095be:	47b8      	blx	r7
 80095c0:	3001      	adds	r0, #1
 80095c2:	d1c2      	bne.n	800954a <_printf_float+0x2f2>
 80095c4:	e6a3      	b.n	800930e <_printf_float+0xb6>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	9206      	str	r2, [sp, #24]
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	f43f ae9c 	beq.w	800930e <_printf_float+0xb6>
 80095d6:	9a06      	ldr	r2, [sp, #24]
 80095d8:	f10b 0b01 	add.w	fp, fp, #1
 80095dc:	e7bb      	b.n	8009556 <_printf_float+0x2fe>
 80095de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095e2:	4631      	mov	r1, r6
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	d1c0      	bne.n	800956e <_printf_float+0x316>
 80095ec:	e68f      	b.n	800930e <_printf_float+0xb6>
 80095ee:	9a06      	ldr	r2, [sp, #24]
 80095f0:	464b      	mov	r3, r9
 80095f2:	4442      	add	r2, r8
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	d1c3      	bne.n	8009586 <_printf_float+0x32e>
 80095fe:	e686      	b.n	800930e <_printf_float+0xb6>
 8009600:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009604:	f1ba 0f01 	cmp.w	sl, #1
 8009608:	dc01      	bgt.n	800960e <_printf_float+0x3b6>
 800960a:	07db      	lsls	r3, r3, #31
 800960c:	d536      	bpl.n	800967c <_printf_float+0x424>
 800960e:	2301      	movs	r3, #1
 8009610:	4642      	mov	r2, r8
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	f43f ae78 	beq.w	800930e <_printf_float+0xb6>
 800961e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	f43f ae70 	beq.w	800930e <_printf_float+0xb6>
 800962e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009632:	2200      	movs	r2, #0
 8009634:	2300      	movs	r3, #0
 8009636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800963a:	f7f7 fa65 	bl	8000b08 <__aeabi_dcmpeq>
 800963e:	b9c0      	cbnz	r0, 8009672 <_printf_float+0x41a>
 8009640:	4653      	mov	r3, sl
 8009642:	f108 0201 	add.w	r2, r8, #1
 8009646:	4631      	mov	r1, r6
 8009648:	4628      	mov	r0, r5
 800964a:	47b8      	blx	r7
 800964c:	3001      	adds	r0, #1
 800964e:	d10c      	bne.n	800966a <_printf_float+0x412>
 8009650:	e65d      	b.n	800930e <_printf_float+0xb6>
 8009652:	2301      	movs	r3, #1
 8009654:	465a      	mov	r2, fp
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f ae56 	beq.w	800930e <_printf_float+0xb6>
 8009662:	f108 0801 	add.w	r8, r8, #1
 8009666:	45d0      	cmp	r8, sl
 8009668:	dbf3      	blt.n	8009652 <_printf_float+0x3fa>
 800966a:	464b      	mov	r3, r9
 800966c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009670:	e6df      	b.n	8009432 <_printf_float+0x1da>
 8009672:	f04f 0800 	mov.w	r8, #0
 8009676:	f104 0b1a 	add.w	fp, r4, #26
 800967a:	e7f4      	b.n	8009666 <_printf_float+0x40e>
 800967c:	2301      	movs	r3, #1
 800967e:	4642      	mov	r2, r8
 8009680:	e7e1      	b.n	8009646 <_printf_float+0x3ee>
 8009682:	2301      	movs	r3, #1
 8009684:	464a      	mov	r2, r9
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f ae3e 	beq.w	800930e <_printf_float+0xb6>
 8009692:	f108 0801 	add.w	r8, r8, #1
 8009696:	68e3      	ldr	r3, [r4, #12]
 8009698:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800969a:	1a5b      	subs	r3, r3, r1
 800969c:	4543      	cmp	r3, r8
 800969e:	dcf0      	bgt.n	8009682 <_printf_float+0x42a>
 80096a0:	e6fc      	b.n	800949c <_printf_float+0x244>
 80096a2:	f04f 0800 	mov.w	r8, #0
 80096a6:	f104 0919 	add.w	r9, r4, #25
 80096aa:	e7f4      	b.n	8009696 <_printf_float+0x43e>

080096ac <_printf_common>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	4616      	mov	r6, r2
 80096b2:	4698      	mov	r8, r3
 80096b4:	688a      	ldr	r2, [r1, #8]
 80096b6:	690b      	ldr	r3, [r1, #16]
 80096b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096bc:	4293      	cmp	r3, r2
 80096be:	bfb8      	it	lt
 80096c0:	4613      	movlt	r3, r2
 80096c2:	6033      	str	r3, [r6, #0]
 80096c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096c8:	4607      	mov	r7, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	b10a      	cbz	r2, 80096d2 <_printf_common+0x26>
 80096ce:	3301      	adds	r3, #1
 80096d0:	6033      	str	r3, [r6, #0]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	0699      	lsls	r1, r3, #26
 80096d6:	bf42      	ittt	mi
 80096d8:	6833      	ldrmi	r3, [r6, #0]
 80096da:	3302      	addmi	r3, #2
 80096dc:	6033      	strmi	r3, [r6, #0]
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	f015 0506 	ands.w	r5, r5, #6
 80096e4:	d106      	bne.n	80096f4 <_printf_common+0x48>
 80096e6:	f104 0a19 	add.w	sl, r4, #25
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	6832      	ldr	r2, [r6, #0]
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	42ab      	cmp	r3, r5
 80096f2:	dc26      	bgt.n	8009742 <_printf_common+0x96>
 80096f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096f8:	6822      	ldr	r2, [r4, #0]
 80096fa:	3b00      	subs	r3, #0
 80096fc:	bf18      	it	ne
 80096fe:	2301      	movne	r3, #1
 8009700:	0692      	lsls	r2, r2, #26
 8009702:	d42b      	bmi.n	800975c <_printf_common+0xb0>
 8009704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009708:	4641      	mov	r1, r8
 800970a:	4638      	mov	r0, r7
 800970c:	47c8      	blx	r9
 800970e:	3001      	adds	r0, #1
 8009710:	d01e      	beq.n	8009750 <_printf_common+0xa4>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	6922      	ldr	r2, [r4, #16]
 8009716:	f003 0306 	and.w	r3, r3, #6
 800971a:	2b04      	cmp	r3, #4
 800971c:	bf02      	ittt	eq
 800971e:	68e5      	ldreq	r5, [r4, #12]
 8009720:	6833      	ldreq	r3, [r6, #0]
 8009722:	1aed      	subeq	r5, r5, r3
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	bf0c      	ite	eq
 8009728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800972c:	2500      	movne	r5, #0
 800972e:	4293      	cmp	r3, r2
 8009730:	bfc4      	itt	gt
 8009732:	1a9b      	subgt	r3, r3, r2
 8009734:	18ed      	addgt	r5, r5, r3
 8009736:	2600      	movs	r6, #0
 8009738:	341a      	adds	r4, #26
 800973a:	42b5      	cmp	r5, r6
 800973c:	d11a      	bne.n	8009774 <_printf_common+0xc8>
 800973e:	2000      	movs	r0, #0
 8009740:	e008      	b.n	8009754 <_printf_common+0xa8>
 8009742:	2301      	movs	r3, #1
 8009744:	4652      	mov	r2, sl
 8009746:	4641      	mov	r1, r8
 8009748:	4638      	mov	r0, r7
 800974a:	47c8      	blx	r9
 800974c:	3001      	adds	r0, #1
 800974e:	d103      	bne.n	8009758 <_printf_common+0xac>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009758:	3501      	adds	r5, #1
 800975a:	e7c6      	b.n	80096ea <_printf_common+0x3e>
 800975c:	18e1      	adds	r1, r4, r3
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	2030      	movs	r0, #48	@ 0x30
 8009762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009766:	4422      	add	r2, r4
 8009768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800976c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009770:	3302      	adds	r3, #2
 8009772:	e7c7      	b.n	8009704 <_printf_common+0x58>
 8009774:	2301      	movs	r3, #1
 8009776:	4622      	mov	r2, r4
 8009778:	4641      	mov	r1, r8
 800977a:	4638      	mov	r0, r7
 800977c:	47c8      	blx	r9
 800977e:	3001      	adds	r0, #1
 8009780:	d0e6      	beq.n	8009750 <_printf_common+0xa4>
 8009782:	3601      	adds	r6, #1
 8009784:	e7d9      	b.n	800973a <_printf_common+0x8e>
	...

08009788 <_printf_i>:
 8009788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	7e0f      	ldrb	r7, [r1, #24]
 800978e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009790:	2f78      	cmp	r7, #120	@ 0x78
 8009792:	4691      	mov	r9, r2
 8009794:	4680      	mov	r8, r0
 8009796:	460c      	mov	r4, r1
 8009798:	469a      	mov	sl, r3
 800979a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800979e:	d807      	bhi.n	80097b0 <_printf_i+0x28>
 80097a0:	2f62      	cmp	r7, #98	@ 0x62
 80097a2:	d80a      	bhi.n	80097ba <_printf_i+0x32>
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	f000 80d2 	beq.w	800994e <_printf_i+0x1c6>
 80097aa:	2f58      	cmp	r7, #88	@ 0x58
 80097ac:	f000 80b9 	beq.w	8009922 <_printf_i+0x19a>
 80097b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097b8:	e03a      	b.n	8009830 <_printf_i+0xa8>
 80097ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097be:	2b15      	cmp	r3, #21
 80097c0:	d8f6      	bhi.n	80097b0 <_printf_i+0x28>
 80097c2:	a101      	add	r1, pc, #4	@ (adr r1, 80097c8 <_printf_i+0x40>)
 80097c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009835 	.word	0x08009835
 80097d0:	080097b1 	.word	0x080097b1
 80097d4:	080097b1 	.word	0x080097b1
 80097d8:	080097b1 	.word	0x080097b1
 80097dc:	080097b1 	.word	0x080097b1
 80097e0:	08009835 	.word	0x08009835
 80097e4:	080097b1 	.word	0x080097b1
 80097e8:	080097b1 	.word	0x080097b1
 80097ec:	080097b1 	.word	0x080097b1
 80097f0:	080097b1 	.word	0x080097b1
 80097f4:	08009935 	.word	0x08009935
 80097f8:	0800985f 	.word	0x0800985f
 80097fc:	080098ef 	.word	0x080098ef
 8009800:	080097b1 	.word	0x080097b1
 8009804:	080097b1 	.word	0x080097b1
 8009808:	08009957 	.word	0x08009957
 800980c:	080097b1 	.word	0x080097b1
 8009810:	0800985f 	.word	0x0800985f
 8009814:	080097b1 	.word	0x080097b1
 8009818:	080097b1 	.word	0x080097b1
 800981c:	080098f7 	.word	0x080098f7
 8009820:	6833      	ldr	r3, [r6, #0]
 8009822:	1d1a      	adds	r2, r3, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6032      	str	r2, [r6, #0]
 8009828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800982c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009830:	2301      	movs	r3, #1
 8009832:	e09d      	b.n	8009970 <_printf_i+0x1e8>
 8009834:	6833      	ldr	r3, [r6, #0]
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	1d19      	adds	r1, r3, #4
 800983a:	6031      	str	r1, [r6, #0]
 800983c:	0606      	lsls	r6, r0, #24
 800983e:	d501      	bpl.n	8009844 <_printf_i+0xbc>
 8009840:	681d      	ldr	r5, [r3, #0]
 8009842:	e003      	b.n	800984c <_printf_i+0xc4>
 8009844:	0645      	lsls	r5, r0, #25
 8009846:	d5fb      	bpl.n	8009840 <_printf_i+0xb8>
 8009848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800984c:	2d00      	cmp	r5, #0
 800984e:	da03      	bge.n	8009858 <_printf_i+0xd0>
 8009850:	232d      	movs	r3, #45	@ 0x2d
 8009852:	426d      	negs	r5, r5
 8009854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009858:	4859      	ldr	r0, [pc, #356]	@ (80099c0 <_printf_i+0x238>)
 800985a:	230a      	movs	r3, #10
 800985c:	e011      	b.n	8009882 <_printf_i+0xfa>
 800985e:	6821      	ldr	r1, [r4, #0]
 8009860:	6833      	ldr	r3, [r6, #0]
 8009862:	0608      	lsls	r0, r1, #24
 8009864:	f853 5b04 	ldr.w	r5, [r3], #4
 8009868:	d402      	bmi.n	8009870 <_printf_i+0xe8>
 800986a:	0649      	lsls	r1, r1, #25
 800986c:	bf48      	it	mi
 800986e:	b2ad      	uxthmi	r5, r5
 8009870:	2f6f      	cmp	r7, #111	@ 0x6f
 8009872:	4853      	ldr	r0, [pc, #332]	@ (80099c0 <_printf_i+0x238>)
 8009874:	6033      	str	r3, [r6, #0]
 8009876:	bf14      	ite	ne
 8009878:	230a      	movne	r3, #10
 800987a:	2308      	moveq	r3, #8
 800987c:	2100      	movs	r1, #0
 800987e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009882:	6866      	ldr	r6, [r4, #4]
 8009884:	60a6      	str	r6, [r4, #8]
 8009886:	2e00      	cmp	r6, #0
 8009888:	bfa2      	ittt	ge
 800988a:	6821      	ldrge	r1, [r4, #0]
 800988c:	f021 0104 	bicge.w	r1, r1, #4
 8009890:	6021      	strge	r1, [r4, #0]
 8009892:	b90d      	cbnz	r5, 8009898 <_printf_i+0x110>
 8009894:	2e00      	cmp	r6, #0
 8009896:	d04b      	beq.n	8009930 <_printf_i+0x1a8>
 8009898:	4616      	mov	r6, r2
 800989a:	fbb5 f1f3 	udiv	r1, r5, r3
 800989e:	fb03 5711 	mls	r7, r3, r1, r5
 80098a2:	5dc7      	ldrb	r7, [r0, r7]
 80098a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098a8:	462f      	mov	r7, r5
 80098aa:	42bb      	cmp	r3, r7
 80098ac:	460d      	mov	r5, r1
 80098ae:	d9f4      	bls.n	800989a <_printf_i+0x112>
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d10b      	bne.n	80098cc <_printf_i+0x144>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	07df      	lsls	r7, r3, #31
 80098b8:	d508      	bpl.n	80098cc <_printf_i+0x144>
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	6861      	ldr	r1, [r4, #4]
 80098be:	4299      	cmp	r1, r3
 80098c0:	bfde      	ittt	le
 80098c2:	2330      	movle	r3, #48	@ 0x30
 80098c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098cc:	1b92      	subs	r2, r2, r6
 80098ce:	6122      	str	r2, [r4, #16]
 80098d0:	f8cd a000 	str.w	sl, [sp]
 80098d4:	464b      	mov	r3, r9
 80098d6:	aa03      	add	r2, sp, #12
 80098d8:	4621      	mov	r1, r4
 80098da:	4640      	mov	r0, r8
 80098dc:	f7ff fee6 	bl	80096ac <_printf_common>
 80098e0:	3001      	adds	r0, #1
 80098e2:	d14a      	bne.n	800997a <_printf_i+0x1f2>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b004      	add	sp, #16
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	f043 0320 	orr.w	r3, r3, #32
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	4833      	ldr	r0, [pc, #204]	@ (80099c4 <_printf_i+0x23c>)
 80098f8:	2778      	movs	r7, #120	@ 0x78
 80098fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	6831      	ldr	r1, [r6, #0]
 8009902:	061f      	lsls	r7, r3, #24
 8009904:	f851 5b04 	ldr.w	r5, [r1], #4
 8009908:	d402      	bmi.n	8009910 <_printf_i+0x188>
 800990a:	065f      	lsls	r7, r3, #25
 800990c:	bf48      	it	mi
 800990e:	b2ad      	uxthmi	r5, r5
 8009910:	6031      	str	r1, [r6, #0]
 8009912:	07d9      	lsls	r1, r3, #31
 8009914:	bf44      	itt	mi
 8009916:	f043 0320 	orrmi.w	r3, r3, #32
 800991a:	6023      	strmi	r3, [r4, #0]
 800991c:	b11d      	cbz	r5, 8009926 <_printf_i+0x19e>
 800991e:	2310      	movs	r3, #16
 8009920:	e7ac      	b.n	800987c <_printf_i+0xf4>
 8009922:	4827      	ldr	r0, [pc, #156]	@ (80099c0 <_printf_i+0x238>)
 8009924:	e7e9      	b.n	80098fa <_printf_i+0x172>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	f023 0320 	bic.w	r3, r3, #32
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	e7f6      	b.n	800991e <_printf_i+0x196>
 8009930:	4616      	mov	r6, r2
 8009932:	e7bd      	b.n	80098b0 <_printf_i+0x128>
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	6825      	ldr	r5, [r4, #0]
 8009938:	6961      	ldr	r1, [r4, #20]
 800993a:	1d18      	adds	r0, r3, #4
 800993c:	6030      	str	r0, [r6, #0]
 800993e:	062e      	lsls	r6, r5, #24
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	d501      	bpl.n	8009948 <_printf_i+0x1c0>
 8009944:	6019      	str	r1, [r3, #0]
 8009946:	e002      	b.n	800994e <_printf_i+0x1c6>
 8009948:	0668      	lsls	r0, r5, #25
 800994a:	d5fb      	bpl.n	8009944 <_printf_i+0x1bc>
 800994c:	8019      	strh	r1, [r3, #0]
 800994e:	2300      	movs	r3, #0
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	4616      	mov	r6, r2
 8009954:	e7bc      	b.n	80098d0 <_printf_i+0x148>
 8009956:	6833      	ldr	r3, [r6, #0]
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	6032      	str	r2, [r6, #0]
 800995c:	681e      	ldr	r6, [r3, #0]
 800995e:	6862      	ldr	r2, [r4, #4]
 8009960:	2100      	movs	r1, #0
 8009962:	4630      	mov	r0, r6
 8009964:	f7f6 fc54 	bl	8000210 <memchr>
 8009968:	b108      	cbz	r0, 800996e <_printf_i+0x1e6>
 800996a:	1b80      	subs	r0, r0, r6
 800996c:	6060      	str	r0, [r4, #4]
 800996e:	6863      	ldr	r3, [r4, #4]
 8009970:	6123      	str	r3, [r4, #16]
 8009972:	2300      	movs	r3, #0
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009978:	e7aa      	b.n	80098d0 <_printf_i+0x148>
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	4632      	mov	r2, r6
 800997e:	4649      	mov	r1, r9
 8009980:	4640      	mov	r0, r8
 8009982:	47d0      	blx	sl
 8009984:	3001      	adds	r0, #1
 8009986:	d0ad      	beq.n	80098e4 <_printf_i+0x15c>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	079b      	lsls	r3, r3, #30
 800998c:	d413      	bmi.n	80099b6 <_printf_i+0x22e>
 800998e:	68e0      	ldr	r0, [r4, #12]
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	4298      	cmp	r0, r3
 8009994:	bfb8      	it	lt
 8009996:	4618      	movlt	r0, r3
 8009998:	e7a6      	b.n	80098e8 <_printf_i+0x160>
 800999a:	2301      	movs	r3, #1
 800999c:	4632      	mov	r2, r6
 800999e:	4649      	mov	r1, r9
 80099a0:	4640      	mov	r0, r8
 80099a2:	47d0      	blx	sl
 80099a4:	3001      	adds	r0, #1
 80099a6:	d09d      	beq.n	80098e4 <_printf_i+0x15c>
 80099a8:	3501      	adds	r5, #1
 80099aa:	68e3      	ldr	r3, [r4, #12]
 80099ac:	9903      	ldr	r1, [sp, #12]
 80099ae:	1a5b      	subs	r3, r3, r1
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	dcf2      	bgt.n	800999a <_printf_i+0x212>
 80099b4:	e7eb      	b.n	800998e <_printf_i+0x206>
 80099b6:	2500      	movs	r5, #0
 80099b8:	f104 0619 	add.w	r6, r4, #25
 80099bc:	e7f5      	b.n	80099aa <_printf_i+0x222>
 80099be:	bf00      	nop
 80099c0:	0800eeb2 	.word	0x0800eeb2
 80099c4:	0800eec3 	.word	0x0800eec3

080099c8 <_scanf_float>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	b087      	sub	sp, #28
 80099ce:	4617      	mov	r7, r2
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	688b      	ldr	r3, [r1, #8]
 80099d4:	1e5a      	subs	r2, r3, #1
 80099d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80099da:	bf81      	itttt	hi
 80099dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80099e0:	eb03 0b05 	addhi.w	fp, r3, r5
 80099e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80099e8:	608b      	strhi	r3, [r1, #8]
 80099ea:	680b      	ldr	r3, [r1, #0]
 80099ec:	460a      	mov	r2, r1
 80099ee:	f04f 0500 	mov.w	r5, #0
 80099f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80099f6:	f842 3b1c 	str.w	r3, [r2], #28
 80099fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80099fe:	4680      	mov	r8, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	bf98      	it	ls
 8009a04:	f04f 0b00 	movls.w	fp, #0
 8009a08:	9201      	str	r2, [sp, #4]
 8009a0a:	4616      	mov	r6, r2
 8009a0c:	46aa      	mov	sl, r5
 8009a0e:	46a9      	mov	r9, r5
 8009a10:	9502      	str	r5, [sp, #8]
 8009a12:	68a2      	ldr	r2, [r4, #8]
 8009a14:	b152      	cbz	r2, 8009a2c <_scanf_float+0x64>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009a1c:	d864      	bhi.n	8009ae8 <_scanf_float+0x120>
 8009a1e:	2b40      	cmp	r3, #64	@ 0x40
 8009a20:	d83c      	bhi.n	8009a9c <_scanf_float+0xd4>
 8009a22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009a26:	b2c8      	uxtb	r0, r1
 8009a28:	280e      	cmp	r0, #14
 8009a2a:	d93a      	bls.n	8009aa2 <_scanf_float+0xda>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d003      	beq.n	8009a3a <_scanf_float+0x72>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a3e:	f1ba 0f01 	cmp.w	sl, #1
 8009a42:	f200 8117 	bhi.w	8009c74 <_scanf_float+0x2ac>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	f200 8108 	bhi.w	8009c5e <_scanf_float+0x296>
 8009a4e:	2001      	movs	r0, #1
 8009a50:	b007      	add	sp, #28
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009a5a:	2a0d      	cmp	r2, #13
 8009a5c:	d8e6      	bhi.n	8009a2c <_scanf_float+0x64>
 8009a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8009a64 <_scanf_float+0x9c>)
 8009a60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a64:	08009bab 	.word	0x08009bab
 8009a68:	08009a2d 	.word	0x08009a2d
 8009a6c:	08009a2d 	.word	0x08009a2d
 8009a70:	08009a2d 	.word	0x08009a2d
 8009a74:	08009c0b 	.word	0x08009c0b
 8009a78:	08009be3 	.word	0x08009be3
 8009a7c:	08009a2d 	.word	0x08009a2d
 8009a80:	08009a2d 	.word	0x08009a2d
 8009a84:	08009bb9 	.word	0x08009bb9
 8009a88:	08009a2d 	.word	0x08009a2d
 8009a8c:	08009a2d 	.word	0x08009a2d
 8009a90:	08009a2d 	.word	0x08009a2d
 8009a94:	08009a2d 	.word	0x08009a2d
 8009a98:	08009b71 	.word	0x08009b71
 8009a9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009aa0:	e7db      	b.n	8009a5a <_scanf_float+0x92>
 8009aa2:	290e      	cmp	r1, #14
 8009aa4:	d8c2      	bhi.n	8009a2c <_scanf_float+0x64>
 8009aa6:	a001      	add	r0, pc, #4	@ (adr r0, 8009aac <_scanf_float+0xe4>)
 8009aa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009aac:	08009b61 	.word	0x08009b61
 8009ab0:	08009a2d 	.word	0x08009a2d
 8009ab4:	08009b61 	.word	0x08009b61
 8009ab8:	08009bf7 	.word	0x08009bf7
 8009abc:	08009a2d 	.word	0x08009a2d
 8009ac0:	08009b09 	.word	0x08009b09
 8009ac4:	08009b47 	.word	0x08009b47
 8009ac8:	08009b47 	.word	0x08009b47
 8009acc:	08009b47 	.word	0x08009b47
 8009ad0:	08009b47 	.word	0x08009b47
 8009ad4:	08009b47 	.word	0x08009b47
 8009ad8:	08009b47 	.word	0x08009b47
 8009adc:	08009b47 	.word	0x08009b47
 8009ae0:	08009b47 	.word	0x08009b47
 8009ae4:	08009b47 	.word	0x08009b47
 8009ae8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009aea:	d809      	bhi.n	8009b00 <_scanf_float+0x138>
 8009aec:	2b60      	cmp	r3, #96	@ 0x60
 8009aee:	d8b2      	bhi.n	8009a56 <_scanf_float+0x8e>
 8009af0:	2b54      	cmp	r3, #84	@ 0x54
 8009af2:	d07b      	beq.n	8009bec <_scanf_float+0x224>
 8009af4:	2b59      	cmp	r3, #89	@ 0x59
 8009af6:	d199      	bne.n	8009a2c <_scanf_float+0x64>
 8009af8:	2d07      	cmp	r5, #7
 8009afa:	d197      	bne.n	8009a2c <_scanf_float+0x64>
 8009afc:	2508      	movs	r5, #8
 8009afe:	e02c      	b.n	8009b5a <_scanf_float+0x192>
 8009b00:	2b74      	cmp	r3, #116	@ 0x74
 8009b02:	d073      	beq.n	8009bec <_scanf_float+0x224>
 8009b04:	2b79      	cmp	r3, #121	@ 0x79
 8009b06:	e7f6      	b.n	8009af6 <_scanf_float+0x12e>
 8009b08:	6821      	ldr	r1, [r4, #0]
 8009b0a:	05c8      	lsls	r0, r1, #23
 8009b0c:	d51b      	bpl.n	8009b46 <_scanf_float+0x17e>
 8009b0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009b12:	6021      	str	r1, [r4, #0]
 8009b14:	f109 0901 	add.w	r9, r9, #1
 8009b18:	f1bb 0f00 	cmp.w	fp, #0
 8009b1c:	d003      	beq.n	8009b26 <_scanf_float+0x15e>
 8009b1e:	3201      	adds	r2, #1
 8009b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b24:	60a2      	str	r2, [r4, #8]
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	60a3      	str	r3, [r4, #8]
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	f340 8087 	ble.w	8009c4c <_scanf_float+0x284>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	3301      	adds	r3, #1
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	e765      	b.n	8009a12 <_scanf_float+0x4a>
 8009b46:	eb1a 0105 	adds.w	r1, sl, r5
 8009b4a:	f47f af6f 	bne.w	8009a2c <_scanf_float+0x64>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009b54:	6022      	str	r2, [r4, #0]
 8009b56:	460d      	mov	r5, r1
 8009b58:	468a      	mov	sl, r1
 8009b5a:	f806 3b01 	strb.w	r3, [r6], #1
 8009b5e:	e7e2      	b.n	8009b26 <_scanf_float+0x15e>
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	0610      	lsls	r0, r2, #24
 8009b64:	f57f af62 	bpl.w	8009a2c <_scanf_float+0x64>
 8009b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	e7f4      	b.n	8009b5a <_scanf_float+0x192>
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	d10e      	bne.n	8009b94 <_scanf_float+0x1cc>
 8009b76:	f1b9 0f00 	cmp.w	r9, #0
 8009b7a:	d10e      	bne.n	8009b9a <_scanf_float+0x1d2>
 8009b7c:	6822      	ldr	r2, [r4, #0]
 8009b7e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009b82:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009b86:	d108      	bne.n	8009b9a <_scanf_float+0x1d2>
 8009b88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	f04f 0a01 	mov.w	sl, #1
 8009b92:	e7e2      	b.n	8009b5a <_scanf_float+0x192>
 8009b94:	f1ba 0f02 	cmp.w	sl, #2
 8009b98:	d055      	beq.n	8009c46 <_scanf_float+0x27e>
 8009b9a:	2d01      	cmp	r5, #1
 8009b9c:	d002      	beq.n	8009ba4 <_scanf_float+0x1dc>
 8009b9e:	2d04      	cmp	r5, #4
 8009ba0:	f47f af44 	bne.w	8009a2c <_scanf_float+0x64>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	b2ed      	uxtb	r5, r5
 8009ba8:	e7d7      	b.n	8009b5a <_scanf_float+0x192>
 8009baa:	f1ba 0f01 	cmp.w	sl, #1
 8009bae:	f47f af3d 	bne.w	8009a2c <_scanf_float+0x64>
 8009bb2:	f04f 0a02 	mov.w	sl, #2
 8009bb6:	e7d0      	b.n	8009b5a <_scanf_float+0x192>
 8009bb8:	b97d      	cbnz	r5, 8009bda <_scanf_float+0x212>
 8009bba:	f1b9 0f00 	cmp.w	r9, #0
 8009bbe:	f47f af38 	bne.w	8009a32 <_scanf_float+0x6a>
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009bc8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009bcc:	f040 8108 	bne.w	8009de0 <_scanf_float+0x418>
 8009bd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	2501      	movs	r5, #1
 8009bd8:	e7bf      	b.n	8009b5a <_scanf_float+0x192>
 8009bda:	2d03      	cmp	r5, #3
 8009bdc:	d0e2      	beq.n	8009ba4 <_scanf_float+0x1dc>
 8009bde:	2d05      	cmp	r5, #5
 8009be0:	e7de      	b.n	8009ba0 <_scanf_float+0x1d8>
 8009be2:	2d02      	cmp	r5, #2
 8009be4:	f47f af22 	bne.w	8009a2c <_scanf_float+0x64>
 8009be8:	2503      	movs	r5, #3
 8009bea:	e7b6      	b.n	8009b5a <_scanf_float+0x192>
 8009bec:	2d06      	cmp	r5, #6
 8009bee:	f47f af1d 	bne.w	8009a2c <_scanf_float+0x64>
 8009bf2:	2507      	movs	r5, #7
 8009bf4:	e7b1      	b.n	8009b5a <_scanf_float+0x192>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	0591      	lsls	r1, r2, #22
 8009bfa:	f57f af17 	bpl.w	8009a2c <_scanf_float+0x64>
 8009bfe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009c02:	6022      	str	r2, [r4, #0]
 8009c04:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c08:	e7a7      	b.n	8009b5a <_scanf_float+0x192>
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009c10:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009c14:	d006      	beq.n	8009c24 <_scanf_float+0x25c>
 8009c16:	0550      	lsls	r0, r2, #21
 8009c18:	f57f af08 	bpl.w	8009a2c <_scanf_float+0x64>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	f000 80de 	beq.w	8009de0 <_scanf_float+0x418>
 8009c24:	0591      	lsls	r1, r2, #22
 8009c26:	bf58      	it	pl
 8009c28:	9902      	ldrpl	r1, [sp, #8]
 8009c2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c2e:	bf58      	it	pl
 8009c30:	eba9 0101 	subpl.w	r1, r9, r1
 8009c34:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009c38:	bf58      	it	pl
 8009c3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	f04f 0900 	mov.w	r9, #0
 8009c44:	e789      	b.n	8009b5a <_scanf_float+0x192>
 8009c46:	f04f 0a03 	mov.w	sl, #3
 8009c4a:	e786      	b.n	8009b5a <_scanf_float+0x192>
 8009c4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009c50:	4639      	mov	r1, r7
 8009c52:	4640      	mov	r0, r8
 8009c54:	4798      	blx	r3
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f aedb 	beq.w	8009a12 <_scanf_float+0x4a>
 8009c5c:	e6e6      	b.n	8009a2c <_scanf_float+0x64>
 8009c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c66:	463a      	mov	r2, r7
 8009c68:	4640      	mov	r0, r8
 8009c6a:	4798      	blx	r3
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	6123      	str	r3, [r4, #16]
 8009c72:	e6e8      	b.n	8009a46 <_scanf_float+0x7e>
 8009c74:	1e6b      	subs	r3, r5, #1
 8009c76:	2b06      	cmp	r3, #6
 8009c78:	d824      	bhi.n	8009cc4 <_scanf_float+0x2fc>
 8009c7a:	2d02      	cmp	r5, #2
 8009c7c:	d836      	bhi.n	8009cec <_scanf_float+0x324>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	429e      	cmp	r6, r3
 8009c82:	f67f aee4 	bls.w	8009a4e <_scanf_float+0x86>
 8009c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c8e:	463a      	mov	r2, r7
 8009c90:	4640      	mov	r0, r8
 8009c92:	4798      	blx	r3
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	6123      	str	r3, [r4, #16]
 8009c9a:	e7f0      	b.n	8009c7e <_scanf_float+0x2b6>
 8009c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ca0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009ca4:	463a      	mov	r2, r7
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4798      	blx	r3
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cb4:	fa5f fa8a 	uxtb.w	sl, sl
 8009cb8:	f1ba 0f02 	cmp.w	sl, #2
 8009cbc:	d1ee      	bne.n	8009c9c <_scanf_float+0x2d4>
 8009cbe:	3d03      	subs	r5, #3
 8009cc0:	b2ed      	uxtb	r5, r5
 8009cc2:	1b76      	subs	r6, r6, r5
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	05da      	lsls	r2, r3, #23
 8009cc8:	d530      	bpl.n	8009d2c <_scanf_float+0x364>
 8009cca:	055b      	lsls	r3, r3, #21
 8009ccc:	d511      	bpl.n	8009cf2 <_scanf_float+0x32a>
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	429e      	cmp	r6, r3
 8009cd2:	f67f aebc 	bls.w	8009a4e <_scanf_float+0x86>
 8009cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cde:	463a      	mov	r2, r7
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4798      	blx	r3
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	e7f0      	b.n	8009cce <_scanf_float+0x306>
 8009cec:	46aa      	mov	sl, r5
 8009cee:	46b3      	mov	fp, r6
 8009cf0:	e7de      	b.n	8009cb0 <_scanf_float+0x2e8>
 8009cf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009cf6:	6923      	ldr	r3, [r4, #16]
 8009cf8:	2965      	cmp	r1, #101	@ 0x65
 8009cfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cfe:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	d00c      	beq.n	8009d20 <_scanf_float+0x358>
 8009d06:	2945      	cmp	r1, #69	@ 0x45
 8009d08:	d00a      	beq.n	8009d20 <_scanf_float+0x358>
 8009d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d0e:	463a      	mov	r2, r7
 8009d10:	4640      	mov	r0, r8
 8009d12:	4798      	blx	r3
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	1eb5      	subs	r5, r6, #2
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d24:	463a      	mov	r2, r7
 8009d26:	4640      	mov	r0, r8
 8009d28:	4798      	blx	r3
 8009d2a:	462e      	mov	r6, r5
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	f012 0210 	ands.w	r2, r2, #16
 8009d32:	d001      	beq.n	8009d38 <_scanf_float+0x370>
 8009d34:	2000      	movs	r0, #0
 8009d36:	e68b      	b.n	8009a50 <_scanf_float+0x88>
 8009d38:	7032      	strb	r2, [r6, #0]
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d44:	d11c      	bne.n	8009d80 <_scanf_float+0x3b8>
 8009d46:	9b02      	ldr	r3, [sp, #8]
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	eba3 0209 	sub.w	r2, r3, r9
 8009d4e:	d123      	bne.n	8009d98 <_scanf_float+0x3d0>
 8009d50:	9901      	ldr	r1, [sp, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	4640      	mov	r0, r8
 8009d56:	f002 fbf7 	bl	800c548 <_strtod_r>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	6821      	ldr	r1, [r4, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f011 0f02 	tst.w	r1, #2
 8009d64:	ec57 6b10 	vmov	r6, r7, d0
 8009d68:	f103 0204 	add.w	r2, r3, #4
 8009d6c:	d01f      	beq.n	8009dae <_scanf_float+0x3e6>
 8009d6e:	9903      	ldr	r1, [sp, #12]
 8009d70:	600a      	str	r2, [r1, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	e9c3 6700 	strd	r6, r7, [r3]
 8009d78:	68e3      	ldr	r3, [r4, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	60e3      	str	r3, [r4, #12]
 8009d7e:	e7d9      	b.n	8009d34 <_scanf_float+0x36c>
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0e4      	beq.n	8009d50 <_scanf_float+0x388>
 8009d86:	9905      	ldr	r1, [sp, #20]
 8009d88:	230a      	movs	r3, #10
 8009d8a:	3101      	adds	r1, #1
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	f002 fc5b 	bl	800c648 <_strtol_r>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	9e05      	ldr	r6, [sp, #20]
 8009d96:	1ac2      	subs	r2, r0, r3
 8009d98:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009d9c:	429e      	cmp	r6, r3
 8009d9e:	bf28      	it	cs
 8009da0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009da4:	4910      	ldr	r1, [pc, #64]	@ (8009de8 <_scanf_float+0x420>)
 8009da6:	4630      	mov	r0, r6
 8009da8:	f000 f8e4 	bl	8009f74 <siprintf>
 8009dac:	e7d0      	b.n	8009d50 <_scanf_float+0x388>
 8009dae:	f011 0f04 	tst.w	r1, #4
 8009db2:	9903      	ldr	r1, [sp, #12]
 8009db4:	600a      	str	r2, [r1, #0]
 8009db6:	d1dc      	bne.n	8009d72 <_scanf_float+0x3aa>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	4632      	mov	r2, r6
 8009dbc:	463b      	mov	r3, r7
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 fed3 	bl	8000b6c <__aeabi_dcmpun>
 8009dc6:	b128      	cbz	r0, 8009dd4 <_scanf_float+0x40c>
 8009dc8:	4808      	ldr	r0, [pc, #32]	@ (8009dec <_scanf_float+0x424>)
 8009dca:	f000 f9b7 	bl	800a13c <nanf>
 8009dce:	ed85 0a00 	vstr	s0, [r5]
 8009dd2:	e7d1      	b.n	8009d78 <_scanf_float+0x3b0>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 ff26 	bl	8000c28 <__aeabi_d2f>
 8009ddc:	6028      	str	r0, [r5, #0]
 8009dde:	e7cb      	b.n	8009d78 <_scanf_float+0x3b0>
 8009de0:	f04f 0900 	mov.w	r9, #0
 8009de4:	e629      	b.n	8009a3a <_scanf_float+0x72>
 8009de6:	bf00      	nop
 8009de8:	0800eed4 	.word	0x0800eed4
 8009dec:	0800f26d 	.word	0x0800f26d

08009df0 <std>:
 8009df0:	2300      	movs	r3, #0
 8009df2:	b510      	push	{r4, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dfe:	6083      	str	r3, [r0, #8]
 8009e00:	8181      	strh	r1, [r0, #12]
 8009e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e04:	81c2      	strh	r2, [r0, #14]
 8009e06:	6183      	str	r3, [r0, #24]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	305c      	adds	r0, #92	@ 0x5c
 8009e0e:	f000 f914 	bl	800a03a <memset>
 8009e12:	4b0d      	ldr	r3, [pc, #52]	@ (8009e48 <std+0x58>)
 8009e14:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e16:	4b0d      	ldr	r3, [pc, #52]	@ (8009e4c <std+0x5c>)
 8009e18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e50 <std+0x60>)
 8009e1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <std+0x64>)
 8009e20:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e22:	4b0d      	ldr	r3, [pc, #52]	@ (8009e58 <std+0x68>)
 8009e24:	6224      	str	r4, [r4, #32]
 8009e26:	429c      	cmp	r4, r3
 8009e28:	d006      	beq.n	8009e38 <std+0x48>
 8009e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e2e:	4294      	cmp	r4, r2
 8009e30:	d002      	beq.n	8009e38 <std+0x48>
 8009e32:	33d0      	adds	r3, #208	@ 0xd0
 8009e34:	429c      	cmp	r4, r3
 8009e36:	d105      	bne.n	8009e44 <std+0x54>
 8009e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e40:	f000 b978 	b.w	800a134 <__retarget_lock_init_recursive>
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	08009fb5 	.word	0x08009fb5
 8009e4c:	08009fd7 	.word	0x08009fd7
 8009e50:	0800a00f 	.word	0x0800a00f
 8009e54:	0800a033 	.word	0x0800a033
 8009e58:	200009d0 	.word	0x200009d0

08009e5c <stdio_exit_handler>:
 8009e5c:	4a02      	ldr	r2, [pc, #8]	@ (8009e68 <stdio_exit_handler+0xc>)
 8009e5e:	4903      	ldr	r1, [pc, #12]	@ (8009e6c <stdio_exit_handler+0x10>)
 8009e60:	4803      	ldr	r0, [pc, #12]	@ (8009e70 <stdio_exit_handler+0x14>)
 8009e62:	f000 b869 	b.w	8009f38 <_fwalk_sglue>
 8009e66:	bf00      	nop
 8009e68:	200000a8 	.word	0x200000a8
 8009e6c:	0800ca05 	.word	0x0800ca05
 8009e70:	200000b8 	.word	0x200000b8

08009e74 <cleanup_stdio>:
 8009e74:	6841      	ldr	r1, [r0, #4]
 8009e76:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea8 <cleanup_stdio+0x34>)
 8009e78:	4299      	cmp	r1, r3
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	d001      	beq.n	8009e84 <cleanup_stdio+0x10>
 8009e80:	f002 fdc0 	bl	800ca04 <_fflush_r>
 8009e84:	68a1      	ldr	r1, [r4, #8]
 8009e86:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <cleanup_stdio+0x38>)
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	d002      	beq.n	8009e92 <cleanup_stdio+0x1e>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f002 fdb9 	bl	800ca04 <_fflush_r>
 8009e92:	68e1      	ldr	r1, [r4, #12]
 8009e94:	4b06      	ldr	r3, [pc, #24]	@ (8009eb0 <cleanup_stdio+0x3c>)
 8009e96:	4299      	cmp	r1, r3
 8009e98:	d004      	beq.n	8009ea4 <cleanup_stdio+0x30>
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea0:	f002 bdb0 	b.w	800ca04 <_fflush_r>
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200009d0 	.word	0x200009d0
 8009eac:	20000a38 	.word	0x20000a38
 8009eb0:	20000aa0 	.word	0x20000aa0

08009eb4 <global_stdio_init.part.0>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <global_stdio_init.part.0+0x30>)
 8009eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8009ee8 <global_stdio_init.part.0+0x34>)
 8009eba:	4a0c      	ldr	r2, [pc, #48]	@ (8009eec <global_stdio_init.part.0+0x38>)
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	f7ff ff94 	bl	8009df0 <std>
 8009ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ecc:	2201      	movs	r2, #1
 8009ece:	2109      	movs	r1, #9
 8009ed0:	f7ff ff8e 	bl	8009df0 <std>
 8009ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ed8:	2202      	movs	r2, #2
 8009eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ede:	2112      	movs	r1, #18
 8009ee0:	f7ff bf86 	b.w	8009df0 <std>
 8009ee4:	20000b08 	.word	0x20000b08
 8009ee8:	200009d0 	.word	0x200009d0
 8009eec:	08009e5d 	.word	0x08009e5d

08009ef0 <__sfp_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	@ (8009ef8 <__sfp_lock_acquire+0x8>)
 8009ef2:	f000 b920 	b.w	800a136 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000b11 	.word	0x20000b11

08009efc <__sfp_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	@ (8009f04 <__sfp_lock_release+0x8>)
 8009efe:	f000 b91b 	b.w	800a138 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	20000b11 	.word	0x20000b11

08009f08 <__sinit>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	f7ff fff0 	bl	8009ef0 <__sfp_lock_acquire>
 8009f10:	6a23      	ldr	r3, [r4, #32]
 8009f12:	b11b      	cbz	r3, 8009f1c <__sinit+0x14>
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f7ff bff0 	b.w	8009efc <__sfp_lock_release>
 8009f1c:	4b04      	ldr	r3, [pc, #16]	@ (8009f30 <__sinit+0x28>)
 8009f1e:	6223      	str	r3, [r4, #32]
 8009f20:	4b04      	ldr	r3, [pc, #16]	@ (8009f34 <__sinit+0x2c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1f5      	bne.n	8009f14 <__sinit+0xc>
 8009f28:	f7ff ffc4 	bl	8009eb4 <global_stdio_init.part.0>
 8009f2c:	e7f2      	b.n	8009f14 <__sinit+0xc>
 8009f2e:	bf00      	nop
 8009f30:	08009e75 	.word	0x08009e75
 8009f34:	20000b08 	.word	0x20000b08

08009f38 <_fwalk_sglue>:
 8009f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	4688      	mov	r8, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	2600      	movs	r6, #0
 8009f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f48:	f1b9 0901 	subs.w	r9, r9, #1
 8009f4c:	d505      	bpl.n	8009f5a <_fwalk_sglue+0x22>
 8009f4e:	6824      	ldr	r4, [r4, #0]
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d1f7      	bne.n	8009f44 <_fwalk_sglue+0xc>
 8009f54:	4630      	mov	r0, r6
 8009f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d907      	bls.n	8009f70 <_fwalk_sglue+0x38>
 8009f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f64:	3301      	adds	r3, #1
 8009f66:	d003      	beq.n	8009f70 <_fwalk_sglue+0x38>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	47c0      	blx	r8
 8009f6e:	4306      	orrs	r6, r0
 8009f70:	3568      	adds	r5, #104	@ 0x68
 8009f72:	e7e9      	b.n	8009f48 <_fwalk_sglue+0x10>

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b500      	push	{lr}
 8009f78:	b09c      	sub	sp, #112	@ 0x70
 8009f7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	9006      	str	r0, [sp, #24]
 8009f80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f84:	4809      	ldr	r0, [pc, #36]	@ (8009fac <siprintf+0x38>)
 8009f86:	9107      	str	r1, [sp, #28]
 8009f88:	9104      	str	r1, [sp, #16]
 8009f8a:	4909      	ldr	r1, [pc, #36]	@ (8009fb0 <siprintf+0x3c>)
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	a902      	add	r1, sp, #8
 8009f98:	f002 fbb4 	bl	800c704 <_svfiprintf_r>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	b01c      	add	sp, #112	@ 0x70
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	200000b4 	.word	0x200000b4
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <__sread>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	f000 f86c 	bl	800a098 <_read_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc8:	181b      	addge	r3, r3, r0
 8009fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fce:	bfac      	ite	ge
 8009fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fd2:	81a3      	strhlt	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__swrite>:
 8009fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	461f      	mov	r7, r3
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	05db      	lsls	r3, r3, #23
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	d505      	bpl.n	8009ff4 <__swrite+0x1e>
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	2302      	movs	r3, #2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f000 f840 	bl	800a074 <_lseek_r>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	f000 b857 	b.w	800a0bc <_write_r>

0800a00e <__sseek>:
 800a00e:	b510      	push	{r4, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 f82d 	bl	800a074 <_lseek_r>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	bf15      	itete	ne
 800a020:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a02a:	81a3      	strheq	r3, [r4, #12]
 800a02c:	bf18      	it	ne
 800a02e:	81a3      	strhne	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__sclose>:
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 b80d 	b.w	800a054 <_close_r>

0800a03a <memset>:
 800a03a:	4402      	add	r2, r0
 800a03c:	4603      	mov	r3, r0
 800a03e:	4293      	cmp	r3, r2
 800a040:	d100      	bne.n	800a044 <memset+0xa>
 800a042:	4770      	bx	lr
 800a044:	f803 1b01 	strb.w	r1, [r3], #1
 800a048:	e7f9      	b.n	800a03e <memset+0x4>
	...

0800a04c <_localeconv_r>:
 800a04c:	4800      	ldr	r0, [pc, #0]	@ (800a050 <_localeconv_r+0x4>)
 800a04e:	4770      	bx	lr
 800a050:	200001f4 	.word	0x200001f4

0800a054 <_close_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d06      	ldr	r5, [pc, #24]	@ (800a070 <_close_r+0x1c>)
 800a058:	2300      	movs	r3, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	602b      	str	r3, [r5, #0]
 800a060:	f7f8 f93a 	bl	80022d8 <_close>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_close_r+0x1a>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_close_r+0x1a>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20000b0c 	.word	0x20000b0c

0800a074 <_lseek_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	@ (800a094 <_lseek_r+0x20>)
 800a078:	4604      	mov	r4, r0
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f7f8 f94f 	bl	8002326 <_lseek>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_lseek_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_lseek_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20000b0c 	.word	0x20000b0c

0800a098 <_read_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d07      	ldr	r5, [pc, #28]	@ (800a0b8 <_read_r+0x20>)
 800a09c:	4604      	mov	r4, r0
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	602a      	str	r2, [r5, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f7f8 f8dd 	bl	8002266 <_read>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_read_r+0x1e>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_read_r+0x1e>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20000b0c 	.word	0x20000b0c

0800a0bc <_write_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	@ (800a0dc <_write_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7f8 f8e8 	bl	80022a0 <_write>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_write_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_write_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000b0c 	.word	0x20000b0c

0800a0e0 <__errno>:
 800a0e0:	4b01      	ldr	r3, [pc, #4]	@ (800a0e8 <__errno+0x8>)
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	200000b4 	.word	0x200000b4

0800a0ec <__libc_init_array>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a124 <__libc_init_array+0x38>)
 800a0f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a128 <__libc_init_array+0x3c>)
 800a0f2:	1b64      	subs	r4, r4, r5
 800a0f4:	10a4      	asrs	r4, r4, #2
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	42a6      	cmp	r6, r4
 800a0fa:	d109      	bne.n	800a110 <__libc_init_array+0x24>
 800a0fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a12c <__libc_init_array+0x40>)
 800a0fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a130 <__libc_init_array+0x44>)
 800a100:	f004 faa8 	bl	800e654 <_init>
 800a104:	1b64      	subs	r4, r4, r5
 800a106:	10a4      	asrs	r4, r4, #2
 800a108:	2600      	movs	r6, #0
 800a10a:	42a6      	cmp	r6, r4
 800a10c:	d105      	bne.n	800a11a <__libc_init_array+0x2e>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	f855 3b04 	ldr.w	r3, [r5], #4
 800a114:	4798      	blx	r3
 800a116:	3601      	adds	r6, #1
 800a118:	e7ee      	b.n	800a0f8 <__libc_init_array+0xc>
 800a11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11e:	4798      	blx	r3
 800a120:	3601      	adds	r6, #1
 800a122:	e7f2      	b.n	800a10a <__libc_init_array+0x1e>
 800a124:	0800f360 	.word	0x0800f360
 800a128:	0800f360 	.word	0x0800f360
 800a12c:	0800f360 	.word	0x0800f360
 800a130:	0800f364 	.word	0x0800f364

0800a134 <__retarget_lock_init_recursive>:
 800a134:	4770      	bx	lr

0800a136 <__retarget_lock_acquire_recursive>:
 800a136:	4770      	bx	lr

0800a138 <__retarget_lock_release_recursive>:
 800a138:	4770      	bx	lr
	...

0800a13c <nanf>:
 800a13c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a144 <nanf+0x8>
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	7fc00000 	.word	0x7fc00000

0800a148 <quorem>:
 800a148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	6903      	ldr	r3, [r0, #16]
 800a14e:	690c      	ldr	r4, [r1, #16]
 800a150:	42a3      	cmp	r3, r4
 800a152:	4607      	mov	r7, r0
 800a154:	db7e      	blt.n	800a254 <quorem+0x10c>
 800a156:	3c01      	subs	r4, #1
 800a158:	f101 0814 	add.w	r8, r1, #20
 800a15c:	00a3      	lsls	r3, r4, #2
 800a15e:	f100 0514 	add.w	r5, r0, #20
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a16e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a172:	3301      	adds	r3, #1
 800a174:	429a      	cmp	r2, r3
 800a176:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a17a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a17e:	d32e      	bcc.n	800a1de <quorem+0x96>
 800a180:	f04f 0a00 	mov.w	sl, #0
 800a184:	46c4      	mov	ip, r8
 800a186:	46ae      	mov	lr, r5
 800a188:	46d3      	mov	fp, sl
 800a18a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a18e:	b298      	uxth	r0, r3
 800a190:	fb06 a000 	mla	r0, r6, r0, sl
 800a194:	0c02      	lsrs	r2, r0, #16
 800a196:	0c1b      	lsrs	r3, r3, #16
 800a198:	fb06 2303 	mla	r3, r6, r3, r2
 800a19c:	f8de 2000 	ldr.w	r2, [lr]
 800a1a0:	b280      	uxth	r0, r0
 800a1a2:	b292      	uxth	r2, r2
 800a1a4:	1a12      	subs	r2, r2, r0
 800a1a6:	445a      	add	r2, fp
 800a1a8:	f8de 0000 	ldr.w	r0, [lr]
 800a1ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1ba:	b292      	uxth	r2, r2
 800a1bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1c0:	45e1      	cmp	r9, ip
 800a1c2:	f84e 2b04 	str.w	r2, [lr], #4
 800a1c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1ca:	d2de      	bcs.n	800a18a <quorem+0x42>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	58eb      	ldr	r3, [r5, r3]
 800a1d0:	b92b      	cbnz	r3, 800a1de <quorem+0x96>
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	3b04      	subs	r3, #4
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	d32f      	bcc.n	800a23c <quorem+0xf4>
 800a1dc:	613c      	str	r4, [r7, #16]
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f001 f9c2 	bl	800b568 <__mcmp>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	db25      	blt.n	800a234 <quorem+0xec>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1f0:	f8d1 c000 	ldr.w	ip, [r1]
 800a1f4:	fa1f fe82 	uxth.w	lr, r2
 800a1f8:	fa1f f38c 	uxth.w	r3, ip
 800a1fc:	eba3 030e 	sub.w	r3, r3, lr
 800a200:	4403      	add	r3, r0
 800a202:	0c12      	lsrs	r2, r2, #16
 800a204:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a208:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a212:	45c1      	cmp	r9, r8
 800a214:	f841 3b04 	str.w	r3, [r1], #4
 800a218:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a21c:	d2e6      	bcs.n	800a1ec <quorem+0xa4>
 800a21e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a226:	b922      	cbnz	r2, 800a232 <quorem+0xea>
 800a228:	3b04      	subs	r3, #4
 800a22a:	429d      	cmp	r5, r3
 800a22c:	461a      	mov	r2, r3
 800a22e:	d30b      	bcc.n	800a248 <quorem+0x100>
 800a230:	613c      	str	r4, [r7, #16]
 800a232:	3601      	adds	r6, #1
 800a234:	4630      	mov	r0, r6
 800a236:	b003      	add	sp, #12
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	3b04      	subs	r3, #4
 800a240:	2a00      	cmp	r2, #0
 800a242:	d1cb      	bne.n	800a1dc <quorem+0x94>
 800a244:	3c01      	subs	r4, #1
 800a246:	e7c6      	b.n	800a1d6 <quorem+0x8e>
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	3b04      	subs	r3, #4
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	d1ef      	bne.n	800a230 <quorem+0xe8>
 800a250:	3c01      	subs	r4, #1
 800a252:	e7ea      	b.n	800a22a <quorem+0xe2>
 800a254:	2000      	movs	r0, #0
 800a256:	e7ee      	b.n	800a236 <quorem+0xee>

0800a258 <_dtoa_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	69c7      	ldr	r7, [r0, #28]
 800a25e:	b099      	sub	sp, #100	@ 0x64
 800a260:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a264:	ec55 4b10 	vmov	r4, r5, d0
 800a268:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a26a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a26c:	4683      	mov	fp, r0
 800a26e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a270:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a272:	b97f      	cbnz	r7, 800a294 <_dtoa_r+0x3c>
 800a274:	2010      	movs	r0, #16
 800a276:	f000 fdfd 	bl	800ae74 <malloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a280:	b920      	cbnz	r0, 800a28c <_dtoa_r+0x34>
 800a282:	4ba7      	ldr	r3, [pc, #668]	@ (800a520 <_dtoa_r+0x2c8>)
 800a284:	21ef      	movs	r1, #239	@ 0xef
 800a286:	48a7      	ldr	r0, [pc, #668]	@ (800a524 <_dtoa_r+0x2cc>)
 800a288:	f002 fc36 	bl	800caf8 <__assert_func>
 800a28c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a290:	6007      	str	r7, [r0, #0]
 800a292:	60c7      	str	r7, [r0, #12]
 800a294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	b159      	cbz	r1, 800a2b4 <_dtoa_r+0x5c>
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	604a      	str	r2, [r1, #4]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4093      	lsls	r3, r2
 800a2a4:	608b      	str	r3, [r1, #8]
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 feda 	bl	800b060 <_Bfree>
 800a2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	1e2b      	subs	r3, r5, #0
 800a2b6:	bfb9      	ittee	lt
 800a2b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2bc:	9303      	strlt	r3, [sp, #12]
 800a2be:	2300      	movge	r3, #0
 800a2c0:	6033      	strge	r3, [r6, #0]
 800a2c2:	9f03      	ldr	r7, [sp, #12]
 800a2c4:	4b98      	ldr	r3, [pc, #608]	@ (800a528 <_dtoa_r+0x2d0>)
 800a2c6:	bfbc      	itt	lt
 800a2c8:	2201      	movlt	r2, #1
 800a2ca:	6032      	strlt	r2, [r6, #0]
 800a2cc:	43bb      	bics	r3, r7
 800a2ce:	d112      	bne.n	800a2f6 <_dtoa_r+0x9e>
 800a2d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2dc:	4323      	orrs	r3, r4
 800a2de:	f000 854d 	beq.w	800ad7c <_dtoa_r+0xb24>
 800a2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a53c <_dtoa_r+0x2e4>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 854f 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a2ee:	f10a 0303 	add.w	r3, sl, #3
 800a2f2:	f000 bd49 	b.w	800ad88 <_dtoa_r+0xb30>
 800a2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	ec51 0b17 	vmov	r0, r1, d7
 800a300:	2300      	movs	r3, #0
 800a302:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a306:	f7f6 fbff 	bl	8000b08 <__aeabi_dcmpeq>
 800a30a:	4680      	mov	r8, r0
 800a30c:	b158      	cbz	r0, 800a326 <_dtoa_r+0xce>
 800a30e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a310:	2301      	movs	r3, #1
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a316:	b113      	cbz	r3, 800a31e <_dtoa_r+0xc6>
 800a318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a31a:	4b84      	ldr	r3, [pc, #528]	@ (800a52c <_dtoa_r+0x2d4>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a540 <_dtoa_r+0x2e8>
 800a322:	f000 bd33 	b.w	800ad8c <_dtoa_r+0xb34>
 800a326:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a32a:	aa16      	add	r2, sp, #88	@ 0x58
 800a32c:	a917      	add	r1, sp, #92	@ 0x5c
 800a32e:	4658      	mov	r0, fp
 800a330:	f001 fa3a 	bl	800b7a8 <__d2b>
 800a334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a338:	4681      	mov	r9, r0
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d077      	beq.n	800a42e <_dtoa_r+0x1d6>
 800a33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a340:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a34c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a358:	4619      	mov	r1, r3
 800a35a:	2200      	movs	r2, #0
 800a35c:	4b74      	ldr	r3, [pc, #464]	@ (800a530 <_dtoa_r+0x2d8>)
 800a35e:	f7f5 ffb3 	bl	80002c8 <__aeabi_dsub>
 800a362:	a369      	add	r3, pc, #420	@ (adr r3, 800a508 <_dtoa_r+0x2b0>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f966 	bl	8000638 <__aeabi_dmul>
 800a36c:	a368      	add	r3, pc, #416	@ (adr r3, 800a510 <_dtoa_r+0x2b8>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ffab 	bl	80002cc <__adddf3>
 800a376:	4604      	mov	r4, r0
 800a378:	4630      	mov	r0, r6
 800a37a:	460d      	mov	r5, r1
 800a37c:	f7f6 f8f2 	bl	8000564 <__aeabi_i2d>
 800a380:	a365      	add	r3, pc, #404	@ (adr r3, 800a518 <_dtoa_r+0x2c0>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f957 	bl	8000638 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff9b 	bl	80002cc <__adddf3>
 800a396:	4604      	mov	r4, r0
 800a398:	460d      	mov	r5, r1
 800a39a:	f7f6 fbfd 	bl	8000b98 <__aeabi_d2iz>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 fbb8 	bl	8000b1c <__aeabi_dcmplt>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7f6 f8d8 	bl	8000564 <__aeabi_i2d>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f6 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 800a3bc:	b900      	cbnz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3be:	3f01      	subs	r7, #1
 800a3c0:	2f16      	cmp	r7, #22
 800a3c2:	d851      	bhi.n	800a468 <_dtoa_r+0x210>
 800a3c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a534 <_dtoa_r+0x2dc>)
 800a3c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d2:	f7f6 fba3 	bl	8000b1c <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d048      	beq.n	800a46c <_dtoa_r+0x214>
 800a3da:	3f01      	subs	r7, #1
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3e2:	1b9b      	subs	r3, r3, r6
 800a3e4:	1e5a      	subs	r2, r3, #1
 800a3e6:	bf44      	itt	mi
 800a3e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a3ec:	2300      	movmi	r3, #0
 800a3ee:	9208      	str	r2, [sp, #32]
 800a3f0:	bf54      	ite	pl
 800a3f2:	f04f 0800 	movpl.w	r8, #0
 800a3f6:	9308      	strmi	r3, [sp, #32]
 800a3f8:	2f00      	cmp	r7, #0
 800a3fa:	db39      	blt.n	800a470 <_dtoa_r+0x218>
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a400:	443b      	add	r3, r7
 800a402:	9308      	str	r3, [sp, #32]
 800a404:	2300      	movs	r3, #0
 800a406:	930a      	str	r3, [sp, #40]	@ 0x28
 800a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40a:	2b09      	cmp	r3, #9
 800a40c:	d864      	bhi.n	800a4d8 <_dtoa_r+0x280>
 800a40e:	2b05      	cmp	r3, #5
 800a410:	bfc4      	itt	gt
 800a412:	3b04      	subgt	r3, #4
 800a414:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	f1a3 0302 	sub.w	r3, r3, #2
 800a41c:	bfcc      	ite	gt
 800a41e:	2400      	movgt	r4, #0
 800a420:	2401      	movle	r4, #1
 800a422:	2b03      	cmp	r3, #3
 800a424:	d863      	bhi.n	800a4ee <_dtoa_r+0x296>
 800a426:	e8df f003 	tbb	[pc, r3]
 800a42a:	372a      	.short	0x372a
 800a42c:	5535      	.short	0x5535
 800a42e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a432:	441e      	add	r6, r3
 800a434:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a438:	2b20      	cmp	r3, #32
 800a43a:	bfc1      	itttt	gt
 800a43c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a440:	409f      	lslgt	r7, r3
 800a442:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a446:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a44a:	bfd6      	itet	le
 800a44c:	f1c3 0320 	rsble	r3, r3, #32
 800a450:	ea47 0003 	orrgt.w	r0, r7, r3
 800a454:	fa04 f003 	lslle.w	r0, r4, r3
 800a458:	f7f6 f874 	bl	8000544 <__aeabi_ui2d>
 800a45c:	2201      	movs	r2, #1
 800a45e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a462:	3e01      	subs	r6, #1
 800a464:	9214      	str	r2, [sp, #80]	@ 0x50
 800a466:	e777      	b.n	800a358 <_dtoa_r+0x100>
 800a468:	2301      	movs	r3, #1
 800a46a:	e7b8      	b.n	800a3de <_dtoa_r+0x186>
 800a46c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a46e:	e7b7      	b.n	800a3e0 <_dtoa_r+0x188>
 800a470:	427b      	negs	r3, r7
 800a472:	930a      	str	r3, [sp, #40]	@ 0x28
 800a474:	2300      	movs	r3, #0
 800a476:	eba8 0807 	sub.w	r8, r8, r7
 800a47a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a47c:	e7c4      	b.n	800a408 <_dtoa_r+0x1b0>
 800a47e:	2300      	movs	r3, #0
 800a480:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc35      	bgt.n	800a4f4 <_dtoa_r+0x29c>
 800a488:	2301      	movs	r3, #1
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	461a      	mov	r2, r3
 800a490:	920e      	str	r2, [sp, #56]	@ 0x38
 800a492:	e00b      	b.n	800a4ac <_dtoa_r+0x254>
 800a494:	2301      	movs	r3, #1
 800a496:	e7f3      	b.n	800a480 <_dtoa_r+0x228>
 800a498:	2300      	movs	r3, #0
 800a49a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	bfb8      	it	lt
 800a4aa:	2301      	movlt	r3, #1
 800a4ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	f102 0514 	add.w	r5, r2, #20
 800a4b8:	429d      	cmp	r5, r3
 800a4ba:	d91f      	bls.n	800a4fc <_dtoa_r+0x2a4>
 800a4bc:	6041      	str	r1, [r0, #4]
 800a4be:	4658      	mov	r0, fp
 800a4c0:	f000 fd8e 	bl	800afe0 <_Balloc>
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d13c      	bne.n	800a544 <_dtoa_r+0x2ec>
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <_dtoa_r+0x2e0>)
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4d2:	e6d8      	b.n	800a286 <_dtoa_r+0x2e>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7e0      	b.n	800a49a <_dtoa_r+0x242>
 800a4d8:	2401      	movs	r4, #1
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2312      	movs	r3, #18
 800a4ec:	e7d0      	b.n	800a490 <_dtoa_r+0x238>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f2:	e7f5      	b.n	800a4e0 <_dtoa_r+0x288>
 800a4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	e7d7      	b.n	800a4ac <_dtoa_r+0x254>
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	0052      	lsls	r2, r2, #1
 800a500:	e7d8      	b.n	800a4b4 <_dtoa_r+0x25c>
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	636f4361 	.word	0x636f4361
 800a50c:	3fd287a7 	.word	0x3fd287a7
 800a510:	8b60c8b3 	.word	0x8b60c8b3
 800a514:	3fc68a28 	.word	0x3fc68a28
 800a518:	509f79fb 	.word	0x509f79fb
 800a51c:	3fd34413 	.word	0x3fd34413
 800a520:	0800eee6 	.word	0x0800eee6
 800a524:	0800eefd 	.word	0x0800eefd
 800a528:	7ff00000 	.word	0x7ff00000
 800a52c:	0800eeb1 	.word	0x0800eeb1
 800a530:	3ff80000 	.word	0x3ff80000
 800a534:	0800eff8 	.word	0x0800eff8
 800a538:	0800ef55 	.word	0x0800ef55
 800a53c:	0800eee2 	.word	0x0800eee2
 800a540:	0800eeb0 	.word	0x0800eeb0
 800a544:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a548:	6018      	str	r0, [r3, #0]
 800a54a:	9b07      	ldr	r3, [sp, #28]
 800a54c:	2b0e      	cmp	r3, #14
 800a54e:	f200 80a4 	bhi.w	800a69a <_dtoa_r+0x442>
 800a552:	2c00      	cmp	r4, #0
 800a554:	f000 80a1 	beq.w	800a69a <_dtoa_r+0x442>
 800a558:	2f00      	cmp	r7, #0
 800a55a:	dd33      	ble.n	800a5c4 <_dtoa_r+0x36c>
 800a55c:	4bad      	ldr	r3, [pc, #692]	@ (800a814 <_dtoa_r+0x5bc>)
 800a55e:	f007 020f 	and.w	r2, r7, #15
 800a562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a566:	ed93 7b00 	vldr	d7, [r3]
 800a56a:	05f8      	lsls	r0, r7, #23
 800a56c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a570:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a574:	d516      	bpl.n	800a5a4 <_dtoa_r+0x34c>
 800a576:	4ba8      	ldr	r3, [pc, #672]	@ (800a818 <_dtoa_r+0x5c0>)
 800a578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a57c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a580:	f7f6 f984 	bl	800088c <__aeabi_ddiv>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	f004 040f 	and.w	r4, r4, #15
 800a58c:	2603      	movs	r6, #3
 800a58e:	4da2      	ldr	r5, [pc, #648]	@ (800a818 <_dtoa_r+0x5c0>)
 800a590:	b954      	cbnz	r4, 800a5a8 <_dtoa_r+0x350>
 800a592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59a:	f7f6 f977 	bl	800088c <__aeabi_ddiv>
 800a59e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a2:	e028      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a5a4:	2602      	movs	r6, #2
 800a5a6:	e7f2      	b.n	800a58e <_dtoa_r+0x336>
 800a5a8:	07e1      	lsls	r1, r4, #31
 800a5aa:	d508      	bpl.n	800a5be <_dtoa_r+0x366>
 800a5ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b4:	f7f6 f840 	bl	8000638 <__aeabi_dmul>
 800a5b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5bc:	3601      	adds	r6, #1
 800a5be:	1064      	asrs	r4, r4, #1
 800a5c0:	3508      	adds	r5, #8
 800a5c2:	e7e5      	b.n	800a590 <_dtoa_r+0x338>
 800a5c4:	f000 80d2 	beq.w	800a76c <_dtoa_r+0x514>
 800a5c8:	427c      	negs	r4, r7
 800a5ca:	4b92      	ldr	r3, [pc, #584]	@ (800a814 <_dtoa_r+0x5bc>)
 800a5cc:	4d92      	ldr	r5, [pc, #584]	@ (800a818 <_dtoa_r+0x5c0>)
 800a5ce:	f004 020f 	and.w	r2, r4, #15
 800a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5de:	f7f6 f82b 	bl	8000638 <__aeabi_dmul>
 800a5e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e6:	1124      	asrs	r4, r4, #4
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	2602      	movs	r6, #2
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	f040 80b2 	bne.w	800a756 <_dtoa_r+0x4fe>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1d3      	bne.n	800a59e <_dtoa_r+0x346>
 800a5f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80b7 	beq.w	800a770 <_dtoa_r+0x518>
 800a602:	4b86      	ldr	r3, [pc, #536]	@ (800a81c <_dtoa_r+0x5c4>)
 800a604:	2200      	movs	r2, #0
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 fa87 	bl	8000b1c <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f000 80ae 	beq.w	800a770 <_dtoa_r+0x518>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80aa 	beq.w	800a770 <_dtoa_r+0x518>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd37      	ble.n	800a692 <_dtoa_r+0x43a>
 800a622:	1e7b      	subs	r3, r7, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	4620      	mov	r0, r4
 800a628:	4b7d      	ldr	r3, [pc, #500]	@ (800a820 <_dtoa_r+0x5c8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f6 f803 	bl	8000638 <__aeabi_dmul>
 800a632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a636:	9c00      	ldr	r4, [sp, #0]
 800a638:	3601      	adds	r6, #1
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7f5 ff92 	bl	8000564 <__aeabi_i2d>
 800a640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	4b76      	ldr	r3, [pc, #472]	@ (800a824 <_dtoa_r+0x5cc>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fe3e 	bl	80002cc <__adddf3>
 800a650:	4605      	mov	r5, r0
 800a652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a656:	2c00      	cmp	r4, #0
 800a658:	f040 808d 	bne.w	800a776 <_dtoa_r+0x51e>
 800a65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a660:	4b71      	ldr	r3, [pc, #452]	@ (800a828 <_dtoa_r+0x5d0>)
 800a662:	2200      	movs	r2, #0
 800a664:	f7f5 fe30 	bl	80002c8 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a670:	462a      	mov	r2, r5
 800a672:	4633      	mov	r3, r6
 800a674:	f7f6 fa70 	bl	8000b58 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 828b 	bne.w	800ab94 <_dtoa_r+0x93c>
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	462a      	mov	r2, r5
 800a684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a688:	f7f6 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8128 	bne.w	800a8e2 <_dtoa_r+0x68a>
 800a692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a69a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f2c0 815a 	blt.w	800a956 <_dtoa_r+0x6fe>
 800a6a2:	2f0e      	cmp	r7, #14
 800a6a4:	f300 8157 	bgt.w	800a956 <_dtoa_r+0x6fe>
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <_dtoa_r+0x5bc>)
 800a6aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6ae:	ed93 7b00 	vldr	d7, [r3]
 800a6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	ed8d 7b00 	vstr	d7, [sp]
 800a6ba:	da03      	bge.n	800a6c4 <_dtoa_r+0x46c>
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f340 8101 	ble.w	800a8c6 <_dtoa_r+0x66e>
 800a6c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6c8:	4656      	mov	r6, sl
 800a6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7f6 f8db 	bl	800088c <__aeabi_ddiv>
 800a6d6:	f7f6 fa5f 	bl	8000b98 <__aeabi_d2iz>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	f7f5 ff42 	bl	8000564 <__aeabi_i2d>
 800a6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e4:	f7f5 ffa8 	bl	8000638 <__aeabi_dmul>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a6f4:	f7f5 fde8 	bl	80002c8 <__aeabi_dsub>
 800a6f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a6fc:	9d07      	ldr	r5, [sp, #28]
 800a6fe:	eba6 040a 	sub.w	r4, r6, sl
 800a702:	42a5      	cmp	r5, r4
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	f040 8117 	bne.w	800a93a <_dtoa_r+0x6e2>
 800a70c:	f7f5 fdde 	bl	80002cc <__adddf3>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	f7f6 fa1e 	bl	8000b58 <__aeabi_dcmpgt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 80f9 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 800a72e:	b118      	cbz	r0, 800a738 <_dtoa_r+0x4e0>
 800a730:	f018 0f01 	tst.w	r8, #1
 800a734:	f040 80ee 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a738:	4649      	mov	r1, r9
 800a73a:	4658      	mov	r0, fp
 800a73c:	f000 fc90 	bl	800b060 <_Bfree>
 800a740:	2300      	movs	r3, #0
 800a742:	7033      	strb	r3, [r6, #0]
 800a744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a746:	3701      	adds	r7, #1
 800a748:	601f      	str	r7, [r3, #0]
 800a74a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 831d 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a752:	601e      	str	r6, [r3, #0]
 800a754:	e31a      	b.n	800ad8c <_dtoa_r+0xb34>
 800a756:	07e2      	lsls	r2, r4, #31
 800a758:	d505      	bpl.n	800a766 <_dtoa_r+0x50e>
 800a75a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a75e:	f7f5 ff6b 	bl	8000638 <__aeabi_dmul>
 800a762:	3601      	adds	r6, #1
 800a764:	2301      	movs	r3, #1
 800a766:	1064      	asrs	r4, r4, #1
 800a768:	3508      	adds	r5, #8
 800a76a:	e73f      	b.n	800a5ec <_dtoa_r+0x394>
 800a76c:	2602      	movs	r6, #2
 800a76e:	e742      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a770:	9c07      	ldr	r4, [sp, #28]
 800a772:	9704      	str	r7, [sp, #16]
 800a774:	e761      	b.n	800a63a <_dtoa_r+0x3e2>
 800a776:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <_dtoa_r+0x5bc>)
 800a778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a77a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a77e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a782:	4454      	add	r4, sl
 800a784:	2900      	cmp	r1, #0
 800a786:	d053      	beq.n	800a830 <_dtoa_r+0x5d8>
 800a788:	4928      	ldr	r1, [pc, #160]	@ (800a82c <_dtoa_r+0x5d4>)
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7f6 f87e 	bl	800088c <__aeabi_ddiv>
 800a790:	4633      	mov	r3, r6
 800a792:	462a      	mov	r2, r5
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a79c:	4656      	mov	r6, sl
 800a79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a2:	f7f6 f9f9 	bl	8000b98 <__aeabi_d2iz>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	f7f5 fedc 	bl	8000564 <__aeabi_i2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b4:	f7f5 fd88 	bl	80002c8 <__aeabi_dsub>
 800a7b8:	3530      	adds	r5, #48	@ 0x30
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a7c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ca:	f7f6 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d171      	bne.n	800a8b6 <_dtoa_r+0x65e>
 800a7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d6:	4911      	ldr	r1, [pc, #68]	@ (800a81c <_dtoa_r+0x5c4>)
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f7f5 fd75 	bl	80002c8 <__aeabi_dsub>
 800a7de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7e2:	f7f6 f99b 	bl	8000b1c <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 8095 	bne.w	800a916 <_dtoa_r+0x6be>
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	f43f af50 	beq.w	800a692 <_dtoa_r+0x43a>
 800a7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a820 <_dtoa_r+0x5c8>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff1d 	bl	8000638 <__aeabi_dmul>
 800a7fe:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <_dtoa_r+0x5c8>)
 800a800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a804:	2200      	movs	r2, #0
 800a806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80a:	f7f5 ff15 	bl	8000638 <__aeabi_dmul>
 800a80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a812:	e7c4      	b.n	800a79e <_dtoa_r+0x546>
 800a814:	0800eff8 	.word	0x0800eff8
 800a818:	0800efd0 	.word	0x0800efd0
 800a81c:	3ff00000 	.word	0x3ff00000
 800a820:	40240000 	.word	0x40240000
 800a824:	401c0000 	.word	0x401c0000
 800a828:	40140000 	.word	0x40140000
 800a82c:	3fe00000 	.word	0x3fe00000
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	f7f5 ff00 	bl	8000638 <__aeabi_dmul>
 800a838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a83c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a83e:	4656      	mov	r6, sl
 800a840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a844:	f7f6 f9a8 	bl	8000b98 <__aeabi_d2iz>
 800a848:	4605      	mov	r5, r0
 800a84a:	f7f5 fe8b 	bl	8000564 <__aeabi_i2d>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a856:	f7f5 fd37 	bl	80002c8 <__aeabi_dsub>
 800a85a:	3530      	adds	r5, #48	@ 0x30
 800a85c:	f806 5b01 	strb.w	r5, [r6], #1
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	42a6      	cmp	r6, r4
 800a866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	d124      	bne.n	800a8ba <_dtoa_r+0x662>
 800a870:	4bac      	ldr	r3, [pc, #688]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a876:	f7f5 fd29 	bl	80002cc <__adddf3>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a882:	f7f6 f969 	bl	8000b58 <__aeabi_dcmpgt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d145      	bne.n	800a916 <_dtoa_r+0x6be>
 800a88a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a88e:	49a5      	ldr	r1, [pc, #660]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a890:	2000      	movs	r0, #0
 800a892:	f7f5 fd19 	bl	80002c8 <__aeabi_dsub>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89e:	f7f6 f93d 	bl	8000b1c <__aeabi_dcmplt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f43f aef5 	beq.w	800a692 <_dtoa_r+0x43a>
 800a8a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8aa:	1e73      	subs	r3, r6, #1
 800a8ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8b2:	2b30      	cmp	r3, #48	@ 0x30
 800a8b4:	d0f8      	beq.n	800a8a8 <_dtoa_r+0x650>
 800a8b6:	9f04      	ldr	r7, [sp, #16]
 800a8b8:	e73e      	b.n	800a738 <_dtoa_r+0x4e0>
 800a8ba:	4b9b      	ldr	r3, [pc, #620]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a8bc:	f7f5 febc 	bl	8000638 <__aeabi_dmul>
 800a8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8c4:	e7bc      	b.n	800a840 <_dtoa_r+0x5e8>
 800a8c6:	d10c      	bne.n	800a8e2 <_dtoa_r+0x68a>
 800a8c8:	4b98      	ldr	r3, [pc, #608]	@ (800ab2c <_dtoa_r+0x8d4>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d0:	f7f5 feb2 	bl	8000638 <__aeabi_dmul>
 800a8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d8:	f7f6 f934 	bl	8000b44 <__aeabi_dcmpge>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f000 8157 	beq.w	800ab90 <_dtoa_r+0x938>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e8:	43db      	mvns	r3, r3
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	4656      	mov	r6, sl
 800a8ee:	2700      	movs	r7, #0
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fbb4 	bl	800b060 <_Bfree>
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	d0dc      	beq.n	800a8b6 <_dtoa_r+0x65e>
 800a8fc:	b12f      	cbz	r7, 800a90a <_dtoa_r+0x6b2>
 800a8fe:	42af      	cmp	r7, r5
 800a900:	d003      	beq.n	800a90a <_dtoa_r+0x6b2>
 800a902:	4639      	mov	r1, r7
 800a904:	4658      	mov	r0, fp
 800a906:	f000 fbab 	bl	800b060 <_Bfree>
 800a90a:	4629      	mov	r1, r5
 800a90c:	4658      	mov	r0, fp
 800a90e:	f000 fba7 	bl	800b060 <_Bfree>
 800a912:	e7d0      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a914:	9704      	str	r7, [sp, #16]
 800a916:	4633      	mov	r3, r6
 800a918:	461e      	mov	r6, r3
 800a91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91e:	2a39      	cmp	r2, #57	@ 0x39
 800a920:	d107      	bne.n	800a932 <_dtoa_r+0x6da>
 800a922:	459a      	cmp	sl, r3
 800a924:	d1f8      	bne.n	800a918 <_dtoa_r+0x6c0>
 800a926:	9a04      	ldr	r2, [sp, #16]
 800a928:	3201      	adds	r2, #1
 800a92a:	9204      	str	r2, [sp, #16]
 800a92c:	2230      	movs	r2, #48	@ 0x30
 800a92e:	f88a 2000 	strb.w	r2, [sl]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	3201      	adds	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e7bd      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a93a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fe7b 	bl	8000638 <__aeabi_dmul>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	f7f6 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f aebb 	beq.w	800a6ca <_dtoa_r+0x472>
 800a954:	e6f0      	b.n	800a738 <_dtoa_r+0x4e0>
 800a956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a958:	2a00      	cmp	r2, #0
 800a95a:	f000 80db 	beq.w	800ab14 <_dtoa_r+0x8bc>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	2a01      	cmp	r2, #1
 800a962:	f300 80bf 	bgt.w	800aae4 <_dtoa_r+0x88c>
 800a966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a968:	2a00      	cmp	r2, #0
 800a96a:	f000 80b7 	beq.w	800aadc <_dtoa_r+0x884>
 800a96e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a974:	4646      	mov	r6, r8
 800a976:	9a08      	ldr	r2, [sp, #32]
 800a978:	2101      	movs	r1, #1
 800a97a:	441a      	add	r2, r3
 800a97c:	4658      	mov	r0, fp
 800a97e:	4498      	add	r8, r3
 800a980:	9208      	str	r2, [sp, #32]
 800a982:	f000 fc6b 	bl	800b25c <__i2b>
 800a986:	4605      	mov	r5, r0
 800a988:	b15e      	cbz	r6, 800a9a2 <_dtoa_r+0x74a>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd08      	ble.n	800a9a2 <_dtoa_r+0x74a>
 800a990:	42b3      	cmp	r3, r6
 800a992:	9a08      	ldr	r2, [sp, #32]
 800a994:	bfa8      	it	ge
 800a996:	4633      	movge	r3, r6
 800a998:	eba8 0803 	sub.w	r8, r8, r3
 800a99c:	1af6      	subs	r6, r6, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a4:	b1f3      	cbz	r3, 800a9e4 <_dtoa_r+0x78c>
 800a9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 80b7 	beq.w	800ab1c <_dtoa_r+0x8c4>
 800a9ae:	b18c      	cbz	r4, 800a9d4 <_dtoa_r+0x77c>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	f000 fd11 	bl	800b3dc <__pow5mult>
 800a9ba:	464a      	mov	r2, r9
 800a9bc:	4601      	mov	r1, r0
 800a9be:	4605      	mov	r5, r0
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	f000 fc61 	bl	800b288 <__multiply>
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	9004      	str	r0, [sp, #16]
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	f000 fb48 	bl	800b060 <_Bfree>
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	4699      	mov	r9, r3
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d6:	1b1a      	subs	r2, r3, r4
 800a9d8:	d004      	beq.n	800a9e4 <_dtoa_r+0x78c>
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4658      	mov	r0, fp
 800a9de:	f000 fcfd 	bl	800b3dc <__pow5mult>
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 fc38 	bl	800b25c <__i2b>
 800a9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 81cf 	beq.w	800ad94 <_dtoa_r+0xb3c>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fcee 	bl	800b3dc <__pow5mult>
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	4604      	mov	r4, r0
 800aa06:	f300 8095 	bgt.w	800ab34 <_dtoa_r+0x8dc>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8087 	bne.w	800ab20 <_dtoa_r+0x8c8>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 8089 	bne.w	800ab30 <_dtoa_r+0x8d8>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa24:	0d1b      	lsrs	r3, r3, #20
 800aa26:	051b      	lsls	r3, r3, #20
 800aa28:	b12b      	cbz	r3, 800aa36 <_dtoa_r+0x7de>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	9308      	str	r3, [sp, #32]
 800aa30:	f108 0801 	add.w	r8, r8, #1
 800aa34:	2301      	movs	r3, #1
 800aa36:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 81b0 	beq.w	800ada0 <_dtoa_r+0xb48>
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa46:	6918      	ldr	r0, [r3, #16]
 800aa48:	f000 fbbc 	bl	800b1c4 <__hi0bits>
 800aa4c:	f1c0 0020 	rsb	r0, r0, #32
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	4418      	add	r0, r3
 800aa54:	f010 001f 	ands.w	r0, r0, #31
 800aa58:	d077      	beq.n	800ab4a <_dtoa_r+0x8f2>
 800aa5a:	f1c0 0320 	rsb	r3, r0, #32
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	dd6b      	ble.n	800ab3a <_dtoa_r+0x8e2>
 800aa62:	9b08      	ldr	r3, [sp, #32]
 800aa64:	f1c0 001c 	rsb	r0, r0, #28
 800aa68:	4403      	add	r3, r0
 800aa6a:	4480      	add	r8, r0
 800aa6c:	4406      	add	r6, r0
 800aa6e:	9308      	str	r3, [sp, #32]
 800aa70:	f1b8 0f00 	cmp.w	r8, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x82a>
 800aa76:	4649      	mov	r1, r9
 800aa78:	4642      	mov	r2, r8
 800aa7a:	4658      	mov	r0, fp
 800aa7c:	f000 fd08 	bl	800b490 <__lshift>
 800aa80:	4681      	mov	r9, r0
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd05      	ble.n	800aa94 <_dtoa_r+0x83c>
 800aa88:	4621      	mov	r1, r4
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4658      	mov	r0, fp
 800aa8e:	f000 fcff 	bl	800b490 <__lshift>
 800aa92:	4604      	mov	r4, r0
 800aa94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d059      	beq.n	800ab4e <_dtoa_r+0x8f6>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f000 fd63 	bl	800b568 <__mcmp>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	da53      	bge.n	800ab4e <_dtoa_r+0x8f6>
 800aaa6:	1e7b      	subs	r3, r7, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	4649      	mov	r1, r9
 800aaac:	2300      	movs	r3, #0
 800aaae:	220a      	movs	r2, #10
 800aab0:	4658      	mov	r0, fp
 800aab2:	f000 faf7 	bl	800b0a4 <__multadd>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab8:	4681      	mov	r9, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 8172 	beq.w	800ada4 <_dtoa_r+0xb4c>
 800aac0:	2300      	movs	r3, #0
 800aac2:	4629      	mov	r1, r5
 800aac4:	220a      	movs	r2, #10
 800aac6:	4658      	mov	r0, fp
 800aac8:	f000 faec 	bl	800b0a4 <__multadd>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	4605      	mov	r5, r0
 800aad2:	dc67      	bgt.n	800aba4 <_dtoa_r+0x94c>
 800aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	dc41      	bgt.n	800ab5e <_dtoa_r+0x906>
 800aada:	e063      	b.n	800aba4 <_dtoa_r+0x94c>
 800aadc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aae2:	e746      	b.n	800a972 <_dtoa_r+0x71a>
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	1e5c      	subs	r4, r3, #1
 800aae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	bfbf      	itttt	lt
 800aaee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aaf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aaf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aaf4:	1ae3      	sublt	r3, r4, r3
 800aaf6:	bfb4      	ite	lt
 800aaf8:	18d2      	addlt	r2, r2, r3
 800aafa:	1b1c      	subge	r4, r3, r4
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	bfbc      	itt	lt
 800ab00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab02:	2400      	movlt	r4, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfb5      	itete	lt
 800ab08:	eba8 0603 	sublt.w	r6, r8, r3
 800ab0c:	9b07      	ldrge	r3, [sp, #28]
 800ab0e:	2300      	movlt	r3, #0
 800ab10:	4646      	movge	r6, r8
 800ab12:	e730      	b.n	800a976 <_dtoa_r+0x71e>
 800ab14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab18:	4646      	mov	r6, r8
 800ab1a:	e735      	b.n	800a988 <_dtoa_r+0x730>
 800ab1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab1e:	e75c      	b.n	800a9da <_dtoa_r+0x782>
 800ab20:	2300      	movs	r3, #0
 800ab22:	e788      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	40140000 	.word	0x40140000
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	e780      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab34:	2300      	movs	r3, #0
 800ab36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab38:	e782      	b.n	800aa40 <_dtoa_r+0x7e8>
 800ab3a:	d099      	beq.n	800aa70 <_dtoa_r+0x818>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	331c      	adds	r3, #28
 800ab40:	441a      	add	r2, r3
 800ab42:	4498      	add	r8, r3
 800ab44:	441e      	add	r6, r3
 800ab46:	9208      	str	r2, [sp, #32]
 800ab48:	e792      	b.n	800aa70 <_dtoa_r+0x818>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	e7f6      	b.n	800ab3c <_dtoa_r+0x8e4>
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	9704      	str	r7, [sp, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc20      	bgt.n	800ab98 <_dtoa_r+0x940>
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	dd1e      	ble.n	800ab9c <_dtoa_r+0x944>
 800ab5e:	9b00      	ldr	r3, [sp, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f aec0 	bne.w	800a8e6 <_dtoa_r+0x68e>
 800ab66:	4621      	mov	r1, r4
 800ab68:	2205      	movs	r2, #5
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 fa9a 	bl	800b0a4 <__multadd>
 800ab70:	4601      	mov	r1, r0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fcf7 	bl	800b568 <__mcmp>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f77f aeb3 	ble.w	800a8e6 <_dtoa_r+0x68e>
 800ab80:	4656      	mov	r6, sl
 800ab82:	2331      	movs	r3, #49	@ 0x31
 800ab84:	f806 3b01 	strb.w	r3, [r6], #1
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	e6ae      	b.n	800a8ee <_dtoa_r+0x696>
 800ab90:	9c07      	ldr	r4, [sp, #28]
 800ab92:	9704      	str	r7, [sp, #16]
 800ab94:	4625      	mov	r5, r4
 800ab96:	e7f3      	b.n	800ab80 <_dtoa_r+0x928>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8104 	beq.w	800adac <_dtoa_r+0xb54>
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	dd05      	ble.n	800abb4 <_dtoa_r+0x95c>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4632      	mov	r2, r6
 800abac:	4658      	mov	r0, fp
 800abae:	f000 fc6f 	bl	800b490 <__lshift>
 800abb2:	4605      	mov	r5, r0
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d05a      	beq.n	800ac70 <_dtoa_r+0xa18>
 800abba:	6869      	ldr	r1, [r5, #4]
 800abbc:	4658      	mov	r0, fp
 800abbe:	f000 fa0f 	bl	800afe0 <_Balloc>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b928      	cbnz	r0, 800abd2 <_dtoa_r+0x97a>
 800abc6:	4b84      	ldr	r3, [pc, #528]	@ (800add8 <_dtoa_r+0xb80>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abce:	f7ff bb5a 	b.w	800a286 <_dtoa_r+0x2e>
 800abd2:	692a      	ldr	r2, [r5, #16]
 800abd4:	3202      	adds	r2, #2
 800abd6:	0092      	lsls	r2, r2, #2
 800abd8:	f105 010c 	add.w	r1, r5, #12
 800abdc:	300c      	adds	r0, #12
 800abde:	f001 ff75 	bl	800cacc <memcpy>
 800abe2:	2201      	movs	r2, #1
 800abe4:	4631      	mov	r1, r6
 800abe6:	4658      	mov	r0, fp
 800abe8:	f000 fc52 	bl	800b490 <__lshift>
 800abec:	f10a 0301 	add.w	r3, sl, #1
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	4453      	add	r3, sl
 800abf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	462f      	mov	r7, r5
 800ac00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac02:	4605      	mov	r5, r0
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	4621      	mov	r1, r4
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f7ff fa9b 	bl	800a148 <quorem>
 800ac12:	4639      	mov	r1, r7
 800ac14:	9002      	str	r0, [sp, #8]
 800ac16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac1a:	4648      	mov	r0, r9
 800ac1c:	f000 fca4 	bl	800b568 <__mcmp>
 800ac20:	462a      	mov	r2, r5
 800ac22:	9008      	str	r0, [sp, #32]
 800ac24:	4621      	mov	r1, r4
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 fcba 	bl	800b5a0 <__mdiff>
 800ac2c:	68c2      	ldr	r2, [r0, #12]
 800ac2e:	4606      	mov	r6, r0
 800ac30:	bb02      	cbnz	r2, 800ac74 <_dtoa_r+0xa1c>
 800ac32:	4601      	mov	r1, r0
 800ac34:	4648      	mov	r0, r9
 800ac36:	f000 fc97 	bl	800b568 <__mcmp>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4658      	mov	r0, fp
 800ac40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac42:	f000 fa0d 	bl	800b060 <_Bfree>
 800ac46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac4a:	9e07      	ldr	r6, [sp, #28]
 800ac4c:	ea43 0102 	orr.w	r1, r3, r2
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	4319      	orrs	r1, r3
 800ac54:	d110      	bne.n	800ac78 <_dtoa_r+0xa20>
 800ac56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac5a:	d029      	beq.n	800acb0 <_dtoa_r+0xa58>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd02      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	f883 8000 	strb.w	r8, [r3]
 800ac6e:	e63f      	b.n	800a8f0 <_dtoa_r+0x698>
 800ac70:	4628      	mov	r0, r5
 800ac72:	e7bb      	b.n	800abec <_dtoa_r+0x994>
 800ac74:	2201      	movs	r2, #1
 800ac76:	e7e1      	b.n	800ac3c <_dtoa_r+0x9e4>
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	db04      	blt.n	800ac88 <_dtoa_r+0xa30>
 800ac7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac80:	430b      	orrs	r3, r1
 800ac82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac84:	430b      	orrs	r3, r1
 800ac86:	d120      	bne.n	800acca <_dtoa_r+0xa72>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	dded      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4658      	mov	r0, fp
 800ac92:	f000 fbfd 	bl	800b490 <__lshift>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4681      	mov	r9, r0
 800ac9a:	f000 fc65 	bl	800b568 <__mcmp>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	dc03      	bgt.n	800acaa <_dtoa_r+0xa52>
 800aca2:	d1e1      	bne.n	800ac68 <_dtoa_r+0xa10>
 800aca4:	f018 0f01 	tst.w	r8, #1
 800aca8:	d0de      	beq.n	800ac68 <_dtoa_r+0xa10>
 800acaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acae:	d1d8      	bne.n	800ac62 <_dtoa_r+0xa0a>
 800acb0:	9a00      	ldr	r2, [sp, #0]
 800acb2:	2339      	movs	r3, #57	@ 0x39
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	4633      	mov	r3, r6
 800acb8:	461e      	mov	r6, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acc0:	2a39      	cmp	r2, #57	@ 0x39
 800acc2:	d052      	beq.n	800ad6a <_dtoa_r+0xb12>
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e612      	b.n	800a8f0 <_dtoa_r+0x698>
 800acca:	2a00      	cmp	r2, #0
 800accc:	dd07      	ble.n	800acde <_dtoa_r+0xa86>
 800acce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acd2:	d0ed      	beq.n	800acb0 <_dtoa_r+0xa58>
 800acd4:	9a00      	ldr	r2, [sp, #0]
 800acd6:	f108 0301 	add.w	r3, r8, #1
 800acda:	7013      	strb	r3, [r2, #0]
 800acdc:	e608      	b.n	800a8f0 <_dtoa_r+0x698>
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	9a07      	ldr	r2, [sp, #28]
 800ace2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	4293      	cmp	r3, r2
 800acea:	d028      	beq.n	800ad3e <_dtoa_r+0xae6>
 800acec:	4649      	mov	r1, r9
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4658      	mov	r0, fp
 800acf4:	f000 f9d6 	bl	800b0a4 <__multadd>
 800acf8:	42af      	cmp	r7, r5
 800acfa:	4681      	mov	r9, r0
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	f04f 020a 	mov.w	r2, #10
 800ad04:	4639      	mov	r1, r7
 800ad06:	4658      	mov	r0, fp
 800ad08:	d107      	bne.n	800ad1a <_dtoa_r+0xac2>
 800ad0a:	f000 f9cb 	bl	800b0a4 <__multadd>
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4605      	mov	r5, r0
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	3301      	adds	r3, #1
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	e774      	b.n	800ac04 <_dtoa_r+0x9ac>
 800ad1a:	f000 f9c3 	bl	800b0a4 <__multadd>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4607      	mov	r7, r0
 800ad22:	2300      	movs	r3, #0
 800ad24:	220a      	movs	r2, #10
 800ad26:	4658      	mov	r0, fp
 800ad28:	f000 f9bc 	bl	800b0a4 <__multadd>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	e7f0      	b.n	800ad12 <_dtoa_r+0xaba>
 800ad30:	9b00      	ldr	r3, [sp, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bfcc      	ite	gt
 800ad36:	461e      	movgt	r6, r3
 800ad38:	2601      	movle	r6, #1
 800ad3a:	4456      	add	r6, sl
 800ad3c:	2700      	movs	r7, #0
 800ad3e:	4649      	mov	r1, r9
 800ad40:	2201      	movs	r2, #1
 800ad42:	4658      	mov	r0, fp
 800ad44:	f000 fba4 	bl	800b490 <__lshift>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4681      	mov	r9, r0
 800ad4c:	f000 fc0c 	bl	800b568 <__mcmp>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	dcb0      	bgt.n	800acb6 <_dtoa_r+0xa5e>
 800ad54:	d102      	bne.n	800ad5c <_dtoa_r+0xb04>
 800ad56:	f018 0f01 	tst.w	r8, #1
 800ad5a:	d1ac      	bne.n	800acb6 <_dtoa_r+0xa5e>
 800ad5c:	4633      	mov	r3, r6
 800ad5e:	461e      	mov	r6, r3
 800ad60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad64:	2a30      	cmp	r2, #48	@ 0x30
 800ad66:	d0fa      	beq.n	800ad5e <_dtoa_r+0xb06>
 800ad68:	e5c2      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad6a:	459a      	cmp	sl, r3
 800ad6c:	d1a4      	bne.n	800acb8 <_dtoa_r+0xa60>
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	3301      	adds	r3, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	2331      	movs	r3, #49	@ 0x31
 800ad76:	f88a 3000 	strb.w	r3, [sl]
 800ad7a:	e5b9      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800addc <_dtoa_r+0xb84>
 800ad82:	b11b      	cbz	r3, 800ad8c <_dtoa_r+0xb34>
 800ad84:	f10a 0308 	add.w	r3, sl, #8
 800ad88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	b019      	add	sp, #100	@ 0x64
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	f77f ae37 	ble.w	800aa0a <_dtoa_r+0x7b2>
 800ad9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada0:	2001      	movs	r0, #1
 800ada2:	e655      	b.n	800aa50 <_dtoa_r+0x7f8>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f77f aed6 	ble.w	800ab58 <_dtoa_r+0x900>
 800adac:	4656      	mov	r6, sl
 800adae:	4621      	mov	r1, r4
 800adb0:	4648      	mov	r0, r9
 800adb2:	f7ff f9c9 	bl	800a148 <quorem>
 800adb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adba:	f806 8b01 	strb.w	r8, [r6], #1
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	eba6 020a 	sub.w	r2, r6, sl
 800adc4:	4293      	cmp	r3, r2
 800adc6:	ddb3      	ble.n	800ad30 <_dtoa_r+0xad8>
 800adc8:	4649      	mov	r1, r9
 800adca:	2300      	movs	r3, #0
 800adcc:	220a      	movs	r2, #10
 800adce:	4658      	mov	r0, fp
 800add0:	f000 f968 	bl	800b0a4 <__multadd>
 800add4:	4681      	mov	r9, r0
 800add6:	e7ea      	b.n	800adae <_dtoa_r+0xb56>
 800add8:	0800ef55 	.word	0x0800ef55
 800addc:	0800eed9 	.word	0x0800eed9

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f000 f8e8 	bl	800afc8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f000 b8e4 	b.w	800afd4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000b18 	.word	0x20000b18

0800ae74 <malloc>:
 800ae74:	4b02      	ldr	r3, [pc, #8]	@ (800ae80 <malloc+0xc>)
 800ae76:	4601      	mov	r1, r0
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	f000 b825 	b.w	800aec8 <_malloc_r>
 800ae7e:	bf00      	nop
 800ae80:	200000b4 	.word	0x200000b4

0800ae84 <sbrk_aligned>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4e0f      	ldr	r6, [pc, #60]	@ (800aec4 <sbrk_aligned+0x40>)
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b911      	cbnz	r1, 800ae96 <sbrk_aligned+0x12>
 800ae90:	f001 fe0c 	bl	800caac <_sbrk_r>
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f001 fe07 	bl	800caac <_sbrk_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d103      	bne.n	800aeaa <sbrk_aligned+0x26>
 800aea2:	f04f 34ff 	mov.w	r4, #4294967295
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d0f8      	beq.n	800aea6 <sbrk_aligned+0x22>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f001 fdf8 	bl	800caac <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d1f2      	bne.n	800aea6 <sbrk_aligned+0x22>
 800aec0:	e7ef      	b.n	800aea2 <sbrk_aligned+0x1e>
 800aec2:	bf00      	nop
 800aec4:	20000b14 	.word	0x20000b14

0800aec8 <_malloc_r>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	1ccd      	adds	r5, r1, #3
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	db01      	blt.n	800aee4 <_malloc_r+0x1c>
 800aee0:	42a9      	cmp	r1, r5
 800aee2:	d904      	bls.n	800aeee <_malloc_r+0x26>
 800aee4:	230c      	movs	r3, #12
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	2000      	movs	r0, #0
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afc4 <_malloc_r+0xfc>
 800aef2:	f000 f869 	bl	800afc8 <__malloc_lock>
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	461c      	mov	r4, r3
 800aefc:	bb44      	cbnz	r4, 800af50 <_malloc_r+0x88>
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ffbf 	bl	800ae84 <sbrk_aligned>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	4604      	mov	r4, r0
 800af0a:	d158      	bne.n	800afbe <_malloc_r+0xf6>
 800af0c:	f8d8 4000 	ldr.w	r4, [r8]
 800af10:	4627      	mov	r7, r4
 800af12:	2f00      	cmp	r7, #0
 800af14:	d143      	bne.n	800af9e <_malloc_r+0xd6>
 800af16:	2c00      	cmp	r4, #0
 800af18:	d04b      	beq.n	800afb2 <_malloc_r+0xea>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	4639      	mov	r1, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	eb04 0903 	add.w	r9, r4, r3
 800af24:	f001 fdc2 	bl	800caac <_sbrk_r>
 800af28:	4581      	cmp	r9, r0
 800af2a:	d142      	bne.n	800afb2 <_malloc_r+0xea>
 800af2c:	6821      	ldr	r1, [r4, #0]
 800af2e:	1a6d      	subs	r5, r5, r1
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ffa6 	bl	800ae84 <sbrk_aligned>
 800af38:	3001      	adds	r0, #1
 800af3a:	d03a      	beq.n	800afb2 <_malloc_r+0xea>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	442b      	add	r3, r5
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	f8d8 3000 	ldr.w	r3, [r8]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	bb62      	cbnz	r2, 800afa4 <_malloc_r+0xdc>
 800af4a:	f8c8 7000 	str.w	r7, [r8]
 800af4e:	e00f      	b.n	800af70 <_malloc_r+0xa8>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	1b52      	subs	r2, r2, r5
 800af54:	d420      	bmi.n	800af98 <_malloc_r+0xd0>
 800af56:	2a0b      	cmp	r2, #11
 800af58:	d917      	bls.n	800af8a <_malloc_r+0xc2>
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	6025      	str	r5, [r4, #0]
 800af60:	bf18      	it	ne
 800af62:	6059      	strne	r1, [r3, #4]
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	bf08      	it	eq
 800af68:	f8c8 1000 	streq.w	r1, [r8]
 800af6c:	5162      	str	r2, [r4, r5]
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f82f 	bl	800afd4 <__malloc_unlock>
 800af76:	f104 000b 	add.w	r0, r4, #11
 800af7a:	1d23      	adds	r3, r4, #4
 800af7c:	f020 0007 	bic.w	r0, r0, #7
 800af80:	1ac2      	subs	r2, r0, r3
 800af82:	bf1c      	itt	ne
 800af84:	1a1b      	subne	r3, r3, r0
 800af86:	50a3      	strne	r3, [r4, r2]
 800af88:	e7af      	b.n	800aeea <_malloc_r+0x22>
 800af8a:	6862      	ldr	r2, [r4, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	bf0c      	ite	eq
 800af90:	f8c8 2000 	streq.w	r2, [r8]
 800af94:	605a      	strne	r2, [r3, #4]
 800af96:	e7eb      	b.n	800af70 <_malloc_r+0xa8>
 800af98:	4623      	mov	r3, r4
 800af9a:	6864      	ldr	r4, [r4, #4]
 800af9c:	e7ae      	b.n	800aefc <_malloc_r+0x34>
 800af9e:	463c      	mov	r4, r7
 800afa0:	687f      	ldr	r7, [r7, #4]
 800afa2:	e7b6      	b.n	800af12 <_malloc_r+0x4a>
 800afa4:	461a      	mov	r2, r3
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d1fb      	bne.n	800afa4 <_malloc_r+0xdc>
 800afac:	2300      	movs	r3, #0
 800afae:	6053      	str	r3, [r2, #4]
 800afb0:	e7de      	b.n	800af70 <_malloc_r+0xa8>
 800afb2:	230c      	movs	r3, #12
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	4630      	mov	r0, r6
 800afb8:	f000 f80c 	bl	800afd4 <__malloc_unlock>
 800afbc:	e794      	b.n	800aee8 <_malloc_r+0x20>
 800afbe:	6005      	str	r5, [r0, #0]
 800afc0:	e7d6      	b.n	800af70 <_malloc_r+0xa8>
 800afc2:	bf00      	nop
 800afc4:	20000b18 	.word	0x20000b18

0800afc8 <__malloc_lock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__malloc_lock+0x8>)
 800afca:	f7ff b8b4 	b.w	800a136 <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	20000b10 	.word	0x20000b10

0800afd4 <__malloc_unlock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__malloc_unlock+0x8>)
 800afd6:	f7ff b8af 	b.w	800a138 <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	20000b10 	.word	0x20000b10

0800afe0 <_Balloc>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	69c6      	ldr	r6, [r0, #28]
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Balloc+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7ff ff42 	bl	800ae74 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	61e0      	str	r0, [r4, #28]
 800aff4:	b920      	cbnz	r0, 800b000 <_Balloc+0x20>
 800aff6:	4b18      	ldr	r3, [pc, #96]	@ (800b058 <_Balloc+0x78>)
 800aff8:	4818      	ldr	r0, [pc, #96]	@ (800b05c <_Balloc+0x7c>)
 800affa:	216b      	movs	r1, #107	@ 0x6b
 800affc:	f001 fd7c 	bl	800caf8 <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	69e6      	ldr	r6, [r4, #28]
 800b00a:	68f3      	ldr	r3, [r6, #12]
 800b00c:	b183      	cbz	r3, 800b030 <_Balloc+0x50>
 800b00e:	69e3      	ldr	r3, [r4, #28]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b016:	b9b8      	cbnz	r0, 800b048 <_Balloc+0x68>
 800b018:	2101      	movs	r1, #1
 800b01a:	fa01 f605 	lsl.w	r6, r1, r5
 800b01e:	1d72      	adds	r2, r6, #5
 800b020:	0092      	lsls	r2, r2, #2
 800b022:	4620      	mov	r0, r4
 800b024:	f001 fd86 	bl	800cb34 <_calloc_r>
 800b028:	b160      	cbz	r0, 800b044 <_Balloc+0x64>
 800b02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b02e:	e00e      	b.n	800b04e <_Balloc+0x6e>
 800b030:	2221      	movs	r2, #33	@ 0x21
 800b032:	2104      	movs	r1, #4
 800b034:	4620      	mov	r0, r4
 800b036:	f001 fd7d 	bl	800cb34 <_calloc_r>
 800b03a:	69e3      	ldr	r3, [r4, #28]
 800b03c:	60f0      	str	r0, [r6, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e4      	bne.n	800b00e <_Balloc+0x2e>
 800b044:	2000      	movs	r0, #0
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	6802      	ldr	r2, [r0, #0]
 800b04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b04e:	2300      	movs	r3, #0
 800b050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b054:	e7f7      	b.n	800b046 <_Balloc+0x66>
 800b056:	bf00      	nop
 800b058:	0800eee6 	.word	0x0800eee6
 800b05c:	0800ef66 	.word	0x0800ef66

0800b060 <_Bfree>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	69c6      	ldr	r6, [r0, #28]
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	b976      	cbnz	r6, 800b088 <_Bfree+0x28>
 800b06a:	2010      	movs	r0, #16
 800b06c:	f7ff ff02 	bl	800ae74 <malloc>
 800b070:	4602      	mov	r2, r0
 800b072:	61e8      	str	r0, [r5, #28]
 800b074:	b920      	cbnz	r0, 800b080 <_Bfree+0x20>
 800b076:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <_Bfree+0x3c>)
 800b078:	4809      	ldr	r0, [pc, #36]	@ (800b0a0 <_Bfree+0x40>)
 800b07a:	218f      	movs	r1, #143	@ 0x8f
 800b07c:	f001 fd3c 	bl	800caf8 <__assert_func>
 800b080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b084:	6006      	str	r6, [r0, #0]
 800b086:	60c6      	str	r6, [r0, #12]
 800b088:	b13c      	cbz	r4, 800b09a <_Bfree+0x3a>
 800b08a:	69eb      	ldr	r3, [r5, #28]
 800b08c:	6862      	ldr	r2, [r4, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b094:	6021      	str	r1, [r4, #0]
 800b096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	0800eee6 	.word	0x0800eee6
 800b0a0:	0800ef66 	.word	0x0800ef66

0800b0a4 <__multadd>:
 800b0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a8:	690d      	ldr	r5, [r1, #16]
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	461e      	mov	r6, r3
 800b0b0:	f101 0c14 	add.w	ip, r1, #20
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ba:	b299      	uxth	r1, r3
 800b0bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b0c0:	0c1e      	lsrs	r6, r3, #16
 800b0c2:	0c0b      	lsrs	r3, r1, #16
 800b0c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b0c8:	b289      	uxth	r1, r1
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0d0:	4285      	cmp	r5, r0
 800b0d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b0d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0da:	dcec      	bgt.n	800b0b6 <__multadd+0x12>
 800b0dc:	b30e      	cbz	r6, 800b122 <__multadd+0x7e>
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc19      	bgt.n	800b118 <__multadd+0x74>
 800b0e4:	6861      	ldr	r1, [r4, #4]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	3101      	adds	r1, #1
 800b0ea:	f7ff ff79 	bl	800afe0 <_Balloc>
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	b928      	cbnz	r0, 800b0fe <__multadd+0x5a>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <__multadd+0x84>)
 800b0f6:	480d      	ldr	r0, [pc, #52]	@ (800b12c <__multadd+0x88>)
 800b0f8:	21ba      	movs	r1, #186	@ 0xba
 800b0fa:	f001 fcfd 	bl	800caf8 <__assert_func>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	f104 010c 	add.w	r1, r4, #12
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f001 fcdf 	bl	800cacc <memcpy>
 800b10e:	4621      	mov	r1, r4
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ffa5 	bl	800b060 <_Bfree>
 800b116:	4644      	mov	r4, r8
 800b118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b11c:	3501      	adds	r5, #1
 800b11e:	615e      	str	r6, [r3, #20]
 800b120:	6125      	str	r5, [r4, #16]
 800b122:	4620      	mov	r0, r4
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	0800ef55 	.word	0x0800ef55
 800b12c:	0800ef66 	.word	0x0800ef66

0800b130 <__s2b>:
 800b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b134:	460c      	mov	r4, r1
 800b136:	4615      	mov	r5, r2
 800b138:	461f      	mov	r7, r3
 800b13a:	2209      	movs	r2, #9
 800b13c:	3308      	adds	r3, #8
 800b13e:	4606      	mov	r6, r0
 800b140:	fb93 f3f2 	sdiv	r3, r3, r2
 800b144:	2100      	movs	r1, #0
 800b146:	2201      	movs	r2, #1
 800b148:	429a      	cmp	r2, r3
 800b14a:	db09      	blt.n	800b160 <__s2b+0x30>
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff ff47 	bl	800afe0 <_Balloc>
 800b152:	b940      	cbnz	r0, 800b166 <__s2b+0x36>
 800b154:	4602      	mov	r2, r0
 800b156:	4b19      	ldr	r3, [pc, #100]	@ (800b1bc <__s2b+0x8c>)
 800b158:	4819      	ldr	r0, [pc, #100]	@ (800b1c0 <__s2b+0x90>)
 800b15a:	21d3      	movs	r1, #211	@ 0xd3
 800b15c:	f001 fccc 	bl	800caf8 <__assert_func>
 800b160:	0052      	lsls	r2, r2, #1
 800b162:	3101      	adds	r1, #1
 800b164:	e7f0      	b.n	800b148 <__s2b+0x18>
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	6143      	str	r3, [r0, #20]
 800b16a:	2d09      	cmp	r5, #9
 800b16c:	f04f 0301 	mov.w	r3, #1
 800b170:	6103      	str	r3, [r0, #16]
 800b172:	dd16      	ble.n	800b1a2 <__s2b+0x72>
 800b174:	f104 0909 	add.w	r9, r4, #9
 800b178:	46c8      	mov	r8, r9
 800b17a:	442c      	add	r4, r5
 800b17c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b180:	4601      	mov	r1, r0
 800b182:	3b30      	subs	r3, #48	@ 0x30
 800b184:	220a      	movs	r2, #10
 800b186:	4630      	mov	r0, r6
 800b188:	f7ff ff8c 	bl	800b0a4 <__multadd>
 800b18c:	45a0      	cmp	r8, r4
 800b18e:	d1f5      	bne.n	800b17c <__s2b+0x4c>
 800b190:	f1a5 0408 	sub.w	r4, r5, #8
 800b194:	444c      	add	r4, r9
 800b196:	1b2d      	subs	r5, r5, r4
 800b198:	1963      	adds	r3, r4, r5
 800b19a:	42bb      	cmp	r3, r7
 800b19c:	db04      	blt.n	800b1a8 <__s2b+0x78>
 800b19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a2:	340a      	adds	r4, #10
 800b1a4:	2509      	movs	r5, #9
 800b1a6:	e7f6      	b.n	800b196 <__s2b+0x66>
 800b1a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	3b30      	subs	r3, #48	@ 0x30
 800b1b0:	220a      	movs	r2, #10
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ff76 	bl	800b0a4 <__multadd>
 800b1b8:	e7ee      	b.n	800b198 <__s2b+0x68>
 800b1ba:	bf00      	nop
 800b1bc:	0800ef55 	.word	0x0800ef55
 800b1c0:	0800ef66 	.word	0x0800ef66

0800b1c4 <__hi0bits>:
 800b1c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	bf36      	itet	cc
 800b1cc:	0403      	lslcc	r3, r0, #16
 800b1ce:	2000      	movcs	r0, #0
 800b1d0:	2010      	movcc	r0, #16
 800b1d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1d6:	bf3c      	itt	cc
 800b1d8:	021b      	lslcc	r3, r3, #8
 800b1da:	3008      	addcc	r0, #8
 800b1dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1e0:	bf3c      	itt	cc
 800b1e2:	011b      	lslcc	r3, r3, #4
 800b1e4:	3004      	addcc	r0, #4
 800b1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ea:	bf3c      	itt	cc
 800b1ec:	009b      	lslcc	r3, r3, #2
 800b1ee:	3002      	addcc	r0, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	db05      	blt.n	800b200 <__hi0bits+0x3c>
 800b1f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1f8:	f100 0001 	add.w	r0, r0, #1
 800b1fc:	bf08      	it	eq
 800b1fe:	2020      	moveq	r0, #32
 800b200:	4770      	bx	lr

0800b202 <__lo0bits>:
 800b202:	6803      	ldr	r3, [r0, #0]
 800b204:	4602      	mov	r2, r0
 800b206:	f013 0007 	ands.w	r0, r3, #7
 800b20a:	d00b      	beq.n	800b224 <__lo0bits+0x22>
 800b20c:	07d9      	lsls	r1, r3, #31
 800b20e:	d421      	bmi.n	800b254 <__lo0bits+0x52>
 800b210:	0798      	lsls	r0, r3, #30
 800b212:	bf49      	itett	mi
 800b214:	085b      	lsrmi	r3, r3, #1
 800b216:	089b      	lsrpl	r3, r3, #2
 800b218:	2001      	movmi	r0, #1
 800b21a:	6013      	strmi	r3, [r2, #0]
 800b21c:	bf5c      	itt	pl
 800b21e:	6013      	strpl	r3, [r2, #0]
 800b220:	2002      	movpl	r0, #2
 800b222:	4770      	bx	lr
 800b224:	b299      	uxth	r1, r3
 800b226:	b909      	cbnz	r1, 800b22c <__lo0bits+0x2a>
 800b228:	0c1b      	lsrs	r3, r3, #16
 800b22a:	2010      	movs	r0, #16
 800b22c:	b2d9      	uxtb	r1, r3
 800b22e:	b909      	cbnz	r1, 800b234 <__lo0bits+0x32>
 800b230:	3008      	adds	r0, #8
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	0719      	lsls	r1, r3, #28
 800b236:	bf04      	itt	eq
 800b238:	091b      	lsreq	r3, r3, #4
 800b23a:	3004      	addeq	r0, #4
 800b23c:	0799      	lsls	r1, r3, #30
 800b23e:	bf04      	itt	eq
 800b240:	089b      	lsreq	r3, r3, #2
 800b242:	3002      	addeq	r0, #2
 800b244:	07d9      	lsls	r1, r3, #31
 800b246:	d403      	bmi.n	800b250 <__lo0bits+0x4e>
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	f100 0001 	add.w	r0, r0, #1
 800b24e:	d003      	beq.n	800b258 <__lo0bits+0x56>
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	4770      	bx	lr
 800b254:	2000      	movs	r0, #0
 800b256:	4770      	bx	lr
 800b258:	2020      	movs	r0, #32
 800b25a:	4770      	bx	lr

0800b25c <__i2b>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	2101      	movs	r1, #1
 800b262:	f7ff febd 	bl	800afe0 <_Balloc>
 800b266:	4602      	mov	r2, r0
 800b268:	b928      	cbnz	r0, 800b276 <__i2b+0x1a>
 800b26a:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <__i2b+0x24>)
 800b26c:	4805      	ldr	r0, [pc, #20]	@ (800b284 <__i2b+0x28>)
 800b26e:	f240 1145 	movw	r1, #325	@ 0x145
 800b272:	f001 fc41 	bl	800caf8 <__assert_func>
 800b276:	2301      	movs	r3, #1
 800b278:	6144      	str	r4, [r0, #20]
 800b27a:	6103      	str	r3, [r0, #16]
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	0800ef55 	.word	0x0800ef55
 800b284:	0800ef66 	.word	0x0800ef66

0800b288 <__multiply>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	4614      	mov	r4, r2
 800b28e:	690a      	ldr	r2, [r1, #16]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	429a      	cmp	r2, r3
 800b294:	bfa8      	it	ge
 800b296:	4623      	movge	r3, r4
 800b298:	460f      	mov	r7, r1
 800b29a:	bfa4      	itt	ge
 800b29c:	460c      	movge	r4, r1
 800b29e:	461f      	movge	r7, r3
 800b2a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b2a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	6861      	ldr	r1, [r4, #4]
 800b2ac:	eb0a 0609 	add.w	r6, sl, r9
 800b2b0:	42b3      	cmp	r3, r6
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	bfb8      	it	lt
 800b2b6:	3101      	addlt	r1, #1
 800b2b8:	f7ff fe92 	bl	800afe0 <_Balloc>
 800b2bc:	b930      	cbnz	r0, 800b2cc <__multiply+0x44>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	4b44      	ldr	r3, [pc, #272]	@ (800b3d4 <__multiply+0x14c>)
 800b2c2:	4845      	ldr	r0, [pc, #276]	@ (800b3d8 <__multiply+0x150>)
 800b2c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2c8:	f001 fc16 	bl	800caf8 <__assert_func>
 800b2cc:	f100 0514 	add.w	r5, r0, #20
 800b2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4543      	cmp	r3, r8
 800b2da:	d321      	bcc.n	800b320 <__multiply+0x98>
 800b2dc:	f107 0114 	add.w	r1, r7, #20
 800b2e0:	f104 0214 	add.w	r2, r4, #20
 800b2e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	1b13      	subs	r3, r2, r4
 800b2f0:	3b15      	subs	r3, #21
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	f104 0715 	add.w	r7, r4, #21
 800b2fc:	42ba      	cmp	r2, r7
 800b2fe:	bf38      	it	cc
 800b300:	2304      	movcc	r3, #4
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	9103      	str	r1, [sp, #12]
 800b308:	428b      	cmp	r3, r1
 800b30a:	d80c      	bhi.n	800b326 <__multiply+0x9e>
 800b30c:	2e00      	cmp	r6, #0
 800b30e:	dd03      	ble.n	800b318 <__multiply+0x90>
 800b310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05b      	beq.n	800b3d0 <__multiply+0x148>
 800b318:	6106      	str	r6, [r0, #16]
 800b31a:	b005      	add	sp, #20
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	f843 2b04 	str.w	r2, [r3], #4
 800b324:	e7d8      	b.n	800b2d8 <__multiply+0x50>
 800b326:	f8b1 a000 	ldrh.w	sl, [r1]
 800b32a:	f1ba 0f00 	cmp.w	sl, #0
 800b32e:	d024      	beq.n	800b37a <__multiply+0xf2>
 800b330:	f104 0e14 	add.w	lr, r4, #20
 800b334:	46a9      	mov	r9, r5
 800b336:	f04f 0c00 	mov.w	ip, #0
 800b33a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b33e:	f8d9 3000 	ldr.w	r3, [r9]
 800b342:	fa1f fb87 	uxth.w	fp, r7
 800b346:	b29b      	uxth	r3, r3
 800b348:	fb0a 330b 	mla	r3, sl, fp, r3
 800b34c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b350:	f8d9 7000 	ldr.w	r7, [r9]
 800b354:	4463      	add	r3, ip
 800b356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b35a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b35e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b362:	b29b      	uxth	r3, r3
 800b364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b368:	4572      	cmp	r2, lr
 800b36a:	f849 3b04 	str.w	r3, [r9], #4
 800b36e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b372:	d8e2      	bhi.n	800b33a <__multiply+0xb2>
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	f845 c003 	str.w	ip, [r5, r3]
 800b37a:	9b03      	ldr	r3, [sp, #12]
 800b37c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b380:	3104      	adds	r1, #4
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	d021      	beq.n	800b3cc <__multiply+0x144>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	f104 0c14 	add.w	ip, r4, #20
 800b38e:	46ae      	mov	lr, r5
 800b390:	f04f 0a00 	mov.w	sl, #0
 800b394:	f8bc b000 	ldrh.w	fp, [ip]
 800b398:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b39c:	fb09 770b 	mla	r7, r9, fp, r7
 800b3a0:	4457      	add	r7, sl
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3a8:	f84e 3b04 	str.w	r3, [lr], #4
 800b3ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b4:	f8be 3000 	ldrh.w	r3, [lr]
 800b3b8:	fb09 330a 	mla	r3, r9, sl, r3
 800b3bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b3c0:	4562      	cmp	r2, ip
 800b3c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3c6:	d8e5      	bhi.n	800b394 <__multiply+0x10c>
 800b3c8:	9f01      	ldr	r7, [sp, #4]
 800b3ca:	51eb      	str	r3, [r5, r7]
 800b3cc:	3504      	adds	r5, #4
 800b3ce:	e799      	b.n	800b304 <__multiply+0x7c>
 800b3d0:	3e01      	subs	r6, #1
 800b3d2:	e79b      	b.n	800b30c <__multiply+0x84>
 800b3d4:	0800ef55 	.word	0x0800ef55
 800b3d8:	0800ef66 	.word	0x0800ef66

0800b3dc <__pow5mult>:
 800b3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e0:	4615      	mov	r5, r2
 800b3e2:	f012 0203 	ands.w	r2, r2, #3
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	d007      	beq.n	800b3fc <__pow5mult+0x20>
 800b3ec:	4c25      	ldr	r4, [pc, #148]	@ (800b484 <__pow5mult+0xa8>)
 800b3ee:	3a01      	subs	r2, #1
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3f6:	f7ff fe55 	bl	800b0a4 <__multadd>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	10ad      	asrs	r5, r5, #2
 800b3fe:	d03d      	beq.n	800b47c <__pow5mult+0xa0>
 800b400:	69fc      	ldr	r4, [r7, #28]
 800b402:	b97c      	cbnz	r4, 800b424 <__pow5mult+0x48>
 800b404:	2010      	movs	r0, #16
 800b406:	f7ff fd35 	bl	800ae74 <malloc>
 800b40a:	4602      	mov	r2, r0
 800b40c:	61f8      	str	r0, [r7, #28]
 800b40e:	b928      	cbnz	r0, 800b41c <__pow5mult+0x40>
 800b410:	4b1d      	ldr	r3, [pc, #116]	@ (800b488 <__pow5mult+0xac>)
 800b412:	481e      	ldr	r0, [pc, #120]	@ (800b48c <__pow5mult+0xb0>)
 800b414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b418:	f001 fb6e 	bl	800caf8 <__assert_func>
 800b41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b420:	6004      	str	r4, [r0, #0]
 800b422:	60c4      	str	r4, [r0, #12]
 800b424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b42c:	b94c      	cbnz	r4, 800b442 <__pow5mult+0x66>
 800b42e:	f240 2171 	movw	r1, #625	@ 0x271
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ff12 	bl	800b25c <__i2b>
 800b438:	2300      	movs	r3, #0
 800b43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b43e:	4604      	mov	r4, r0
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	f04f 0900 	mov.w	r9, #0
 800b446:	07eb      	lsls	r3, r5, #31
 800b448:	d50a      	bpl.n	800b460 <__pow5mult+0x84>
 800b44a:	4631      	mov	r1, r6
 800b44c:	4622      	mov	r2, r4
 800b44e:	4638      	mov	r0, r7
 800b450:	f7ff ff1a 	bl	800b288 <__multiply>
 800b454:	4631      	mov	r1, r6
 800b456:	4680      	mov	r8, r0
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff fe01 	bl	800b060 <_Bfree>
 800b45e:	4646      	mov	r6, r8
 800b460:	106d      	asrs	r5, r5, #1
 800b462:	d00b      	beq.n	800b47c <__pow5mult+0xa0>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	b938      	cbnz	r0, 800b478 <__pow5mult+0x9c>
 800b468:	4622      	mov	r2, r4
 800b46a:	4621      	mov	r1, r4
 800b46c:	4638      	mov	r0, r7
 800b46e:	f7ff ff0b 	bl	800b288 <__multiply>
 800b472:	6020      	str	r0, [r4, #0]
 800b474:	f8c0 9000 	str.w	r9, [r0]
 800b478:	4604      	mov	r4, r0
 800b47a:	e7e4      	b.n	800b446 <__pow5mult+0x6a>
 800b47c:	4630      	mov	r0, r6
 800b47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b482:	bf00      	nop
 800b484:	0800efc0 	.word	0x0800efc0
 800b488:	0800eee6 	.word	0x0800eee6
 800b48c:	0800ef66 	.word	0x0800ef66

0800b490 <__lshift>:
 800b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	6849      	ldr	r1, [r1, #4]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b49e:	68a3      	ldr	r3, [r4, #8]
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	4691      	mov	r9, r2
 800b4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4a8:	f108 0601 	add.w	r6, r8, #1
 800b4ac:	42b3      	cmp	r3, r6
 800b4ae:	db0b      	blt.n	800b4c8 <__lshift+0x38>
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff fd95 	bl	800afe0 <_Balloc>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	b948      	cbnz	r0, 800b4ce <__lshift+0x3e>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b28      	ldr	r3, [pc, #160]	@ (800b560 <__lshift+0xd0>)
 800b4be:	4829      	ldr	r0, [pc, #164]	@ (800b564 <__lshift+0xd4>)
 800b4c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4c4:	f001 fb18 	bl	800caf8 <__assert_func>
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	e7ee      	b.n	800b4ac <__lshift+0x1c>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f100 0114 	add.w	r1, r0, #20
 800b4d4:	f100 0210 	add.w	r2, r0, #16
 800b4d8:	4618      	mov	r0, r3
 800b4da:	4553      	cmp	r3, sl
 800b4dc:	db33      	blt.n	800b546 <__lshift+0xb6>
 800b4de:	6920      	ldr	r0, [r4, #16]
 800b4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4e4:	f104 0314 	add.w	r3, r4, #20
 800b4e8:	f019 091f 	ands.w	r9, r9, #31
 800b4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4f4:	d02b      	beq.n	800b54e <__lshift+0xbe>
 800b4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4fa:	468a      	mov	sl, r1
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	6818      	ldr	r0, [r3, #0]
 800b500:	fa00 f009 	lsl.w	r0, r0, r9
 800b504:	4310      	orrs	r0, r2
 800b506:	f84a 0b04 	str.w	r0, [sl], #4
 800b50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50e:	459c      	cmp	ip, r3
 800b510:	fa22 f20e 	lsr.w	r2, r2, lr
 800b514:	d8f3      	bhi.n	800b4fe <__lshift+0x6e>
 800b516:	ebac 0304 	sub.w	r3, ip, r4
 800b51a:	3b15      	subs	r3, #21
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	3304      	adds	r3, #4
 800b522:	f104 0015 	add.w	r0, r4, #21
 800b526:	4584      	cmp	ip, r0
 800b528:	bf38      	it	cc
 800b52a:	2304      	movcc	r3, #4
 800b52c:	50ca      	str	r2, [r1, r3]
 800b52e:	b10a      	cbz	r2, 800b534 <__lshift+0xa4>
 800b530:	f108 0602 	add.w	r6, r8, #2
 800b534:	3e01      	subs	r6, #1
 800b536:	4638      	mov	r0, r7
 800b538:	612e      	str	r6, [r5, #16]
 800b53a:	4621      	mov	r1, r4
 800b53c:	f7ff fd90 	bl	800b060 <_Bfree>
 800b540:	4628      	mov	r0, r5
 800b542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b546:	f842 0f04 	str.w	r0, [r2, #4]!
 800b54a:	3301      	adds	r3, #1
 800b54c:	e7c5      	b.n	800b4da <__lshift+0x4a>
 800b54e:	3904      	subs	r1, #4
 800b550:	f853 2b04 	ldr.w	r2, [r3], #4
 800b554:	f841 2f04 	str.w	r2, [r1, #4]!
 800b558:	459c      	cmp	ip, r3
 800b55a:	d8f9      	bhi.n	800b550 <__lshift+0xc0>
 800b55c:	e7ea      	b.n	800b534 <__lshift+0xa4>
 800b55e:	bf00      	nop
 800b560:	0800ef55 	.word	0x0800ef55
 800b564:	0800ef66 	.word	0x0800ef66

0800b568 <__mcmp>:
 800b568:	690a      	ldr	r2, [r1, #16]
 800b56a:	4603      	mov	r3, r0
 800b56c:	6900      	ldr	r0, [r0, #16]
 800b56e:	1a80      	subs	r0, r0, r2
 800b570:	b530      	push	{r4, r5, lr}
 800b572:	d10e      	bne.n	800b592 <__mcmp+0x2a>
 800b574:	3314      	adds	r3, #20
 800b576:	3114      	adds	r1, #20
 800b578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b57c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b588:	4295      	cmp	r5, r2
 800b58a:	d003      	beq.n	800b594 <__mcmp+0x2c>
 800b58c:	d205      	bcs.n	800b59a <__mcmp+0x32>
 800b58e:	f04f 30ff 	mov.w	r0, #4294967295
 800b592:	bd30      	pop	{r4, r5, pc}
 800b594:	42a3      	cmp	r3, r4
 800b596:	d3f3      	bcc.n	800b580 <__mcmp+0x18>
 800b598:	e7fb      	b.n	800b592 <__mcmp+0x2a>
 800b59a:	2001      	movs	r0, #1
 800b59c:	e7f9      	b.n	800b592 <__mcmp+0x2a>
	...

0800b5a0 <__mdiff>:
 800b5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4648      	mov	r0, r9
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	f7ff ffdb 	bl	800b568 <__mcmp>
 800b5b2:	1e05      	subs	r5, r0, #0
 800b5b4:	d112      	bne.n	800b5dc <__mdiff+0x3c>
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff fd11 	bl	800afe0 <_Balloc>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	b928      	cbnz	r0, 800b5ce <__mdiff+0x2e>
 800b5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800b6c0 <__mdiff+0x120>)
 800b5c4:	f240 2137 	movw	r1, #567	@ 0x237
 800b5c8:	483e      	ldr	r0, [pc, #248]	@ (800b6c4 <__mdiff+0x124>)
 800b5ca:	f001 fa95 	bl	800caf8 <__assert_func>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	b003      	add	sp, #12
 800b5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5dc:	bfbc      	itt	lt
 800b5de:	464b      	movlt	r3, r9
 800b5e0:	46a1      	movlt	r9, r4
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5e8:	bfba      	itte	lt
 800b5ea:	461c      	movlt	r4, r3
 800b5ec:	2501      	movlt	r5, #1
 800b5ee:	2500      	movge	r5, #0
 800b5f0:	f7ff fcf6 	bl	800afe0 <_Balloc>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	b918      	cbnz	r0, 800b600 <__mdiff+0x60>
 800b5f8:	4b31      	ldr	r3, [pc, #196]	@ (800b6c0 <__mdiff+0x120>)
 800b5fa:	f240 2145 	movw	r1, #581	@ 0x245
 800b5fe:	e7e3      	b.n	800b5c8 <__mdiff+0x28>
 800b600:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b604:	6926      	ldr	r6, [r4, #16]
 800b606:	60c5      	str	r5, [r0, #12]
 800b608:	f109 0310 	add.w	r3, r9, #16
 800b60c:	f109 0514 	add.w	r5, r9, #20
 800b610:	f104 0e14 	add.w	lr, r4, #20
 800b614:	f100 0b14 	add.w	fp, r0, #20
 800b618:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b61c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	46d9      	mov	r9, fp
 800b624:	f04f 0c00 	mov.w	ip, #0
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b62e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	fa1f f38a 	uxth.w	r3, sl
 800b638:	4619      	mov	r1, r3
 800b63a:	b283      	uxth	r3, r0
 800b63c:	1acb      	subs	r3, r1, r3
 800b63e:	0c00      	lsrs	r0, r0, #16
 800b640:	4463      	add	r3, ip
 800b642:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b646:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b650:	4576      	cmp	r6, lr
 800b652:	f849 3b04 	str.w	r3, [r9], #4
 800b656:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b65a:	d8e5      	bhi.n	800b628 <__mdiff+0x88>
 800b65c:	1b33      	subs	r3, r6, r4
 800b65e:	3b15      	subs	r3, #21
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3415      	adds	r4, #21
 800b666:	3304      	adds	r3, #4
 800b668:	42a6      	cmp	r6, r4
 800b66a:	bf38      	it	cc
 800b66c:	2304      	movcc	r3, #4
 800b66e:	441d      	add	r5, r3
 800b670:	445b      	add	r3, fp
 800b672:	461e      	mov	r6, r3
 800b674:	462c      	mov	r4, r5
 800b676:	4544      	cmp	r4, r8
 800b678:	d30e      	bcc.n	800b698 <__mdiff+0xf8>
 800b67a:	f108 0103 	add.w	r1, r8, #3
 800b67e:	1b49      	subs	r1, r1, r5
 800b680:	f021 0103 	bic.w	r1, r1, #3
 800b684:	3d03      	subs	r5, #3
 800b686:	45a8      	cmp	r8, r5
 800b688:	bf38      	it	cc
 800b68a:	2100      	movcc	r1, #0
 800b68c:	440b      	add	r3, r1
 800b68e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b692:	b191      	cbz	r1, 800b6ba <__mdiff+0x11a>
 800b694:	6117      	str	r7, [r2, #16]
 800b696:	e79d      	b.n	800b5d4 <__mdiff+0x34>
 800b698:	f854 1b04 	ldr.w	r1, [r4], #4
 800b69c:	46e6      	mov	lr, ip
 800b69e:	0c08      	lsrs	r0, r1, #16
 800b6a0:	fa1c fc81 	uxtah	ip, ip, r1
 800b6a4:	4471      	add	r1, lr
 800b6a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b6aa:	b289      	uxth	r1, r1
 800b6ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b6b0:	f846 1b04 	str.w	r1, [r6], #4
 800b6b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6b8:	e7dd      	b.n	800b676 <__mdiff+0xd6>
 800b6ba:	3f01      	subs	r7, #1
 800b6bc:	e7e7      	b.n	800b68e <__mdiff+0xee>
 800b6be:	bf00      	nop
 800b6c0:	0800ef55 	.word	0x0800ef55
 800b6c4:	0800ef66 	.word	0x0800ef66

0800b6c8 <__ulp>:
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	ed8d 0b00 	vstr	d0, [sp]
 800b6ce:	9a01      	ldr	r2, [sp, #4]
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b710 <__ulp+0x48>)
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dc08      	bgt.n	800b6ee <__ulp+0x26>
 800b6dc:	425b      	negs	r3, r3
 800b6de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b6e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6e6:	da04      	bge.n	800b6f2 <__ulp+0x2a>
 800b6e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b6ec:	4113      	asrs	r3, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	e008      	b.n	800b704 <__ulp+0x3c>
 800b6f2:	f1a2 0314 	sub.w	r3, r2, #20
 800b6f6:	2b1e      	cmp	r3, #30
 800b6f8:	bfda      	itte	le
 800b6fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b6fe:	40da      	lsrle	r2, r3
 800b700:	2201      	movgt	r2, #1
 800b702:	2300      	movs	r3, #0
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	ec41 0b10 	vmov	d0, r0, r1
 800b70c:	b002      	add	sp, #8
 800b70e:	4770      	bx	lr
 800b710:	7ff00000 	.word	0x7ff00000

0800b714 <__b2d>:
 800b714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b718:	6906      	ldr	r6, [r0, #16]
 800b71a:	f100 0814 	add.w	r8, r0, #20
 800b71e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b722:	1f37      	subs	r7, r6, #4
 800b724:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b728:	4610      	mov	r0, r2
 800b72a:	f7ff fd4b 	bl	800b1c4 <__hi0bits>
 800b72e:	f1c0 0320 	rsb	r3, r0, #32
 800b732:	280a      	cmp	r0, #10
 800b734:	600b      	str	r3, [r1, #0]
 800b736:	491b      	ldr	r1, [pc, #108]	@ (800b7a4 <__b2d+0x90>)
 800b738:	dc15      	bgt.n	800b766 <__b2d+0x52>
 800b73a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b73e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b742:	45b8      	cmp	r8, r7
 800b744:	ea43 0501 	orr.w	r5, r3, r1
 800b748:	bf34      	ite	cc
 800b74a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b74e:	2300      	movcs	r3, #0
 800b750:	3015      	adds	r0, #21
 800b752:	fa02 f000 	lsl.w	r0, r2, r0
 800b756:	fa23 f30c 	lsr.w	r3, r3, ip
 800b75a:	4303      	orrs	r3, r0
 800b75c:	461c      	mov	r4, r3
 800b75e:	ec45 4b10 	vmov	d0, r4, r5
 800b762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b766:	45b8      	cmp	r8, r7
 800b768:	bf3a      	itte	cc
 800b76a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b76e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b772:	2300      	movcs	r3, #0
 800b774:	380b      	subs	r0, #11
 800b776:	d012      	beq.n	800b79e <__b2d+0x8a>
 800b778:	f1c0 0120 	rsb	r1, r0, #32
 800b77c:	fa23 f401 	lsr.w	r4, r3, r1
 800b780:	4082      	lsls	r2, r0
 800b782:	4322      	orrs	r2, r4
 800b784:	4547      	cmp	r7, r8
 800b786:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b78a:	bf8c      	ite	hi
 800b78c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b790:	2200      	movls	r2, #0
 800b792:	4083      	lsls	r3, r0
 800b794:	40ca      	lsrs	r2, r1
 800b796:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b79a:	4313      	orrs	r3, r2
 800b79c:	e7de      	b.n	800b75c <__b2d+0x48>
 800b79e:	ea42 0501 	orr.w	r5, r2, r1
 800b7a2:	e7db      	b.n	800b75c <__b2d+0x48>
 800b7a4:	3ff00000 	.word	0x3ff00000

0800b7a8 <__d2b>:
 800b7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	ec59 8b10 	vmov	r8, r9, d0
 800b7b4:	4616      	mov	r6, r2
 800b7b6:	f7ff fc13 	bl	800afe0 <_Balloc>
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	b930      	cbnz	r0, 800b7cc <__d2b+0x24>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b23      	ldr	r3, [pc, #140]	@ (800b850 <__d2b+0xa8>)
 800b7c2:	4824      	ldr	r0, [pc, #144]	@ (800b854 <__d2b+0xac>)
 800b7c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7c8:	f001 f996 	bl	800caf8 <__assert_func>
 800b7cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7d4:	b10d      	cbz	r5, 800b7da <__d2b+0x32>
 800b7d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	f1b8 0300 	subs.w	r3, r8, #0
 800b7e0:	d023      	beq.n	800b82a <__d2b+0x82>
 800b7e2:	4668      	mov	r0, sp
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	f7ff fd0c 	bl	800b202 <__lo0bits>
 800b7ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7ee:	b1d0      	cbz	r0, 800b826 <__d2b+0x7e>
 800b7f0:	f1c0 0320 	rsb	r3, r0, #32
 800b7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	40c2      	lsrs	r2, r0
 800b7fc:	6163      	str	r3, [r4, #20]
 800b7fe:	9201      	str	r2, [sp, #4]
 800b800:	9b01      	ldr	r3, [sp, #4]
 800b802:	61a3      	str	r3, [r4, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	bf0c      	ite	eq
 800b808:	2201      	moveq	r2, #1
 800b80a:	2202      	movne	r2, #2
 800b80c:	6122      	str	r2, [r4, #16]
 800b80e:	b1a5      	cbz	r5, 800b83a <__d2b+0x92>
 800b810:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b814:	4405      	add	r5, r0
 800b816:	603d      	str	r5, [r7, #0]
 800b818:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b81c:	6030      	str	r0, [r6, #0]
 800b81e:	4620      	mov	r0, r4
 800b820:	b003      	add	sp, #12
 800b822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b826:	6161      	str	r1, [r4, #20]
 800b828:	e7ea      	b.n	800b800 <__d2b+0x58>
 800b82a:	a801      	add	r0, sp, #4
 800b82c:	f7ff fce9 	bl	800b202 <__lo0bits>
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	3020      	adds	r0, #32
 800b836:	2201      	movs	r2, #1
 800b838:	e7e8      	b.n	800b80c <__d2b+0x64>
 800b83a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b83e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b842:	6038      	str	r0, [r7, #0]
 800b844:	6918      	ldr	r0, [r3, #16]
 800b846:	f7ff fcbd 	bl	800b1c4 <__hi0bits>
 800b84a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b84e:	e7e5      	b.n	800b81c <__d2b+0x74>
 800b850:	0800ef55 	.word	0x0800ef55
 800b854:	0800ef66 	.word	0x0800ef66

0800b858 <__ratio>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	b085      	sub	sp, #20
 800b85e:	e9cd 1000 	strd	r1, r0, [sp]
 800b862:	a902      	add	r1, sp, #8
 800b864:	f7ff ff56 	bl	800b714 <__b2d>
 800b868:	9800      	ldr	r0, [sp, #0]
 800b86a:	a903      	add	r1, sp, #12
 800b86c:	ec55 4b10 	vmov	r4, r5, d0
 800b870:	f7ff ff50 	bl	800b714 <__b2d>
 800b874:	9b01      	ldr	r3, [sp, #4]
 800b876:	6919      	ldr	r1, [r3, #16]
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	1ac9      	subs	r1, r1, r3
 800b87e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b882:	1a9b      	subs	r3, r3, r2
 800b884:	ec5b ab10 	vmov	sl, fp, d0
 800b888:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfce      	itee	gt
 800b890:	462a      	movgt	r2, r5
 800b892:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b896:	465a      	movle	r2, fp
 800b898:	462f      	mov	r7, r5
 800b89a:	46d9      	mov	r9, fp
 800b89c:	bfcc      	ite	gt
 800b89e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b8a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	f7f4 ffed 	bl	800088c <__aeabi_ddiv>
 800b8b2:	ec41 0b10 	vmov	d0, r0, r1
 800b8b6:	b005      	add	sp, #20
 800b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8bc <__copybits>:
 800b8bc:	3901      	subs	r1, #1
 800b8be:	b570      	push	{r4, r5, r6, lr}
 800b8c0:	1149      	asrs	r1, r1, #5
 800b8c2:	6914      	ldr	r4, [r2, #16]
 800b8c4:	3101      	adds	r1, #1
 800b8c6:	f102 0314 	add.w	r3, r2, #20
 800b8ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8d2:	1f05      	subs	r5, r0, #4
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	d30c      	bcc.n	800b8f2 <__copybits+0x36>
 800b8d8:	1aa3      	subs	r3, r4, r2
 800b8da:	3b11      	subs	r3, #17
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	3211      	adds	r2, #17
 800b8e2:	42a2      	cmp	r2, r4
 800b8e4:	bf88      	it	hi
 800b8e6:	2300      	movhi	r3, #0
 800b8e8:	4418      	add	r0, r3
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4288      	cmp	r0, r1
 800b8ee:	d305      	bcc.n	800b8fc <__copybits+0x40>
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8fa:	e7eb      	b.n	800b8d4 <__copybits+0x18>
 800b8fc:	f840 3b04 	str.w	r3, [r0], #4
 800b900:	e7f4      	b.n	800b8ec <__copybits+0x30>

0800b902 <__any_on>:
 800b902:	f100 0214 	add.w	r2, r0, #20
 800b906:	6900      	ldr	r0, [r0, #16]
 800b908:	114b      	asrs	r3, r1, #5
 800b90a:	4298      	cmp	r0, r3
 800b90c:	b510      	push	{r4, lr}
 800b90e:	db11      	blt.n	800b934 <__any_on+0x32>
 800b910:	dd0a      	ble.n	800b928 <__any_on+0x26>
 800b912:	f011 011f 	ands.w	r1, r1, #31
 800b916:	d007      	beq.n	800b928 <__any_on+0x26>
 800b918:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b91c:	fa24 f001 	lsr.w	r0, r4, r1
 800b920:	fa00 f101 	lsl.w	r1, r0, r1
 800b924:	428c      	cmp	r4, r1
 800b926:	d10b      	bne.n	800b940 <__any_on+0x3e>
 800b928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d803      	bhi.n	800b938 <__any_on+0x36>
 800b930:	2000      	movs	r0, #0
 800b932:	bd10      	pop	{r4, pc}
 800b934:	4603      	mov	r3, r0
 800b936:	e7f7      	b.n	800b928 <__any_on+0x26>
 800b938:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b93c:	2900      	cmp	r1, #0
 800b93e:	d0f5      	beq.n	800b92c <__any_on+0x2a>
 800b940:	2001      	movs	r0, #1
 800b942:	e7f6      	b.n	800b932 <__any_on+0x30>

0800b944 <sulp>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	4604      	mov	r4, r0
 800b948:	460d      	mov	r5, r1
 800b94a:	ec45 4b10 	vmov	d0, r4, r5
 800b94e:	4616      	mov	r6, r2
 800b950:	f7ff feba 	bl	800b6c8 <__ulp>
 800b954:	ec51 0b10 	vmov	r0, r1, d0
 800b958:	b17e      	cbz	r6, 800b97a <sulp+0x36>
 800b95a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b95e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd09      	ble.n	800b97a <sulp+0x36>
 800b966:	051b      	lsls	r3, r3, #20
 800b968:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b96c:	2400      	movs	r4, #0
 800b96e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b972:	4622      	mov	r2, r4
 800b974:	462b      	mov	r3, r5
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	ec41 0b10 	vmov	d0, r0, r1
 800b97e:	bd70      	pop	{r4, r5, r6, pc}

0800b980 <_strtod_l>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	b09f      	sub	sp, #124	@ 0x7c
 800b986:	460c      	mov	r4, r1
 800b988:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b98a:	2200      	movs	r2, #0
 800b98c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b98e:	9005      	str	r0, [sp, #20]
 800b990:	f04f 0a00 	mov.w	sl, #0
 800b994:	f04f 0b00 	mov.w	fp, #0
 800b998:	460a      	mov	r2, r1
 800b99a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b99c:	7811      	ldrb	r1, [r2, #0]
 800b99e:	292b      	cmp	r1, #43	@ 0x2b
 800b9a0:	d04a      	beq.n	800ba38 <_strtod_l+0xb8>
 800b9a2:	d838      	bhi.n	800ba16 <_strtod_l+0x96>
 800b9a4:	290d      	cmp	r1, #13
 800b9a6:	d832      	bhi.n	800ba0e <_strtod_l+0x8e>
 800b9a8:	2908      	cmp	r1, #8
 800b9aa:	d832      	bhi.n	800ba12 <_strtod_l+0x92>
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d03b      	beq.n	800ba28 <_strtod_l+0xa8>
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b9b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b9b6:	782a      	ldrb	r2, [r5, #0]
 800b9b8:	2a30      	cmp	r2, #48	@ 0x30
 800b9ba:	f040 80b3 	bne.w	800bb24 <_strtod_l+0x1a4>
 800b9be:	786a      	ldrb	r2, [r5, #1]
 800b9c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b9c4:	2a58      	cmp	r2, #88	@ 0x58
 800b9c6:	d16e      	bne.n	800baa6 <_strtod_l+0x126>
 800b9c8:	9302      	str	r3, [sp, #8]
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	4a8e      	ldr	r2, [pc, #568]	@ (800bc0c <_strtod_l+0x28c>)
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9d8:	a919      	add	r1, sp, #100	@ 0x64
 800b9da:	f001 f927 	bl	800cc2c <__gethex>
 800b9de:	f010 060f 	ands.w	r6, r0, #15
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	d005      	beq.n	800b9f2 <_strtod_l+0x72>
 800b9e6:	2e06      	cmp	r6, #6
 800b9e8:	d128      	bne.n	800ba3c <_strtod_l+0xbc>
 800b9ea:	3501      	adds	r5, #1
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 858e 	bne.w	800c516 <_strtod_l+0xb96>
 800b9fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9fc:	b1cb      	cbz	r3, 800ba32 <_strtod_l+0xb2>
 800b9fe:	4652      	mov	r2, sl
 800ba00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ba04:	ec43 2b10 	vmov	d0, r2, r3
 800ba08:	b01f      	add	sp, #124	@ 0x7c
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	2920      	cmp	r1, #32
 800ba10:	d1ce      	bne.n	800b9b0 <_strtod_l+0x30>
 800ba12:	3201      	adds	r2, #1
 800ba14:	e7c1      	b.n	800b99a <_strtod_l+0x1a>
 800ba16:	292d      	cmp	r1, #45	@ 0x2d
 800ba18:	d1ca      	bne.n	800b9b0 <_strtod_l+0x30>
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba1e:	1c51      	adds	r1, r2, #1
 800ba20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ba22:	7852      	ldrb	r2, [r2, #1]
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	d1c5      	bne.n	800b9b4 <_strtod_l+0x34>
 800ba28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ba2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f040 8570 	bne.w	800c512 <_strtod_l+0xb92>
 800ba32:	4652      	mov	r2, sl
 800ba34:	465b      	mov	r3, fp
 800ba36:	e7e5      	b.n	800ba04 <_strtod_l+0x84>
 800ba38:	2100      	movs	r1, #0
 800ba3a:	e7ef      	b.n	800ba1c <_strtod_l+0x9c>
 800ba3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba3e:	b13a      	cbz	r2, 800ba50 <_strtod_l+0xd0>
 800ba40:	2135      	movs	r1, #53	@ 0x35
 800ba42:	a81c      	add	r0, sp, #112	@ 0x70
 800ba44:	f7ff ff3a 	bl	800b8bc <__copybits>
 800ba48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba4a:	9805      	ldr	r0, [sp, #20]
 800ba4c:	f7ff fb08 	bl	800b060 <_Bfree>
 800ba50:	3e01      	subs	r6, #1
 800ba52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ba54:	2e04      	cmp	r6, #4
 800ba56:	d806      	bhi.n	800ba66 <_strtod_l+0xe6>
 800ba58:	e8df f006 	tbb	[pc, r6]
 800ba5c:	201d0314 	.word	0x201d0314
 800ba60:	14          	.byte	0x14
 800ba61:	00          	.byte	0x00
 800ba62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ba66:	05e1      	lsls	r1, r4, #23
 800ba68:	bf48      	it	mi
 800ba6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ba6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba72:	0d1b      	lsrs	r3, r3, #20
 800ba74:	051b      	lsls	r3, r3, #20
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1bb      	bne.n	800b9f2 <_strtod_l+0x72>
 800ba7a:	f7fe fb31 	bl	800a0e0 <__errno>
 800ba7e:	2322      	movs	r3, #34	@ 0x22
 800ba80:	6003      	str	r3, [r0, #0]
 800ba82:	e7b6      	b.n	800b9f2 <_strtod_l+0x72>
 800ba84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba94:	e7e7      	b.n	800ba66 <_strtod_l+0xe6>
 800ba96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bc14 <_strtod_l+0x294>
 800ba9a:	e7e4      	b.n	800ba66 <_strtod_l+0xe6>
 800ba9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800baa0:	f04f 3aff 	mov.w	sl, #4294967295
 800baa4:	e7df      	b.n	800ba66 <_strtod_l+0xe6>
 800baa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800baac:	785b      	ldrb	r3, [r3, #1]
 800baae:	2b30      	cmp	r3, #48	@ 0x30
 800bab0:	d0f9      	beq.n	800baa6 <_strtod_l+0x126>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d09d      	beq.n	800b9f2 <_strtod_l+0x72>
 800bab6:	2301      	movs	r3, #1
 800bab8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800babc:	930c      	str	r3, [sp, #48]	@ 0x30
 800babe:	2300      	movs	r3, #0
 800bac0:	9308      	str	r3, [sp, #32]
 800bac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac4:	461f      	mov	r7, r3
 800bac6:	220a      	movs	r2, #10
 800bac8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800baca:	7805      	ldrb	r5, [r0, #0]
 800bacc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bad0:	b2d9      	uxtb	r1, r3
 800bad2:	2909      	cmp	r1, #9
 800bad4:	d928      	bls.n	800bb28 <_strtod_l+0x1a8>
 800bad6:	494e      	ldr	r1, [pc, #312]	@ (800bc10 <_strtod_l+0x290>)
 800bad8:	2201      	movs	r2, #1
 800bada:	f000 ffd5 	bl	800ca88 <strncmp>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d032      	beq.n	800bb48 <_strtod_l+0x1c8>
 800bae2:	2000      	movs	r0, #0
 800bae4:	462a      	mov	r2, r5
 800bae6:	4681      	mov	r9, r0
 800bae8:	463d      	mov	r5, r7
 800baea:	4603      	mov	r3, r0
 800baec:	2a65      	cmp	r2, #101	@ 0x65
 800baee:	d001      	beq.n	800baf4 <_strtod_l+0x174>
 800baf0:	2a45      	cmp	r2, #69	@ 0x45
 800baf2:	d114      	bne.n	800bb1e <_strtod_l+0x19e>
 800baf4:	b91d      	cbnz	r5, 800bafe <_strtod_l+0x17e>
 800baf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf8:	4302      	orrs	r2, r0
 800bafa:	d095      	beq.n	800ba28 <_strtod_l+0xa8>
 800bafc:	2500      	movs	r5, #0
 800bafe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bb00:	1c62      	adds	r2, r4, #1
 800bb02:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb04:	7862      	ldrb	r2, [r4, #1]
 800bb06:	2a2b      	cmp	r2, #43	@ 0x2b
 800bb08:	d077      	beq.n	800bbfa <_strtod_l+0x27a>
 800bb0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800bb0c:	d07b      	beq.n	800bc06 <_strtod_l+0x286>
 800bb0e:	f04f 0c00 	mov.w	ip, #0
 800bb12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bb16:	2909      	cmp	r1, #9
 800bb18:	f240 8082 	bls.w	800bc20 <_strtod_l+0x2a0>
 800bb1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800bb1e:	f04f 0800 	mov.w	r8, #0
 800bb22:	e0a2      	b.n	800bc6a <_strtod_l+0x2ea>
 800bb24:	2300      	movs	r3, #0
 800bb26:	e7c7      	b.n	800bab8 <_strtod_l+0x138>
 800bb28:	2f08      	cmp	r7, #8
 800bb2a:	bfd5      	itete	le
 800bb2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bb2e:	9908      	ldrgt	r1, [sp, #32]
 800bb30:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb34:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bb38:	f100 0001 	add.w	r0, r0, #1
 800bb3c:	bfd4      	ite	le
 800bb3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bb40:	9308      	strgt	r3, [sp, #32]
 800bb42:	3701      	adds	r7, #1
 800bb44:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb46:	e7bf      	b.n	800bac8 <_strtod_l+0x148>
 800bb48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb4e:	785a      	ldrb	r2, [r3, #1]
 800bb50:	b37f      	cbz	r7, 800bbb2 <_strtod_l+0x232>
 800bb52:	4681      	mov	r9, r0
 800bb54:	463d      	mov	r5, r7
 800bb56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d912      	bls.n	800bb84 <_strtod_l+0x204>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e7c4      	b.n	800baec <_strtod_l+0x16c>
 800bb62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb68:	785a      	ldrb	r2, [r3, #1]
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	2a30      	cmp	r2, #48	@ 0x30
 800bb6e:	d0f8      	beq.n	800bb62 <_strtod_l+0x1e2>
 800bb70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	f200 84d3 	bhi.w	800c520 <_strtod_l+0xba0>
 800bb7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb7e:	4681      	mov	r9, r0
 800bb80:	2000      	movs	r0, #0
 800bb82:	4605      	mov	r5, r0
 800bb84:	3a30      	subs	r2, #48	@ 0x30
 800bb86:	f100 0301 	add.w	r3, r0, #1
 800bb8a:	d02a      	beq.n	800bbe2 <_strtod_l+0x262>
 800bb8c:	4499      	add	r9, r3
 800bb8e:	eb00 0c05 	add.w	ip, r0, r5
 800bb92:	462b      	mov	r3, r5
 800bb94:	210a      	movs	r1, #10
 800bb96:	4563      	cmp	r3, ip
 800bb98:	d10d      	bne.n	800bbb6 <_strtod_l+0x236>
 800bb9a:	1c69      	adds	r1, r5, #1
 800bb9c:	4401      	add	r1, r0
 800bb9e:	4428      	add	r0, r5
 800bba0:	2808      	cmp	r0, #8
 800bba2:	dc16      	bgt.n	800bbd2 <_strtod_l+0x252>
 800bba4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bba6:	230a      	movs	r3, #10
 800bba8:	fb03 2300 	mla	r3, r3, r0, r2
 800bbac:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e018      	b.n	800bbe4 <_strtod_l+0x264>
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	e7da      	b.n	800bb6c <_strtod_l+0x1ec>
 800bbb6:	2b08      	cmp	r3, #8
 800bbb8:	f103 0301 	add.w	r3, r3, #1
 800bbbc:	dc03      	bgt.n	800bbc6 <_strtod_l+0x246>
 800bbbe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bbc0:	434e      	muls	r6, r1
 800bbc2:	960a      	str	r6, [sp, #40]	@ 0x28
 800bbc4:	e7e7      	b.n	800bb96 <_strtod_l+0x216>
 800bbc6:	2b10      	cmp	r3, #16
 800bbc8:	bfde      	ittt	le
 800bbca:	9e08      	ldrle	r6, [sp, #32]
 800bbcc:	434e      	mulle	r6, r1
 800bbce:	9608      	strle	r6, [sp, #32]
 800bbd0:	e7e1      	b.n	800bb96 <_strtod_l+0x216>
 800bbd2:	280f      	cmp	r0, #15
 800bbd4:	dceb      	bgt.n	800bbae <_strtod_l+0x22e>
 800bbd6:	9808      	ldr	r0, [sp, #32]
 800bbd8:	230a      	movs	r3, #10
 800bbda:	fb03 2300 	mla	r3, r3, r0, r2
 800bbde:	9308      	str	r3, [sp, #32]
 800bbe0:	e7e5      	b.n	800bbae <_strtod_l+0x22e>
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbe6:	1c50      	adds	r0, r2, #1
 800bbe8:	9019      	str	r0, [sp, #100]	@ 0x64
 800bbea:	7852      	ldrb	r2, [r2, #1]
 800bbec:	4618      	mov	r0, r3
 800bbee:	460d      	mov	r5, r1
 800bbf0:	e7b1      	b.n	800bb56 <_strtod_l+0x1d6>
 800bbf2:	f04f 0900 	mov.w	r9, #0
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e77d      	b.n	800baf6 <_strtod_l+0x176>
 800bbfa:	f04f 0c00 	mov.w	ip, #0
 800bbfe:	1ca2      	adds	r2, r4, #2
 800bc00:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc02:	78a2      	ldrb	r2, [r4, #2]
 800bc04:	e785      	b.n	800bb12 <_strtod_l+0x192>
 800bc06:	f04f 0c01 	mov.w	ip, #1
 800bc0a:	e7f8      	b.n	800bbfe <_strtod_l+0x27e>
 800bc0c:	0800f0d8 	.word	0x0800f0d8
 800bc10:	0800f0c0 	.word	0x0800f0c0
 800bc14:	7ff00000 	.word	0x7ff00000
 800bc18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc1a:	1c51      	adds	r1, r2, #1
 800bc1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bc1e:	7852      	ldrb	r2, [r2, #1]
 800bc20:	2a30      	cmp	r2, #48	@ 0x30
 800bc22:	d0f9      	beq.n	800bc18 <_strtod_l+0x298>
 800bc24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bc28:	2908      	cmp	r1, #8
 800bc2a:	f63f af78 	bhi.w	800bb1e <_strtod_l+0x19e>
 800bc2e:	3a30      	subs	r2, #48	@ 0x30
 800bc30:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bc36:	f04f 080a 	mov.w	r8, #10
 800bc3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc3c:	1c56      	adds	r6, r2, #1
 800bc3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bc40:	7852      	ldrb	r2, [r2, #1]
 800bc42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bc46:	f1be 0f09 	cmp.w	lr, #9
 800bc4a:	d939      	bls.n	800bcc0 <_strtod_l+0x340>
 800bc4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bc4e:	1a76      	subs	r6, r6, r1
 800bc50:	2e08      	cmp	r6, #8
 800bc52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bc56:	dc03      	bgt.n	800bc60 <_strtod_l+0x2e0>
 800bc58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc5a:	4588      	cmp	r8, r1
 800bc5c:	bfa8      	it	ge
 800bc5e:	4688      	movge	r8, r1
 800bc60:	f1bc 0f00 	cmp.w	ip, #0
 800bc64:	d001      	beq.n	800bc6a <_strtod_l+0x2ea>
 800bc66:	f1c8 0800 	rsb	r8, r8, #0
 800bc6a:	2d00      	cmp	r5, #0
 800bc6c:	d14e      	bne.n	800bd0c <_strtod_l+0x38c>
 800bc6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc70:	4308      	orrs	r0, r1
 800bc72:	f47f aebe 	bne.w	800b9f2 <_strtod_l+0x72>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f47f aed6 	bne.w	800ba28 <_strtod_l+0xa8>
 800bc7c:	2a69      	cmp	r2, #105	@ 0x69
 800bc7e:	d028      	beq.n	800bcd2 <_strtod_l+0x352>
 800bc80:	dc25      	bgt.n	800bcce <_strtod_l+0x34e>
 800bc82:	2a49      	cmp	r2, #73	@ 0x49
 800bc84:	d025      	beq.n	800bcd2 <_strtod_l+0x352>
 800bc86:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc88:	f47f aece 	bne.w	800ba28 <_strtod_l+0xa8>
 800bc8c:	499b      	ldr	r1, [pc, #620]	@ (800befc <_strtod_l+0x57c>)
 800bc8e:	a819      	add	r0, sp, #100	@ 0x64
 800bc90:	f001 f9ee 	bl	800d070 <__match>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f43f aec7 	beq.w	800ba28 <_strtod_l+0xa8>
 800bc9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b28      	cmp	r3, #40	@ 0x28
 800bca0:	d12e      	bne.n	800bd00 <_strtod_l+0x380>
 800bca2:	4997      	ldr	r1, [pc, #604]	@ (800bf00 <_strtod_l+0x580>)
 800bca4:	aa1c      	add	r2, sp, #112	@ 0x70
 800bca6:	a819      	add	r0, sp, #100	@ 0x64
 800bca8:	f001 f9f6 	bl	800d098 <__hexnan>
 800bcac:	2805      	cmp	r0, #5
 800bcae:	d127      	bne.n	800bd00 <_strtod_l+0x380>
 800bcb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bcb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bcba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bcbe:	e698      	b.n	800b9f2 <_strtod_l+0x72>
 800bcc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bcc2:	fb08 2101 	mla	r1, r8, r1, r2
 800bcc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bcca:	920e      	str	r2, [sp, #56]	@ 0x38
 800bccc:	e7b5      	b.n	800bc3a <_strtod_l+0x2ba>
 800bcce:	2a6e      	cmp	r2, #110	@ 0x6e
 800bcd0:	e7da      	b.n	800bc88 <_strtod_l+0x308>
 800bcd2:	498c      	ldr	r1, [pc, #560]	@ (800bf04 <_strtod_l+0x584>)
 800bcd4:	a819      	add	r0, sp, #100	@ 0x64
 800bcd6:	f001 f9cb 	bl	800d070 <__match>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	f43f aea4 	beq.w	800ba28 <_strtod_l+0xa8>
 800bce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bce2:	4989      	ldr	r1, [pc, #548]	@ (800bf08 <_strtod_l+0x588>)
 800bce4:	3b01      	subs	r3, #1
 800bce6:	a819      	add	r0, sp, #100	@ 0x64
 800bce8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcea:	f001 f9c1 	bl	800d070 <__match>
 800bcee:	b910      	cbnz	r0, 800bcf6 <_strtod_l+0x376>
 800bcf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bf18 <_strtod_l+0x598>
 800bcfa:	f04f 0a00 	mov.w	sl, #0
 800bcfe:	e678      	b.n	800b9f2 <_strtod_l+0x72>
 800bd00:	4882      	ldr	r0, [pc, #520]	@ (800bf0c <_strtod_l+0x58c>)
 800bd02:	f000 fef1 	bl	800cae8 <nan>
 800bd06:	ec5b ab10 	vmov	sl, fp, d0
 800bd0a:	e672      	b.n	800b9f2 <_strtod_l+0x72>
 800bd0c:	eba8 0309 	sub.w	r3, r8, r9
 800bd10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd12:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd14:	2f00      	cmp	r7, #0
 800bd16:	bf08      	it	eq
 800bd18:	462f      	moveq	r7, r5
 800bd1a:	2d10      	cmp	r5, #16
 800bd1c:	462c      	mov	r4, r5
 800bd1e:	bfa8      	it	ge
 800bd20:	2410      	movge	r4, #16
 800bd22:	f7f4 fc0f 	bl	8000544 <__aeabi_ui2d>
 800bd26:	2d09      	cmp	r5, #9
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	dc13      	bgt.n	800bd56 <_strtod_l+0x3d6>
 800bd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f43f ae5e 	beq.w	800b9f2 <_strtod_l+0x72>
 800bd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd38:	dd78      	ble.n	800be2c <_strtod_l+0x4ac>
 800bd3a:	2b16      	cmp	r3, #22
 800bd3c:	dc5f      	bgt.n	800bdfe <_strtod_l+0x47e>
 800bd3e:	4974      	ldr	r1, [pc, #464]	@ (800bf10 <_strtod_l+0x590>)
 800bd40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd48:	4652      	mov	r2, sl
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	f7f4 fc74 	bl	8000638 <__aeabi_dmul>
 800bd50:	4682      	mov	sl, r0
 800bd52:	468b      	mov	fp, r1
 800bd54:	e64d      	b.n	800b9f2 <_strtod_l+0x72>
 800bd56:	4b6e      	ldr	r3, [pc, #440]	@ (800bf10 <_strtod_l+0x590>)
 800bd58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bd60:	f7f4 fc6a 	bl	8000638 <__aeabi_dmul>
 800bd64:	4682      	mov	sl, r0
 800bd66:	9808      	ldr	r0, [sp, #32]
 800bd68:	468b      	mov	fp, r1
 800bd6a:	f7f4 fbeb 	bl	8000544 <__aeabi_ui2d>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	f7f4 faa9 	bl	80002cc <__adddf3>
 800bd7a:	2d0f      	cmp	r5, #15
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	468b      	mov	fp, r1
 800bd80:	ddd5      	ble.n	800bd2e <_strtod_l+0x3ae>
 800bd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd84:	1b2c      	subs	r4, r5, r4
 800bd86:	441c      	add	r4, r3
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	f340 8096 	ble.w	800beba <_strtod_l+0x53a>
 800bd8e:	f014 030f 	ands.w	r3, r4, #15
 800bd92:	d00a      	beq.n	800bdaa <_strtod_l+0x42a>
 800bd94:	495e      	ldr	r1, [pc, #376]	@ (800bf10 <_strtod_l+0x590>)
 800bd96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda2:	f7f4 fc49 	bl	8000638 <__aeabi_dmul>
 800bda6:	4682      	mov	sl, r0
 800bda8:	468b      	mov	fp, r1
 800bdaa:	f034 040f 	bics.w	r4, r4, #15
 800bdae:	d073      	beq.n	800be98 <_strtod_l+0x518>
 800bdb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bdb4:	dd48      	ble.n	800be48 <_strtod_l+0x4c8>
 800bdb6:	2400      	movs	r4, #0
 800bdb8:	46a0      	mov	r8, r4
 800bdba:	940a      	str	r4, [sp, #40]	@ 0x28
 800bdbc:	46a1      	mov	r9, r4
 800bdbe:	9a05      	ldr	r2, [sp, #20]
 800bdc0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bf18 <_strtod_l+0x598>
 800bdc4:	2322      	movs	r3, #34	@ 0x22
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	f04f 0a00 	mov.w	sl, #0
 800bdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f43f ae0f 	beq.w	800b9f2 <_strtod_l+0x72>
 800bdd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdd6:	9805      	ldr	r0, [sp, #20]
 800bdd8:	f7ff f942 	bl	800b060 <_Bfree>
 800bddc:	9805      	ldr	r0, [sp, #20]
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7ff f93e 	bl	800b060 <_Bfree>
 800bde4:	9805      	ldr	r0, [sp, #20]
 800bde6:	4641      	mov	r1, r8
 800bde8:	f7ff f93a 	bl	800b060 <_Bfree>
 800bdec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdee:	9805      	ldr	r0, [sp, #20]
 800bdf0:	f7ff f936 	bl	800b060 <_Bfree>
 800bdf4:	9805      	ldr	r0, [sp, #20]
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	f7ff f932 	bl	800b060 <_Bfree>
 800bdfc:	e5f9      	b.n	800b9f2 <_strtod_l+0x72>
 800bdfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800be04:	4293      	cmp	r3, r2
 800be06:	dbbc      	blt.n	800bd82 <_strtod_l+0x402>
 800be08:	4c41      	ldr	r4, [pc, #260]	@ (800bf10 <_strtod_l+0x590>)
 800be0a:	f1c5 050f 	rsb	r5, r5, #15
 800be0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be1a:	f7f4 fc0d 	bl	8000638 <__aeabi_dmul>
 800be1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be20:	1b5d      	subs	r5, r3, r5
 800be22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be2a:	e78f      	b.n	800bd4c <_strtod_l+0x3cc>
 800be2c:	3316      	adds	r3, #22
 800be2e:	dba8      	blt.n	800bd82 <_strtod_l+0x402>
 800be30:	4b37      	ldr	r3, [pc, #220]	@ (800bf10 <_strtod_l+0x590>)
 800be32:	eba9 0808 	sub.w	r8, r9, r8
 800be36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800be3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800be3e:	4650      	mov	r0, sl
 800be40:	4659      	mov	r1, fp
 800be42:	f7f4 fd23 	bl	800088c <__aeabi_ddiv>
 800be46:	e783      	b.n	800bd50 <_strtod_l+0x3d0>
 800be48:	4b32      	ldr	r3, [pc, #200]	@ (800bf14 <_strtod_l+0x594>)
 800be4a:	9308      	str	r3, [sp, #32]
 800be4c:	2300      	movs	r3, #0
 800be4e:	1124      	asrs	r4, r4, #4
 800be50:	4650      	mov	r0, sl
 800be52:	4659      	mov	r1, fp
 800be54:	461e      	mov	r6, r3
 800be56:	2c01      	cmp	r4, #1
 800be58:	dc21      	bgt.n	800be9e <_strtod_l+0x51e>
 800be5a:	b10b      	cbz	r3, 800be60 <_strtod_l+0x4e0>
 800be5c:	4682      	mov	sl, r0
 800be5e:	468b      	mov	fp, r1
 800be60:	492c      	ldr	r1, [pc, #176]	@ (800bf14 <_strtod_l+0x594>)
 800be62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800be66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800be6a:	4652      	mov	r2, sl
 800be6c:	465b      	mov	r3, fp
 800be6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be72:	f7f4 fbe1 	bl	8000638 <__aeabi_dmul>
 800be76:	4b28      	ldr	r3, [pc, #160]	@ (800bf18 <_strtod_l+0x598>)
 800be78:	460a      	mov	r2, r1
 800be7a:	400b      	ands	r3, r1
 800be7c:	4927      	ldr	r1, [pc, #156]	@ (800bf1c <_strtod_l+0x59c>)
 800be7e:	428b      	cmp	r3, r1
 800be80:	4682      	mov	sl, r0
 800be82:	d898      	bhi.n	800bdb6 <_strtod_l+0x436>
 800be84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be88:	428b      	cmp	r3, r1
 800be8a:	bf86      	itte	hi
 800be8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bf20 <_strtod_l+0x5a0>
 800be90:	f04f 3aff 	movhi.w	sl, #4294967295
 800be94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be98:	2300      	movs	r3, #0
 800be9a:	9308      	str	r3, [sp, #32]
 800be9c:	e07a      	b.n	800bf94 <_strtod_l+0x614>
 800be9e:	07e2      	lsls	r2, r4, #31
 800bea0:	d505      	bpl.n	800beae <_strtod_l+0x52e>
 800bea2:	9b08      	ldr	r3, [sp, #32]
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f7f4 fbc6 	bl	8000638 <__aeabi_dmul>
 800beac:	2301      	movs	r3, #1
 800beae:	9a08      	ldr	r2, [sp, #32]
 800beb0:	3208      	adds	r2, #8
 800beb2:	3601      	adds	r6, #1
 800beb4:	1064      	asrs	r4, r4, #1
 800beb6:	9208      	str	r2, [sp, #32]
 800beb8:	e7cd      	b.n	800be56 <_strtod_l+0x4d6>
 800beba:	d0ed      	beq.n	800be98 <_strtod_l+0x518>
 800bebc:	4264      	negs	r4, r4
 800bebe:	f014 020f 	ands.w	r2, r4, #15
 800bec2:	d00a      	beq.n	800beda <_strtod_l+0x55a>
 800bec4:	4b12      	ldr	r3, [pc, #72]	@ (800bf10 <_strtod_l+0x590>)
 800bec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beca:	4650      	mov	r0, sl
 800becc:	4659      	mov	r1, fp
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 fcdb 	bl	800088c <__aeabi_ddiv>
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	1124      	asrs	r4, r4, #4
 800bedc:	d0dc      	beq.n	800be98 <_strtod_l+0x518>
 800bede:	2c1f      	cmp	r4, #31
 800bee0:	dd20      	ble.n	800bf24 <_strtod_l+0x5a4>
 800bee2:	2400      	movs	r4, #0
 800bee4:	46a0      	mov	r8, r4
 800bee6:	940a      	str	r4, [sp, #40]	@ 0x28
 800bee8:	46a1      	mov	r9, r4
 800beea:	9a05      	ldr	r2, [sp, #20]
 800beec:	2322      	movs	r3, #34	@ 0x22
 800beee:	f04f 0a00 	mov.w	sl, #0
 800bef2:	f04f 0b00 	mov.w	fp, #0
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	e768      	b.n	800bdcc <_strtod_l+0x44c>
 800befa:	bf00      	nop
 800befc:	0800eead 	.word	0x0800eead
 800bf00:	0800f0c4 	.word	0x0800f0c4
 800bf04:	0800eea5 	.word	0x0800eea5
 800bf08:	0800eedc 	.word	0x0800eedc
 800bf0c:	0800f26d 	.word	0x0800f26d
 800bf10:	0800eff8 	.word	0x0800eff8
 800bf14:	0800efd0 	.word	0x0800efd0
 800bf18:	7ff00000 	.word	0x7ff00000
 800bf1c:	7ca00000 	.word	0x7ca00000
 800bf20:	7fefffff 	.word	0x7fefffff
 800bf24:	f014 0310 	ands.w	r3, r4, #16
 800bf28:	bf18      	it	ne
 800bf2a:	236a      	movne	r3, #106	@ 0x6a
 800bf2c:	4ea9      	ldr	r6, [pc, #676]	@ (800c1d4 <_strtod_l+0x854>)
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	4650      	mov	r0, sl
 800bf32:	4659      	mov	r1, fp
 800bf34:	2300      	movs	r3, #0
 800bf36:	07e2      	lsls	r2, r4, #31
 800bf38:	d504      	bpl.n	800bf44 <_strtod_l+0x5c4>
 800bf3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf3e:	f7f4 fb7b 	bl	8000638 <__aeabi_dmul>
 800bf42:	2301      	movs	r3, #1
 800bf44:	1064      	asrs	r4, r4, #1
 800bf46:	f106 0608 	add.w	r6, r6, #8
 800bf4a:	d1f4      	bne.n	800bf36 <_strtod_l+0x5b6>
 800bf4c:	b10b      	cbz	r3, 800bf52 <_strtod_l+0x5d2>
 800bf4e:	4682      	mov	sl, r0
 800bf50:	468b      	mov	fp, r1
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	b1b3      	cbz	r3, 800bf84 <_strtod_l+0x604>
 800bf56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bf5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	4659      	mov	r1, fp
 800bf62:	dd0f      	ble.n	800bf84 <_strtod_l+0x604>
 800bf64:	2b1f      	cmp	r3, #31
 800bf66:	dd55      	ble.n	800c014 <_strtod_l+0x694>
 800bf68:	2b34      	cmp	r3, #52	@ 0x34
 800bf6a:	bfde      	ittt	le
 800bf6c:	f04f 33ff 	movle.w	r3, #4294967295
 800bf70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bf74:	4093      	lslle	r3, r2
 800bf76:	f04f 0a00 	mov.w	sl, #0
 800bf7a:	bfcc      	ite	gt
 800bf7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf80:	ea03 0b01 	andle.w	fp, r3, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	2300      	movs	r3, #0
 800bf88:	4650      	mov	r0, sl
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	f7f4 fdbc 	bl	8000b08 <__aeabi_dcmpeq>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d1a6      	bne.n	800bee2 <_strtod_l+0x562>
 800bf94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf9a:	9805      	ldr	r0, [sp, #20]
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	463a      	mov	r2, r7
 800bfa0:	f7ff f8c6 	bl	800b130 <__s2b>
 800bfa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f43f af05 	beq.w	800bdb6 <_strtod_l+0x436>
 800bfac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfae:	2a00      	cmp	r2, #0
 800bfb0:	eba9 0308 	sub.w	r3, r9, r8
 800bfb4:	bfa8      	it	ge
 800bfb6:	2300      	movge	r3, #0
 800bfb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfba:	2400      	movs	r4, #0
 800bfbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bfc0:	9316      	str	r3, [sp, #88]	@ 0x58
 800bfc2:	46a0      	mov	r8, r4
 800bfc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfc6:	9805      	ldr	r0, [sp, #20]
 800bfc8:	6859      	ldr	r1, [r3, #4]
 800bfca:	f7ff f809 	bl	800afe0 <_Balloc>
 800bfce:	4681      	mov	r9, r0
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f43f aef4 	beq.w	800bdbe <_strtod_l+0x43e>
 800bfd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd8:	691a      	ldr	r2, [r3, #16]
 800bfda:	3202      	adds	r2, #2
 800bfdc:	f103 010c 	add.w	r1, r3, #12
 800bfe0:	0092      	lsls	r2, r2, #2
 800bfe2:	300c      	adds	r0, #12
 800bfe4:	f000 fd72 	bl	800cacc <memcpy>
 800bfe8:	ec4b ab10 	vmov	d0, sl, fp
 800bfec:	9805      	ldr	r0, [sp, #20]
 800bfee:	aa1c      	add	r2, sp, #112	@ 0x70
 800bff0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bff2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bff6:	f7ff fbd7 	bl	800b7a8 <__d2b>
 800bffa:	901a      	str	r0, [sp, #104]	@ 0x68
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f43f aede 	beq.w	800bdbe <_strtod_l+0x43e>
 800c002:	9805      	ldr	r0, [sp, #20]
 800c004:	2101      	movs	r1, #1
 800c006:	f7ff f929 	bl	800b25c <__i2b>
 800c00a:	4680      	mov	r8, r0
 800c00c:	b948      	cbnz	r0, 800c022 <_strtod_l+0x6a2>
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	e6d4      	b.n	800bdbe <_strtod_l+0x43e>
 800c014:	f04f 32ff 	mov.w	r2, #4294967295
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	ea03 0a0a 	and.w	sl, r3, sl
 800c020:	e7b0      	b.n	800bf84 <_strtod_l+0x604>
 800c022:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c024:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c026:	2d00      	cmp	r5, #0
 800c028:	bfab      	itete	ge
 800c02a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c02c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c02e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c030:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c032:	bfac      	ite	ge
 800c034:	18ef      	addge	r7, r5, r3
 800c036:	1b5e      	sublt	r6, r3, r5
 800c038:	9b08      	ldr	r3, [sp, #32]
 800c03a:	1aed      	subs	r5, r5, r3
 800c03c:	4415      	add	r5, r2
 800c03e:	4b66      	ldr	r3, [pc, #408]	@ (800c1d8 <_strtod_l+0x858>)
 800c040:	3d01      	subs	r5, #1
 800c042:	429d      	cmp	r5, r3
 800c044:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c048:	da50      	bge.n	800c0ec <_strtod_l+0x76c>
 800c04a:	1b5b      	subs	r3, r3, r5
 800c04c:	2b1f      	cmp	r3, #31
 800c04e:	eba2 0203 	sub.w	r2, r2, r3
 800c052:	f04f 0101 	mov.w	r1, #1
 800c056:	dc3d      	bgt.n	800c0d4 <_strtod_l+0x754>
 800c058:	fa01 f303 	lsl.w	r3, r1, r3
 800c05c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c05e:	2300      	movs	r3, #0
 800c060:	9310      	str	r3, [sp, #64]	@ 0x40
 800c062:	18bd      	adds	r5, r7, r2
 800c064:	9b08      	ldr	r3, [sp, #32]
 800c066:	42af      	cmp	r7, r5
 800c068:	4416      	add	r6, r2
 800c06a:	441e      	add	r6, r3
 800c06c:	463b      	mov	r3, r7
 800c06e:	bfa8      	it	ge
 800c070:	462b      	movge	r3, r5
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfa8      	it	ge
 800c076:	4633      	movge	r3, r6
 800c078:	2b00      	cmp	r3, #0
 800c07a:	bfc2      	ittt	gt
 800c07c:	1aed      	subgt	r5, r5, r3
 800c07e:	1af6      	subgt	r6, r6, r3
 800c080:	1aff      	subgt	r7, r7, r3
 800c082:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c084:	2b00      	cmp	r3, #0
 800c086:	dd16      	ble.n	800c0b6 <_strtod_l+0x736>
 800c088:	4641      	mov	r1, r8
 800c08a:	9805      	ldr	r0, [sp, #20]
 800c08c:	461a      	mov	r2, r3
 800c08e:	f7ff f9a5 	bl	800b3dc <__pow5mult>
 800c092:	4680      	mov	r8, r0
 800c094:	2800      	cmp	r0, #0
 800c096:	d0ba      	beq.n	800c00e <_strtod_l+0x68e>
 800c098:	4601      	mov	r1, r0
 800c09a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c09c:	9805      	ldr	r0, [sp, #20]
 800c09e:	f7ff f8f3 	bl	800b288 <__multiply>
 800c0a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	f43f ae8a 	beq.w	800bdbe <_strtod_l+0x43e>
 800c0aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0ac:	9805      	ldr	r0, [sp, #20]
 800c0ae:	f7fe ffd7 	bl	800b060 <_Bfree>
 800c0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	dc1d      	bgt.n	800c0f6 <_strtod_l+0x776>
 800c0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd23      	ble.n	800c108 <_strtod_l+0x788>
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c0c4:	9805      	ldr	r0, [sp, #20]
 800c0c6:	f7ff f989 	bl	800b3dc <__pow5mult>
 800c0ca:	4681      	mov	r9, r0
 800c0cc:	b9e0      	cbnz	r0, 800c108 <_strtod_l+0x788>
 800c0ce:	f04f 0900 	mov.w	r9, #0
 800c0d2:	e674      	b.n	800bdbe <_strtod_l+0x43e>
 800c0d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c0d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c0dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c0e0:	35e2      	adds	r5, #226	@ 0xe2
 800c0e2:	fa01 f305 	lsl.w	r3, r1, r5
 800c0e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c0ea:	e7ba      	b.n	800c062 <_strtod_l+0x6e2>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0f4:	e7b5      	b.n	800c062 <_strtod_l+0x6e2>
 800c0f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0f8:	9805      	ldr	r0, [sp, #20]
 800c0fa:	462a      	mov	r2, r5
 800c0fc:	f7ff f9c8 	bl	800b490 <__lshift>
 800c100:	901a      	str	r0, [sp, #104]	@ 0x68
 800c102:	2800      	cmp	r0, #0
 800c104:	d1d9      	bne.n	800c0ba <_strtod_l+0x73a>
 800c106:	e65a      	b.n	800bdbe <_strtod_l+0x43e>
 800c108:	2e00      	cmp	r6, #0
 800c10a:	dd07      	ble.n	800c11c <_strtod_l+0x79c>
 800c10c:	4649      	mov	r1, r9
 800c10e:	9805      	ldr	r0, [sp, #20]
 800c110:	4632      	mov	r2, r6
 800c112:	f7ff f9bd 	bl	800b490 <__lshift>
 800c116:	4681      	mov	r9, r0
 800c118:	2800      	cmp	r0, #0
 800c11a:	d0d8      	beq.n	800c0ce <_strtod_l+0x74e>
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	dd08      	ble.n	800c132 <_strtod_l+0x7b2>
 800c120:	4641      	mov	r1, r8
 800c122:	9805      	ldr	r0, [sp, #20]
 800c124:	463a      	mov	r2, r7
 800c126:	f7ff f9b3 	bl	800b490 <__lshift>
 800c12a:	4680      	mov	r8, r0
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f43f ae46 	beq.w	800bdbe <_strtod_l+0x43e>
 800c132:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c134:	9805      	ldr	r0, [sp, #20]
 800c136:	464a      	mov	r2, r9
 800c138:	f7ff fa32 	bl	800b5a0 <__mdiff>
 800c13c:	4604      	mov	r4, r0
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f ae3d 	beq.w	800bdbe <_strtod_l+0x43e>
 800c144:	68c3      	ldr	r3, [r0, #12]
 800c146:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c148:	2300      	movs	r3, #0
 800c14a:	60c3      	str	r3, [r0, #12]
 800c14c:	4641      	mov	r1, r8
 800c14e:	f7ff fa0b 	bl	800b568 <__mcmp>
 800c152:	2800      	cmp	r0, #0
 800c154:	da46      	bge.n	800c1e4 <_strtod_l+0x864>
 800c156:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c158:	ea53 030a 	orrs.w	r3, r3, sl
 800c15c:	d16c      	bne.n	800c238 <_strtod_l+0x8b8>
 800c15e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c162:	2b00      	cmp	r3, #0
 800c164:	d168      	bne.n	800c238 <_strtod_l+0x8b8>
 800c166:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c16a:	0d1b      	lsrs	r3, r3, #20
 800c16c:	051b      	lsls	r3, r3, #20
 800c16e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c172:	d961      	bls.n	800c238 <_strtod_l+0x8b8>
 800c174:	6963      	ldr	r3, [r4, #20]
 800c176:	b913      	cbnz	r3, 800c17e <_strtod_l+0x7fe>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	dd5c      	ble.n	800c238 <_strtod_l+0x8b8>
 800c17e:	4621      	mov	r1, r4
 800c180:	2201      	movs	r2, #1
 800c182:	9805      	ldr	r0, [sp, #20]
 800c184:	f7ff f984 	bl	800b490 <__lshift>
 800c188:	4641      	mov	r1, r8
 800c18a:	4604      	mov	r4, r0
 800c18c:	f7ff f9ec 	bl	800b568 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dd51      	ble.n	800c238 <_strtod_l+0x8b8>
 800c194:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c198:	9a08      	ldr	r2, [sp, #32]
 800c19a:	0d1b      	lsrs	r3, r3, #20
 800c19c:	051b      	lsls	r3, r3, #20
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	d06b      	beq.n	800c27a <_strtod_l+0x8fa>
 800c1a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c1a6:	d868      	bhi.n	800c27a <_strtod_l+0x8fa>
 800c1a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c1ac:	f67f ae9d 	bls.w	800beea <_strtod_l+0x56a>
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <_strtod_l+0x85c>)
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	4659      	mov	r1, fp
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f7f4 fa3e 	bl	8000638 <__aeabi_dmul>
 800c1bc:	4b08      	ldr	r3, [pc, #32]	@ (800c1e0 <_strtod_l+0x860>)
 800c1be:	400b      	ands	r3, r1
 800c1c0:	4682      	mov	sl, r0
 800c1c2:	468b      	mov	fp, r1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f47f ae05 	bne.w	800bdd4 <_strtod_l+0x454>
 800c1ca:	9a05      	ldr	r2, [sp, #20]
 800c1cc:	2322      	movs	r3, #34	@ 0x22
 800c1ce:	6013      	str	r3, [r2, #0]
 800c1d0:	e600      	b.n	800bdd4 <_strtod_l+0x454>
 800c1d2:	bf00      	nop
 800c1d4:	0800f0f0 	.word	0x0800f0f0
 800c1d8:	fffffc02 	.word	0xfffffc02
 800c1dc:	39500000 	.word	0x39500000
 800c1e0:	7ff00000 	.word	0x7ff00000
 800c1e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c1e8:	d165      	bne.n	800c2b6 <_strtod_l+0x936>
 800c1ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c1ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1f0:	b35a      	cbz	r2, 800c24a <_strtod_l+0x8ca>
 800c1f2:	4a9f      	ldr	r2, [pc, #636]	@ (800c470 <_strtod_l+0xaf0>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d12b      	bne.n	800c250 <_strtod_l+0x8d0>
 800c1f8:	9b08      	ldr	r3, [sp, #32]
 800c1fa:	4651      	mov	r1, sl
 800c1fc:	b303      	cbz	r3, 800c240 <_strtod_l+0x8c0>
 800c1fe:	4b9d      	ldr	r3, [pc, #628]	@ (800c474 <_strtod_l+0xaf4>)
 800c200:	465a      	mov	r2, fp
 800c202:	4013      	ands	r3, r2
 800c204:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c208:	f04f 32ff 	mov.w	r2, #4294967295
 800c20c:	d81b      	bhi.n	800c246 <_strtod_l+0x8c6>
 800c20e:	0d1b      	lsrs	r3, r3, #20
 800c210:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c214:	fa02 f303 	lsl.w	r3, r2, r3
 800c218:	4299      	cmp	r1, r3
 800c21a:	d119      	bne.n	800c250 <_strtod_l+0x8d0>
 800c21c:	4b96      	ldr	r3, [pc, #600]	@ (800c478 <_strtod_l+0xaf8>)
 800c21e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c220:	429a      	cmp	r2, r3
 800c222:	d102      	bne.n	800c22a <_strtod_l+0x8aa>
 800c224:	3101      	adds	r1, #1
 800c226:	f43f adca 	beq.w	800bdbe <_strtod_l+0x43e>
 800c22a:	4b92      	ldr	r3, [pc, #584]	@ (800c474 <_strtod_l+0xaf4>)
 800c22c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c22e:	401a      	ands	r2, r3
 800c230:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c234:	f04f 0a00 	mov.w	sl, #0
 800c238:	9b08      	ldr	r3, [sp, #32]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1b8      	bne.n	800c1b0 <_strtod_l+0x830>
 800c23e:	e5c9      	b.n	800bdd4 <_strtod_l+0x454>
 800c240:	f04f 33ff 	mov.w	r3, #4294967295
 800c244:	e7e8      	b.n	800c218 <_strtod_l+0x898>
 800c246:	4613      	mov	r3, r2
 800c248:	e7e6      	b.n	800c218 <_strtod_l+0x898>
 800c24a:	ea53 030a 	orrs.w	r3, r3, sl
 800c24e:	d0a1      	beq.n	800c194 <_strtod_l+0x814>
 800c250:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c252:	b1db      	cbz	r3, 800c28c <_strtod_l+0x90c>
 800c254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c256:	4213      	tst	r3, r2
 800c258:	d0ee      	beq.n	800c238 <_strtod_l+0x8b8>
 800c25a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25c:	9a08      	ldr	r2, [sp, #32]
 800c25e:	4650      	mov	r0, sl
 800c260:	4659      	mov	r1, fp
 800c262:	b1bb      	cbz	r3, 800c294 <_strtod_l+0x914>
 800c264:	f7ff fb6e 	bl	800b944 <sulp>
 800c268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c26c:	ec53 2b10 	vmov	r2, r3, d0
 800c270:	f7f4 f82c 	bl	80002cc <__adddf3>
 800c274:	4682      	mov	sl, r0
 800c276:	468b      	mov	fp, r1
 800c278:	e7de      	b.n	800c238 <_strtod_l+0x8b8>
 800c27a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c27e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c282:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c286:	f04f 3aff 	mov.w	sl, #4294967295
 800c28a:	e7d5      	b.n	800c238 <_strtod_l+0x8b8>
 800c28c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c28e:	ea13 0f0a 	tst.w	r3, sl
 800c292:	e7e1      	b.n	800c258 <_strtod_l+0x8d8>
 800c294:	f7ff fb56 	bl	800b944 <sulp>
 800c298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c29c:	ec53 2b10 	vmov	r2, r3, d0
 800c2a0:	f7f4 f812 	bl	80002c8 <__aeabi_dsub>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4682      	mov	sl, r0
 800c2aa:	468b      	mov	fp, r1
 800c2ac:	f7f4 fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d0c1      	beq.n	800c238 <_strtod_l+0x8b8>
 800c2b4:	e619      	b.n	800beea <_strtod_l+0x56a>
 800c2b6:	4641      	mov	r1, r8
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff facd 	bl	800b858 <__ratio>
 800c2be:	ec57 6b10 	vmov	r6, r7, d0
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f4 fc30 	bl	8000b30 <__aeabi_dcmple>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d06f      	beq.n	800c3b4 <_strtod_l+0xa34>
 800c2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d17a      	bne.n	800c3d0 <_strtod_l+0xa50>
 800c2da:	f1ba 0f00 	cmp.w	sl, #0
 800c2de:	d158      	bne.n	800c392 <_strtod_l+0xa12>
 800c2e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d15a      	bne.n	800c3a0 <_strtod_l+0xa20>
 800c2ea:	4b64      	ldr	r3, [pc, #400]	@ (800c47c <_strtod_l+0xafc>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f7f4 fc13 	bl	8000b1c <__aeabi_dcmplt>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d159      	bne.n	800c3ae <_strtod_l+0xa2e>
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4b60      	ldr	r3, [pc, #384]	@ (800c480 <_strtod_l+0xb00>)
 800c300:	2200      	movs	r2, #0
 800c302:	f7f4 f999 	bl	8000638 <__aeabi_dmul>
 800c306:	4606      	mov	r6, r0
 800c308:	460f      	mov	r7, r1
 800c30a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c30e:	9606      	str	r6, [sp, #24]
 800c310:	9307      	str	r3, [sp, #28]
 800c312:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c316:	4d57      	ldr	r5, [pc, #348]	@ (800c474 <_strtod_l+0xaf4>)
 800c318:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c31e:	401d      	ands	r5, r3
 800c320:	4b58      	ldr	r3, [pc, #352]	@ (800c484 <_strtod_l+0xb04>)
 800c322:	429d      	cmp	r5, r3
 800c324:	f040 80b2 	bne.w	800c48c <_strtod_l+0xb0c>
 800c328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c32e:	ec4b ab10 	vmov	d0, sl, fp
 800c332:	f7ff f9c9 	bl	800b6c8 <__ulp>
 800c336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c33a:	ec51 0b10 	vmov	r0, r1, d0
 800c33e:	f7f4 f97b 	bl	8000638 <__aeabi_dmul>
 800c342:	4652      	mov	r2, sl
 800c344:	465b      	mov	r3, fp
 800c346:	f7f3 ffc1 	bl	80002cc <__adddf3>
 800c34a:	460b      	mov	r3, r1
 800c34c:	4949      	ldr	r1, [pc, #292]	@ (800c474 <_strtod_l+0xaf4>)
 800c34e:	4a4e      	ldr	r2, [pc, #312]	@ (800c488 <_strtod_l+0xb08>)
 800c350:	4019      	ands	r1, r3
 800c352:	4291      	cmp	r1, r2
 800c354:	4682      	mov	sl, r0
 800c356:	d942      	bls.n	800c3de <_strtod_l+0xa5e>
 800c358:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c35a:	4b47      	ldr	r3, [pc, #284]	@ (800c478 <_strtod_l+0xaf8>)
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d103      	bne.n	800c368 <_strtod_l+0x9e8>
 800c360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c362:	3301      	adds	r3, #1
 800c364:	f43f ad2b 	beq.w	800bdbe <_strtod_l+0x43e>
 800c368:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c478 <_strtod_l+0xaf8>
 800c36c:	f04f 3aff 	mov.w	sl, #4294967295
 800c370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c372:	9805      	ldr	r0, [sp, #20]
 800c374:	f7fe fe74 	bl	800b060 <_Bfree>
 800c378:	9805      	ldr	r0, [sp, #20]
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7fe fe70 	bl	800b060 <_Bfree>
 800c380:	9805      	ldr	r0, [sp, #20]
 800c382:	4641      	mov	r1, r8
 800c384:	f7fe fe6c 	bl	800b060 <_Bfree>
 800c388:	9805      	ldr	r0, [sp, #20]
 800c38a:	4621      	mov	r1, r4
 800c38c:	f7fe fe68 	bl	800b060 <_Bfree>
 800c390:	e618      	b.n	800bfc4 <_strtod_l+0x644>
 800c392:	f1ba 0f01 	cmp.w	sl, #1
 800c396:	d103      	bne.n	800c3a0 <_strtod_l+0xa20>
 800c398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f43f ada5 	beq.w	800beea <_strtod_l+0x56a>
 800c3a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c450 <_strtod_l+0xad0>
 800c3a4:	4f35      	ldr	r7, [pc, #212]	@ (800c47c <_strtod_l+0xafc>)
 800c3a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	e7b1      	b.n	800c312 <_strtod_l+0x992>
 800c3ae:	4f34      	ldr	r7, [pc, #208]	@ (800c480 <_strtod_l+0xb00>)
 800c3b0:	2600      	movs	r6, #0
 800c3b2:	e7aa      	b.n	800c30a <_strtod_l+0x98a>
 800c3b4:	4b32      	ldr	r3, [pc, #200]	@ (800c480 <_strtod_l+0xb00>)
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	4639      	mov	r1, r7
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f7f4 f93c 	bl	8000638 <__aeabi_dmul>
 800c3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d09f      	beq.n	800c30a <_strtod_l+0x98a>
 800c3ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c3ce:	e7a0      	b.n	800c312 <_strtod_l+0x992>
 800c3d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c458 <_strtod_l+0xad8>
 800c3d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3d8:	ec57 6b17 	vmov	r6, r7, d7
 800c3dc:	e799      	b.n	800c312 <_strtod_l+0x992>
 800c3de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c3e2:	9b08      	ldr	r3, [sp, #32]
 800c3e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1c1      	bne.n	800c370 <_strtod_l+0x9f0>
 800c3ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3f0:	0d1b      	lsrs	r3, r3, #20
 800c3f2:	051b      	lsls	r3, r3, #20
 800c3f4:	429d      	cmp	r5, r3
 800c3f6:	d1bb      	bne.n	800c370 <_strtod_l+0x9f0>
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fccc 	bl	8000d98 <__aeabi_d2lz>
 800c400:	f7f4 f8ec 	bl	80005dc <__aeabi_l2d>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4630      	mov	r0, r6
 800c40a:	4639      	mov	r1, r7
 800c40c:	f7f3 ff5c 	bl	80002c8 <__aeabi_dsub>
 800c410:	460b      	mov	r3, r1
 800c412:	4602      	mov	r2, r0
 800c414:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c418:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c41e:	ea46 060a 	orr.w	r6, r6, sl
 800c422:	431e      	orrs	r6, r3
 800c424:	d06f      	beq.n	800c506 <_strtod_l+0xb86>
 800c426:	a30e      	add	r3, pc, #56	@ (adr r3, 800c460 <_strtod_l+0xae0>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f7f4 fb76 	bl	8000b1c <__aeabi_dcmplt>
 800c430:	2800      	cmp	r0, #0
 800c432:	f47f accf 	bne.w	800bdd4 <_strtod_l+0x454>
 800c436:	a30c      	add	r3, pc, #48	@ (adr r3, 800c468 <_strtod_l+0xae8>)
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c440:	f7f4 fb8a 	bl	8000b58 <__aeabi_dcmpgt>
 800c444:	2800      	cmp	r0, #0
 800c446:	d093      	beq.n	800c370 <_strtod_l+0x9f0>
 800c448:	e4c4      	b.n	800bdd4 <_strtod_l+0x454>
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w
 800c450:	00000000 	.word	0x00000000
 800c454:	bff00000 	.word	0xbff00000
 800c458:	00000000 	.word	0x00000000
 800c45c:	3ff00000 	.word	0x3ff00000
 800c460:	94a03595 	.word	0x94a03595
 800c464:	3fdfffff 	.word	0x3fdfffff
 800c468:	35afe535 	.word	0x35afe535
 800c46c:	3fe00000 	.word	0x3fe00000
 800c470:	000fffff 	.word	0x000fffff
 800c474:	7ff00000 	.word	0x7ff00000
 800c478:	7fefffff 	.word	0x7fefffff
 800c47c:	3ff00000 	.word	0x3ff00000
 800c480:	3fe00000 	.word	0x3fe00000
 800c484:	7fe00000 	.word	0x7fe00000
 800c488:	7c9fffff 	.word	0x7c9fffff
 800c48c:	9b08      	ldr	r3, [sp, #32]
 800c48e:	b323      	cbz	r3, 800c4da <_strtod_l+0xb5a>
 800c490:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c494:	d821      	bhi.n	800c4da <_strtod_l+0xb5a>
 800c496:	a328      	add	r3, pc, #160	@ (adr r3, 800c538 <_strtod_l+0xbb8>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4630      	mov	r0, r6
 800c49e:	4639      	mov	r1, r7
 800c4a0:	f7f4 fb46 	bl	8000b30 <__aeabi_dcmple>
 800c4a4:	b1a0      	cbz	r0, 800c4d0 <_strtod_l+0xb50>
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7f4 fb9d 	bl	8000be8 <__aeabi_d2uiz>
 800c4ae:	2801      	cmp	r0, #1
 800c4b0:	bf38      	it	cc
 800c4b2:	2001      	movcc	r0, #1
 800c4b4:	f7f4 f846 	bl	8000544 <__aeabi_ui2d>
 800c4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	b9fb      	cbnz	r3, 800c500 <_strtod_l+0xb80>
 800c4c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c4c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c4c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c4c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c4cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c4d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c4d6:	1b5b      	subs	r3, r3, r5
 800c4d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c4e2:	f7ff f8f1 	bl	800b6c8 <__ulp>
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	ec53 2b10 	vmov	r2, r3, d0
 800c4ec:	4659      	mov	r1, fp
 800c4ee:	f7f4 f8a3 	bl	8000638 <__aeabi_dmul>
 800c4f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c4f6:	f7f3 fee9 	bl	80002cc <__adddf3>
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	468b      	mov	fp, r1
 800c4fe:	e770      	b.n	800c3e2 <_strtod_l+0xa62>
 800c500:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c504:	e7e0      	b.n	800c4c8 <_strtod_l+0xb48>
 800c506:	a30e      	add	r3, pc, #56	@ (adr r3, 800c540 <_strtod_l+0xbc0>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f7f4 fb06 	bl	8000b1c <__aeabi_dcmplt>
 800c510:	e798      	b.n	800c444 <_strtod_l+0xac4>
 800c512:	2300      	movs	r3, #0
 800c514:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c516:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	f7ff ba6d 	b.w	800b9fa <_strtod_l+0x7a>
 800c520:	2a65      	cmp	r2, #101	@ 0x65
 800c522:	f43f ab66 	beq.w	800bbf2 <_strtod_l+0x272>
 800c526:	2a45      	cmp	r2, #69	@ 0x45
 800c528:	f43f ab63 	beq.w	800bbf2 <_strtod_l+0x272>
 800c52c:	2301      	movs	r3, #1
 800c52e:	f7ff bb9e 	b.w	800bc6e <_strtod_l+0x2ee>
 800c532:	bf00      	nop
 800c534:	f3af 8000 	nop.w
 800c538:	ffc00000 	.word	0xffc00000
 800c53c:	41dfffff 	.word	0x41dfffff
 800c540:	94a03595 	.word	0x94a03595
 800c544:	3fcfffff 	.word	0x3fcfffff

0800c548 <_strtod_r>:
 800c548:	4b01      	ldr	r3, [pc, #4]	@ (800c550 <_strtod_r+0x8>)
 800c54a:	f7ff ba19 	b.w	800b980 <_strtod_l>
 800c54e:	bf00      	nop
 800c550:	20000104 	.word	0x20000104

0800c554 <_strtol_l.constprop.0>:
 800c554:	2b24      	cmp	r3, #36	@ 0x24
 800c556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c55a:	4686      	mov	lr, r0
 800c55c:	4690      	mov	r8, r2
 800c55e:	d801      	bhi.n	800c564 <_strtol_l.constprop.0+0x10>
 800c560:	2b01      	cmp	r3, #1
 800c562:	d106      	bne.n	800c572 <_strtol_l.constprop.0+0x1e>
 800c564:	f7fd fdbc 	bl	800a0e0 <__errno>
 800c568:	2316      	movs	r3, #22
 800c56a:	6003      	str	r3, [r0, #0]
 800c56c:	2000      	movs	r0, #0
 800c56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c572:	4834      	ldr	r0, [pc, #208]	@ (800c644 <_strtol_l.constprop.0+0xf0>)
 800c574:	460d      	mov	r5, r1
 800c576:	462a      	mov	r2, r5
 800c578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c57c:	5d06      	ldrb	r6, [r0, r4]
 800c57e:	f016 0608 	ands.w	r6, r6, #8
 800c582:	d1f8      	bne.n	800c576 <_strtol_l.constprop.0+0x22>
 800c584:	2c2d      	cmp	r4, #45	@ 0x2d
 800c586:	d12d      	bne.n	800c5e4 <_strtol_l.constprop.0+0x90>
 800c588:	782c      	ldrb	r4, [r5, #0]
 800c58a:	2601      	movs	r6, #1
 800c58c:	1c95      	adds	r5, r2, #2
 800c58e:	f033 0210 	bics.w	r2, r3, #16
 800c592:	d109      	bne.n	800c5a8 <_strtol_l.constprop.0+0x54>
 800c594:	2c30      	cmp	r4, #48	@ 0x30
 800c596:	d12a      	bne.n	800c5ee <_strtol_l.constprop.0+0x9a>
 800c598:	782a      	ldrb	r2, [r5, #0]
 800c59a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c59e:	2a58      	cmp	r2, #88	@ 0x58
 800c5a0:	d125      	bne.n	800c5ee <_strtol_l.constprop.0+0x9a>
 800c5a2:	786c      	ldrb	r4, [r5, #1]
 800c5a4:	2310      	movs	r3, #16
 800c5a6:	3502      	adds	r5, #2
 800c5a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c5ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	fbbc f9f3 	udiv	r9, ip, r3
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c5bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c5c0:	2f09      	cmp	r7, #9
 800c5c2:	d81b      	bhi.n	800c5fc <_strtol_l.constprop.0+0xa8>
 800c5c4:	463c      	mov	r4, r7
 800c5c6:	42a3      	cmp	r3, r4
 800c5c8:	dd27      	ble.n	800c61a <_strtol_l.constprop.0+0xc6>
 800c5ca:	1c57      	adds	r7, r2, #1
 800c5cc:	d007      	beq.n	800c5de <_strtol_l.constprop.0+0x8a>
 800c5ce:	4581      	cmp	r9, r0
 800c5d0:	d320      	bcc.n	800c614 <_strtol_l.constprop.0+0xc0>
 800c5d2:	d101      	bne.n	800c5d8 <_strtol_l.constprop.0+0x84>
 800c5d4:	45a2      	cmp	sl, r4
 800c5d6:	db1d      	blt.n	800c614 <_strtol_l.constprop.0+0xc0>
 800c5d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5e2:	e7eb      	b.n	800c5bc <_strtol_l.constprop.0+0x68>
 800c5e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c5e6:	bf04      	itt	eq
 800c5e8:	782c      	ldrbeq	r4, [r5, #0]
 800c5ea:	1c95      	addeq	r5, r2, #2
 800c5ec:	e7cf      	b.n	800c58e <_strtol_l.constprop.0+0x3a>
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1da      	bne.n	800c5a8 <_strtol_l.constprop.0+0x54>
 800c5f2:	2c30      	cmp	r4, #48	@ 0x30
 800c5f4:	bf0c      	ite	eq
 800c5f6:	2308      	moveq	r3, #8
 800c5f8:	230a      	movne	r3, #10
 800c5fa:	e7d5      	b.n	800c5a8 <_strtol_l.constprop.0+0x54>
 800c5fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c600:	2f19      	cmp	r7, #25
 800c602:	d801      	bhi.n	800c608 <_strtol_l.constprop.0+0xb4>
 800c604:	3c37      	subs	r4, #55	@ 0x37
 800c606:	e7de      	b.n	800c5c6 <_strtol_l.constprop.0+0x72>
 800c608:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c60c:	2f19      	cmp	r7, #25
 800c60e:	d804      	bhi.n	800c61a <_strtol_l.constprop.0+0xc6>
 800c610:	3c57      	subs	r4, #87	@ 0x57
 800c612:	e7d8      	b.n	800c5c6 <_strtol_l.constprop.0+0x72>
 800c614:	f04f 32ff 	mov.w	r2, #4294967295
 800c618:	e7e1      	b.n	800c5de <_strtol_l.constprop.0+0x8a>
 800c61a:	1c53      	adds	r3, r2, #1
 800c61c:	d108      	bne.n	800c630 <_strtol_l.constprop.0+0xdc>
 800c61e:	2322      	movs	r3, #34	@ 0x22
 800c620:	f8ce 3000 	str.w	r3, [lr]
 800c624:	4660      	mov	r0, ip
 800c626:	f1b8 0f00 	cmp.w	r8, #0
 800c62a:	d0a0      	beq.n	800c56e <_strtol_l.constprop.0+0x1a>
 800c62c:	1e69      	subs	r1, r5, #1
 800c62e:	e006      	b.n	800c63e <_strtol_l.constprop.0+0xea>
 800c630:	b106      	cbz	r6, 800c634 <_strtol_l.constprop.0+0xe0>
 800c632:	4240      	negs	r0, r0
 800c634:	f1b8 0f00 	cmp.w	r8, #0
 800c638:	d099      	beq.n	800c56e <_strtol_l.constprop.0+0x1a>
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d1f6      	bne.n	800c62c <_strtol_l.constprop.0+0xd8>
 800c63e:	f8c8 1000 	str.w	r1, [r8]
 800c642:	e794      	b.n	800c56e <_strtol_l.constprop.0+0x1a>
 800c644:	0800f119 	.word	0x0800f119

0800c648 <_strtol_r>:
 800c648:	f7ff bf84 	b.w	800c554 <_strtol_l.constprop.0>

0800c64c <__ssputs_r>:
 800c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c650:	688e      	ldr	r6, [r1, #8]
 800c652:	461f      	mov	r7, r3
 800c654:	42be      	cmp	r6, r7
 800c656:	680b      	ldr	r3, [r1, #0]
 800c658:	4682      	mov	sl, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4690      	mov	r8, r2
 800c65e:	d82d      	bhi.n	800c6bc <__ssputs_r+0x70>
 800c660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c668:	d026      	beq.n	800c6b8 <__ssputs_r+0x6c>
 800c66a:	6965      	ldr	r5, [r4, #20]
 800c66c:	6909      	ldr	r1, [r1, #16]
 800c66e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c672:	eba3 0901 	sub.w	r9, r3, r1
 800c676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c67a:	1c7b      	adds	r3, r7, #1
 800c67c:	444b      	add	r3, r9
 800c67e:	106d      	asrs	r5, r5, #1
 800c680:	429d      	cmp	r5, r3
 800c682:	bf38      	it	cc
 800c684:	461d      	movcc	r5, r3
 800c686:	0553      	lsls	r3, r2, #21
 800c688:	d527      	bpl.n	800c6da <__ssputs_r+0x8e>
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7fe fc1c 	bl	800aec8 <_malloc_r>
 800c690:	4606      	mov	r6, r0
 800c692:	b360      	cbz	r0, 800c6ee <__ssputs_r+0xa2>
 800c694:	6921      	ldr	r1, [r4, #16]
 800c696:	464a      	mov	r2, r9
 800c698:	f000 fa18 	bl	800cacc <memcpy>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	6126      	str	r6, [r4, #16]
 800c6aa:	6165      	str	r5, [r4, #20]
 800c6ac:	444e      	add	r6, r9
 800c6ae:	eba5 0509 	sub.w	r5, r5, r9
 800c6b2:	6026      	str	r6, [r4, #0]
 800c6b4:	60a5      	str	r5, [r4, #8]
 800c6b6:	463e      	mov	r6, r7
 800c6b8:	42be      	cmp	r6, r7
 800c6ba:	d900      	bls.n	800c6be <__ssputs_r+0x72>
 800c6bc:	463e      	mov	r6, r7
 800c6be:	6820      	ldr	r0, [r4, #0]
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	f000 f9c6 	bl	800ca54 <memmove>
 800c6c8:	68a3      	ldr	r3, [r4, #8]
 800c6ca:	1b9b      	subs	r3, r3, r6
 800c6cc:	60a3      	str	r3, [r4, #8]
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	4433      	add	r3, r6
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6da:	462a      	mov	r2, r5
 800c6dc:	f000 fd89 	bl	800d1f2 <_realloc_r>
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d1e0      	bne.n	800c6a8 <__ssputs_r+0x5c>
 800c6e6:	6921      	ldr	r1, [r4, #16]
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	f7fe fb79 	bl	800ade0 <_free_r>
 800c6ee:	230c      	movs	r3, #12
 800c6f0:	f8ca 3000 	str.w	r3, [sl]
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	e7e9      	b.n	800c6d6 <__ssputs_r+0x8a>
	...

0800c704 <_svfiprintf_r>:
 800c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	4698      	mov	r8, r3
 800c70a:	898b      	ldrh	r3, [r1, #12]
 800c70c:	061b      	lsls	r3, r3, #24
 800c70e:	b09d      	sub	sp, #116	@ 0x74
 800c710:	4607      	mov	r7, r0
 800c712:	460d      	mov	r5, r1
 800c714:	4614      	mov	r4, r2
 800c716:	d510      	bpl.n	800c73a <_svfiprintf_r+0x36>
 800c718:	690b      	ldr	r3, [r1, #16]
 800c71a:	b973      	cbnz	r3, 800c73a <_svfiprintf_r+0x36>
 800c71c:	2140      	movs	r1, #64	@ 0x40
 800c71e:	f7fe fbd3 	bl	800aec8 <_malloc_r>
 800c722:	6028      	str	r0, [r5, #0]
 800c724:	6128      	str	r0, [r5, #16]
 800c726:	b930      	cbnz	r0, 800c736 <_svfiprintf_r+0x32>
 800c728:	230c      	movs	r3, #12
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295
 800c730:	b01d      	add	sp, #116	@ 0x74
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	2340      	movs	r3, #64	@ 0x40
 800c738:	616b      	str	r3, [r5, #20]
 800c73a:	2300      	movs	r3, #0
 800c73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73e:	2320      	movs	r3, #32
 800c740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c744:	f8cd 800c 	str.w	r8, [sp, #12]
 800c748:	2330      	movs	r3, #48	@ 0x30
 800c74a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8e8 <_svfiprintf_r+0x1e4>
 800c74e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c752:	f04f 0901 	mov.w	r9, #1
 800c756:	4623      	mov	r3, r4
 800c758:	469a      	mov	sl, r3
 800c75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c75e:	b10a      	cbz	r2, 800c764 <_svfiprintf_r+0x60>
 800c760:	2a25      	cmp	r2, #37	@ 0x25
 800c762:	d1f9      	bne.n	800c758 <_svfiprintf_r+0x54>
 800c764:	ebba 0b04 	subs.w	fp, sl, r4
 800c768:	d00b      	beq.n	800c782 <_svfiprintf_r+0x7e>
 800c76a:	465b      	mov	r3, fp
 800c76c:	4622      	mov	r2, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff ff6b 	bl	800c64c <__ssputs_r>
 800c776:	3001      	adds	r0, #1
 800c778:	f000 80a7 	beq.w	800c8ca <_svfiprintf_r+0x1c6>
 800c77c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c77e:	445a      	add	r2, fp
 800c780:	9209      	str	r2, [sp, #36]	@ 0x24
 800c782:	f89a 3000 	ldrb.w	r3, [sl]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 809f 	beq.w	800c8ca <_svfiprintf_r+0x1c6>
 800c78c:	2300      	movs	r3, #0
 800c78e:	f04f 32ff 	mov.w	r2, #4294967295
 800c792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c796:	f10a 0a01 	add.w	sl, sl, #1
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	9307      	str	r3, [sp, #28]
 800c79e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2205      	movs	r2, #5
 800c7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ac:	484e      	ldr	r0, [pc, #312]	@ (800c8e8 <_svfiprintf_r+0x1e4>)
 800c7ae:	f7f3 fd2f 	bl	8000210 <memchr>
 800c7b2:	9a04      	ldr	r2, [sp, #16]
 800c7b4:	b9d8      	cbnz	r0, 800c7ee <_svfiprintf_r+0xea>
 800c7b6:	06d0      	lsls	r0, r2, #27
 800c7b8:	bf44      	itt	mi
 800c7ba:	2320      	movmi	r3, #32
 800c7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c0:	0711      	lsls	r1, r2, #28
 800c7c2:	bf44      	itt	mi
 800c7c4:	232b      	movmi	r3, #43	@ 0x2b
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d0:	d015      	beq.n	800c7fe <_svfiprintf_r+0xfa>
 800c7d2:	9a07      	ldr	r2, [sp, #28]
 800c7d4:	4654      	mov	r4, sl
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4621      	mov	r1, r4
 800c7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e2:	3b30      	subs	r3, #48	@ 0x30
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d94b      	bls.n	800c880 <_svfiprintf_r+0x17c>
 800c7e8:	b1b0      	cbz	r0, 800c818 <_svfiprintf_r+0x114>
 800c7ea:	9207      	str	r2, [sp, #28]
 800c7ec:	e014      	b.n	800c818 <_svfiprintf_r+0x114>
 800c7ee:	eba0 0308 	sub.w	r3, r0, r8
 800c7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	46a2      	mov	sl, r4
 800c7fc:	e7d2      	b.n	800c7a4 <_svfiprintf_r+0xa0>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	1d19      	adds	r1, r3, #4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	9103      	str	r1, [sp, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfbb      	ittet	lt
 800c80a:	425b      	neglt	r3, r3
 800c80c:	f042 0202 	orrlt.w	r2, r2, #2
 800c810:	9307      	strge	r3, [sp, #28]
 800c812:	9307      	strlt	r3, [sp, #28]
 800c814:	bfb8      	it	lt
 800c816:	9204      	strlt	r2, [sp, #16]
 800c818:	7823      	ldrb	r3, [r4, #0]
 800c81a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c81c:	d10a      	bne.n	800c834 <_svfiprintf_r+0x130>
 800c81e:	7863      	ldrb	r3, [r4, #1]
 800c820:	2b2a      	cmp	r3, #42	@ 0x2a
 800c822:	d132      	bne.n	800c88a <_svfiprintf_r+0x186>
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9203      	str	r2, [sp, #12]
 800c82c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c830:	3402      	adds	r4, #2
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8f8 <_svfiprintf_r+0x1f4>
 800c838:	7821      	ldrb	r1, [r4, #0]
 800c83a:	2203      	movs	r2, #3
 800c83c:	4650      	mov	r0, sl
 800c83e:	f7f3 fce7 	bl	8000210 <memchr>
 800c842:	b138      	cbz	r0, 800c854 <_svfiprintf_r+0x150>
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	eba0 000a 	sub.w	r0, r0, sl
 800c84a:	2240      	movs	r2, #64	@ 0x40
 800c84c:	4082      	lsls	r2, r0
 800c84e:	4313      	orrs	r3, r2
 800c850:	3401      	adds	r4, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c858:	4824      	ldr	r0, [pc, #144]	@ (800c8ec <_svfiprintf_r+0x1e8>)
 800c85a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c85e:	2206      	movs	r2, #6
 800c860:	f7f3 fcd6 	bl	8000210 <memchr>
 800c864:	2800      	cmp	r0, #0
 800c866:	d036      	beq.n	800c8d6 <_svfiprintf_r+0x1d2>
 800c868:	4b21      	ldr	r3, [pc, #132]	@ (800c8f0 <_svfiprintf_r+0x1ec>)
 800c86a:	bb1b      	cbnz	r3, 800c8b4 <_svfiprintf_r+0x1b0>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	3307      	adds	r3, #7
 800c870:	f023 0307 	bic.w	r3, r3, #7
 800c874:	3308      	adds	r3, #8
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87a:	4433      	add	r3, r6
 800c87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87e:	e76a      	b.n	800c756 <_svfiprintf_r+0x52>
 800c880:	fb0c 3202 	mla	r2, ip, r2, r3
 800c884:	460c      	mov	r4, r1
 800c886:	2001      	movs	r0, #1
 800c888:	e7a8      	b.n	800c7dc <_svfiprintf_r+0xd8>
 800c88a:	2300      	movs	r3, #0
 800c88c:	3401      	adds	r4, #1
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	4619      	mov	r1, r3
 800c892:	f04f 0c0a 	mov.w	ip, #10
 800c896:	4620      	mov	r0, r4
 800c898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89c:	3a30      	subs	r2, #48	@ 0x30
 800c89e:	2a09      	cmp	r2, #9
 800c8a0:	d903      	bls.n	800c8aa <_svfiprintf_r+0x1a6>
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c6      	beq.n	800c834 <_svfiprintf_r+0x130>
 800c8a6:	9105      	str	r1, [sp, #20]
 800c8a8:	e7c4      	b.n	800c834 <_svfiprintf_r+0x130>
 800c8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e7f0      	b.n	800c896 <_svfiprintf_r+0x192>
 800c8b4:	ab03      	add	r3, sp, #12
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f4 <_svfiprintf_r+0x1f0>)
 800c8bc:	a904      	add	r1, sp, #16
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f7fc fcca 	bl	8009258 <_printf_float>
 800c8c4:	1c42      	adds	r2, r0, #1
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	d1d6      	bne.n	800c878 <_svfiprintf_r+0x174>
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	065b      	lsls	r3, r3, #25
 800c8ce:	f53f af2d 	bmi.w	800c72c <_svfiprintf_r+0x28>
 800c8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8d4:	e72c      	b.n	800c730 <_svfiprintf_r+0x2c>
 800c8d6:	ab03      	add	r3, sp, #12
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	462a      	mov	r2, r5
 800c8dc:	4b05      	ldr	r3, [pc, #20]	@ (800c8f4 <_svfiprintf_r+0x1f0>)
 800c8de:	a904      	add	r1, sp, #16
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f7fc ff51 	bl	8009788 <_printf_i>
 800c8e6:	e7ed      	b.n	800c8c4 <_svfiprintf_r+0x1c0>
 800c8e8:	0800f219 	.word	0x0800f219
 800c8ec:	0800f223 	.word	0x0800f223
 800c8f0:	08009259 	.word	0x08009259
 800c8f4:	0800c64d 	.word	0x0800c64d
 800c8f8:	0800f21f 	.word	0x0800f21f

0800c8fc <__sflush_r>:
 800c8fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c904:	0716      	lsls	r6, r2, #28
 800c906:	4605      	mov	r5, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	d454      	bmi.n	800c9b6 <__sflush_r+0xba>
 800c90c:	684b      	ldr	r3, [r1, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	dc02      	bgt.n	800c918 <__sflush_r+0x1c>
 800c912:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c914:	2b00      	cmp	r3, #0
 800c916:	dd48      	ble.n	800c9aa <__sflush_r+0xae>
 800c918:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d045      	beq.n	800c9aa <__sflush_r+0xae>
 800c91e:	2300      	movs	r3, #0
 800c920:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c924:	682f      	ldr	r7, [r5, #0]
 800c926:	6a21      	ldr	r1, [r4, #32]
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	d030      	beq.n	800c98e <__sflush_r+0x92>
 800c92c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	0759      	lsls	r1, r3, #29
 800c932:	d505      	bpl.n	800c940 <__sflush_r+0x44>
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c93a:	b10b      	cbz	r3, 800c940 <__sflush_r+0x44>
 800c93c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c93e:	1ad2      	subs	r2, r2, r3
 800c940:	2300      	movs	r3, #0
 800c942:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c944:	6a21      	ldr	r1, [r4, #32]
 800c946:	4628      	mov	r0, r5
 800c948:	47b0      	blx	r6
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	d106      	bne.n	800c95e <__sflush_r+0x62>
 800c950:	6829      	ldr	r1, [r5, #0]
 800c952:	291d      	cmp	r1, #29
 800c954:	d82b      	bhi.n	800c9ae <__sflush_r+0xb2>
 800c956:	4a2a      	ldr	r2, [pc, #168]	@ (800ca00 <__sflush_r+0x104>)
 800c958:	410a      	asrs	r2, r1
 800c95a:	07d6      	lsls	r6, r2, #31
 800c95c:	d427      	bmi.n	800c9ae <__sflush_r+0xb2>
 800c95e:	2200      	movs	r2, #0
 800c960:	6062      	str	r2, [r4, #4]
 800c962:	04d9      	lsls	r1, r3, #19
 800c964:	6922      	ldr	r2, [r4, #16]
 800c966:	6022      	str	r2, [r4, #0]
 800c968:	d504      	bpl.n	800c974 <__sflush_r+0x78>
 800c96a:	1c42      	adds	r2, r0, #1
 800c96c:	d101      	bne.n	800c972 <__sflush_r+0x76>
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	b903      	cbnz	r3, 800c974 <__sflush_r+0x78>
 800c972:	6560      	str	r0, [r4, #84]	@ 0x54
 800c974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c976:	602f      	str	r7, [r5, #0]
 800c978:	b1b9      	cbz	r1, 800c9aa <__sflush_r+0xae>
 800c97a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c97e:	4299      	cmp	r1, r3
 800c980:	d002      	beq.n	800c988 <__sflush_r+0x8c>
 800c982:	4628      	mov	r0, r5
 800c984:	f7fe fa2c 	bl	800ade0 <_free_r>
 800c988:	2300      	movs	r3, #0
 800c98a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c98c:	e00d      	b.n	800c9aa <__sflush_r+0xae>
 800c98e:	2301      	movs	r3, #1
 800c990:	4628      	mov	r0, r5
 800c992:	47b0      	blx	r6
 800c994:	4602      	mov	r2, r0
 800c996:	1c50      	adds	r0, r2, #1
 800c998:	d1c9      	bne.n	800c92e <__sflush_r+0x32>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0c6      	beq.n	800c92e <__sflush_r+0x32>
 800c9a0:	2b1d      	cmp	r3, #29
 800c9a2:	d001      	beq.n	800c9a8 <__sflush_r+0xac>
 800c9a4:	2b16      	cmp	r3, #22
 800c9a6:	d11e      	bne.n	800c9e6 <__sflush_r+0xea>
 800c9a8:	602f      	str	r7, [r5, #0]
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	e022      	b.n	800c9f4 <__sflush_r+0xf8>
 800c9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b2:	b21b      	sxth	r3, r3
 800c9b4:	e01b      	b.n	800c9ee <__sflush_r+0xf2>
 800c9b6:	690f      	ldr	r7, [r1, #16]
 800c9b8:	2f00      	cmp	r7, #0
 800c9ba:	d0f6      	beq.n	800c9aa <__sflush_r+0xae>
 800c9bc:	0793      	lsls	r3, r2, #30
 800c9be:	680e      	ldr	r6, [r1, #0]
 800c9c0:	bf08      	it	eq
 800c9c2:	694b      	ldreq	r3, [r1, #20]
 800c9c4:	600f      	str	r7, [r1, #0]
 800c9c6:	bf18      	it	ne
 800c9c8:	2300      	movne	r3, #0
 800c9ca:	eba6 0807 	sub.w	r8, r6, r7
 800c9ce:	608b      	str	r3, [r1, #8]
 800c9d0:	f1b8 0f00 	cmp.w	r8, #0
 800c9d4:	dde9      	ble.n	800c9aa <__sflush_r+0xae>
 800c9d6:	6a21      	ldr	r1, [r4, #32]
 800c9d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9da:	4643      	mov	r3, r8
 800c9dc:	463a      	mov	r2, r7
 800c9de:	4628      	mov	r0, r5
 800c9e0:	47b0      	blx	r6
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	dc08      	bgt.n	800c9f8 <__sflush_r+0xfc>
 800c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9ee:	81a3      	strh	r3, [r4, #12]
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f8:	4407      	add	r7, r0
 800c9fa:	eba8 0800 	sub.w	r8, r8, r0
 800c9fe:	e7e7      	b.n	800c9d0 <__sflush_r+0xd4>
 800ca00:	dfbffffe 	.word	0xdfbffffe

0800ca04 <_fflush_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	690b      	ldr	r3, [r1, #16]
 800ca08:	4605      	mov	r5, r0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	b913      	cbnz	r3, 800ca14 <_fflush_r+0x10>
 800ca0e:	2500      	movs	r5, #0
 800ca10:	4628      	mov	r0, r5
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	b118      	cbz	r0, 800ca1e <_fflush_r+0x1a>
 800ca16:	6a03      	ldr	r3, [r0, #32]
 800ca18:	b90b      	cbnz	r3, 800ca1e <_fflush_r+0x1a>
 800ca1a:	f7fd fa75 	bl	8009f08 <__sinit>
 800ca1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0f3      	beq.n	800ca0e <_fflush_r+0xa>
 800ca26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca28:	07d0      	lsls	r0, r2, #31
 800ca2a:	d404      	bmi.n	800ca36 <_fflush_r+0x32>
 800ca2c:	0599      	lsls	r1, r3, #22
 800ca2e:	d402      	bmi.n	800ca36 <_fflush_r+0x32>
 800ca30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca32:	f7fd fb80 	bl	800a136 <__retarget_lock_acquire_recursive>
 800ca36:	4628      	mov	r0, r5
 800ca38:	4621      	mov	r1, r4
 800ca3a:	f7ff ff5f 	bl	800c8fc <__sflush_r>
 800ca3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca40:	07da      	lsls	r2, r3, #31
 800ca42:	4605      	mov	r5, r0
 800ca44:	d4e4      	bmi.n	800ca10 <_fflush_r+0xc>
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	059b      	lsls	r3, r3, #22
 800ca4a:	d4e1      	bmi.n	800ca10 <_fflush_r+0xc>
 800ca4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca4e:	f7fd fb73 	bl	800a138 <__retarget_lock_release_recursive>
 800ca52:	e7dd      	b.n	800ca10 <_fflush_r+0xc>

0800ca54 <memmove>:
 800ca54:	4288      	cmp	r0, r1
 800ca56:	b510      	push	{r4, lr}
 800ca58:	eb01 0402 	add.w	r4, r1, r2
 800ca5c:	d902      	bls.n	800ca64 <memmove+0x10>
 800ca5e:	4284      	cmp	r4, r0
 800ca60:	4623      	mov	r3, r4
 800ca62:	d807      	bhi.n	800ca74 <memmove+0x20>
 800ca64:	1e43      	subs	r3, r0, #1
 800ca66:	42a1      	cmp	r1, r4
 800ca68:	d008      	beq.n	800ca7c <memmove+0x28>
 800ca6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca72:	e7f8      	b.n	800ca66 <memmove+0x12>
 800ca74:	4402      	add	r2, r0
 800ca76:	4601      	mov	r1, r0
 800ca78:	428a      	cmp	r2, r1
 800ca7a:	d100      	bne.n	800ca7e <memmove+0x2a>
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca86:	e7f7      	b.n	800ca78 <memmove+0x24>

0800ca88 <strncmp>:
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	b16a      	cbz	r2, 800caa8 <strncmp+0x20>
 800ca8c:	3901      	subs	r1, #1
 800ca8e:	1884      	adds	r4, r0, r2
 800ca90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d103      	bne.n	800caa4 <strncmp+0x1c>
 800ca9c:	42a0      	cmp	r0, r4
 800ca9e:	d001      	beq.n	800caa4 <strncmp+0x1c>
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	d1f5      	bne.n	800ca90 <strncmp+0x8>
 800caa4:	1ad0      	subs	r0, r2, r3
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	4610      	mov	r0, r2
 800caaa:	e7fc      	b.n	800caa6 <strncmp+0x1e>

0800caac <_sbrk_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d06      	ldr	r5, [pc, #24]	@ (800cac8 <_sbrk_r+0x1c>)
 800cab0:	2300      	movs	r3, #0
 800cab2:	4604      	mov	r4, r0
 800cab4:	4608      	mov	r0, r1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	f7f5 fc42 	bl	8002340 <_sbrk>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_sbrk_r+0x1a>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_sbrk_r+0x1a>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20000b0c 	.word	0x20000b0c

0800cacc <memcpy>:
 800cacc:	440a      	add	r2, r1
 800cace:	4291      	cmp	r1, r2
 800cad0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad4:	d100      	bne.n	800cad8 <memcpy+0xc>
 800cad6:	4770      	bx	lr
 800cad8:	b510      	push	{r4, lr}
 800cada:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cade:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cae2:	4291      	cmp	r1, r2
 800cae4:	d1f9      	bne.n	800cada <memcpy+0xe>
 800cae6:	bd10      	pop	{r4, pc}

0800cae8 <nan>:
 800cae8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800caf0 <nan+0x8>
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	00000000 	.word	0x00000000
 800caf4:	7ff80000 	.word	0x7ff80000

0800caf8 <__assert_func>:
 800caf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafa:	4614      	mov	r4, r2
 800cafc:	461a      	mov	r2, r3
 800cafe:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <__assert_func+0x2c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4605      	mov	r5, r0
 800cb04:	68d8      	ldr	r0, [r3, #12]
 800cb06:	b954      	cbnz	r4, 800cb1e <__assert_func+0x26>
 800cb08:	4b07      	ldr	r3, [pc, #28]	@ (800cb28 <__assert_func+0x30>)
 800cb0a:	461c      	mov	r4, r3
 800cb0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb10:	9100      	str	r1, [sp, #0]
 800cb12:	462b      	mov	r3, r5
 800cb14:	4905      	ldr	r1, [pc, #20]	@ (800cb2c <__assert_func+0x34>)
 800cb16:	f000 fba7 	bl	800d268 <fiprintf>
 800cb1a:	f000 fbb7 	bl	800d28c <abort>
 800cb1e:	4b04      	ldr	r3, [pc, #16]	@ (800cb30 <__assert_func+0x38>)
 800cb20:	e7f4      	b.n	800cb0c <__assert_func+0x14>
 800cb22:	bf00      	nop
 800cb24:	200000b4 	.word	0x200000b4
 800cb28:	0800f26d 	.word	0x0800f26d
 800cb2c:	0800f23f 	.word	0x0800f23f
 800cb30:	0800f232 	.word	0x0800f232

0800cb34 <_calloc_r>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	fba1 5402 	umull	r5, r4, r1, r2
 800cb3a:	b93c      	cbnz	r4, 800cb4c <_calloc_r+0x18>
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7fe f9c3 	bl	800aec8 <_malloc_r>
 800cb42:	4606      	mov	r6, r0
 800cb44:	b928      	cbnz	r0, 800cb52 <_calloc_r+0x1e>
 800cb46:	2600      	movs	r6, #0
 800cb48:	4630      	mov	r0, r6
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	220c      	movs	r2, #12
 800cb4e:	6002      	str	r2, [r0, #0]
 800cb50:	e7f9      	b.n	800cb46 <_calloc_r+0x12>
 800cb52:	462a      	mov	r2, r5
 800cb54:	4621      	mov	r1, r4
 800cb56:	f7fd fa70 	bl	800a03a <memset>
 800cb5a:	e7f5      	b.n	800cb48 <_calloc_r+0x14>

0800cb5c <rshift>:
 800cb5c:	6903      	ldr	r3, [r0, #16]
 800cb5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb6a:	f100 0414 	add.w	r4, r0, #20
 800cb6e:	dd45      	ble.n	800cbfc <rshift+0xa0>
 800cb70:	f011 011f 	ands.w	r1, r1, #31
 800cb74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb7c:	d10c      	bne.n	800cb98 <rshift+0x3c>
 800cb7e:	f100 0710 	add.w	r7, r0, #16
 800cb82:	4629      	mov	r1, r5
 800cb84:	42b1      	cmp	r1, r6
 800cb86:	d334      	bcc.n	800cbf2 <rshift+0x96>
 800cb88:	1a9b      	subs	r3, r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	1eea      	subs	r2, r5, #3
 800cb8e:	4296      	cmp	r6, r2
 800cb90:	bf38      	it	cc
 800cb92:	2300      	movcc	r3, #0
 800cb94:	4423      	add	r3, r4
 800cb96:	e015      	b.n	800cbc4 <rshift+0x68>
 800cb98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb9c:	f1c1 0820 	rsb	r8, r1, #32
 800cba0:	40cf      	lsrs	r7, r1
 800cba2:	f105 0e04 	add.w	lr, r5, #4
 800cba6:	46a1      	mov	r9, r4
 800cba8:	4576      	cmp	r6, lr
 800cbaa:	46f4      	mov	ip, lr
 800cbac:	d815      	bhi.n	800cbda <rshift+0x7e>
 800cbae:	1a9a      	subs	r2, r3, r2
 800cbb0:	0092      	lsls	r2, r2, #2
 800cbb2:	3a04      	subs	r2, #4
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	42ae      	cmp	r6, r5
 800cbb8:	bf38      	it	cc
 800cbba:	2200      	movcc	r2, #0
 800cbbc:	18a3      	adds	r3, r4, r2
 800cbbe:	50a7      	str	r7, [r4, r2]
 800cbc0:	b107      	cbz	r7, 800cbc4 <rshift+0x68>
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	1b1a      	subs	r2, r3, r4
 800cbc6:	42a3      	cmp	r3, r4
 800cbc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbcc:	bf08      	it	eq
 800cbce:	2300      	moveq	r3, #0
 800cbd0:	6102      	str	r2, [r0, #16]
 800cbd2:	bf08      	it	eq
 800cbd4:	6143      	streq	r3, [r0, #20]
 800cbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbda:	f8dc c000 	ldr.w	ip, [ip]
 800cbde:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbe2:	ea4c 0707 	orr.w	r7, ip, r7
 800cbe6:	f849 7b04 	str.w	r7, [r9], #4
 800cbea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbee:	40cf      	lsrs	r7, r1
 800cbf0:	e7da      	b.n	800cba8 <rshift+0x4c>
 800cbf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbfa:	e7c3      	b.n	800cb84 <rshift+0x28>
 800cbfc:	4623      	mov	r3, r4
 800cbfe:	e7e1      	b.n	800cbc4 <rshift+0x68>

0800cc00 <__hexdig_fun>:
 800cc00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cc04:	2b09      	cmp	r3, #9
 800cc06:	d802      	bhi.n	800cc0e <__hexdig_fun+0xe>
 800cc08:	3820      	subs	r0, #32
 800cc0a:	b2c0      	uxtb	r0, r0
 800cc0c:	4770      	bx	lr
 800cc0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d801      	bhi.n	800cc1a <__hexdig_fun+0x1a>
 800cc16:	3847      	subs	r0, #71	@ 0x47
 800cc18:	e7f7      	b.n	800cc0a <__hexdig_fun+0xa>
 800cc1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cc1e:	2b05      	cmp	r3, #5
 800cc20:	d801      	bhi.n	800cc26 <__hexdig_fun+0x26>
 800cc22:	3827      	subs	r0, #39	@ 0x27
 800cc24:	e7f1      	b.n	800cc0a <__hexdig_fun+0xa>
 800cc26:	2000      	movs	r0, #0
 800cc28:	4770      	bx	lr
	...

0800cc2c <__gethex>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	b085      	sub	sp, #20
 800cc32:	468a      	mov	sl, r1
 800cc34:	9302      	str	r3, [sp, #8]
 800cc36:	680b      	ldr	r3, [r1, #0]
 800cc38:	9001      	str	r0, [sp, #4]
 800cc3a:	4690      	mov	r8, r2
 800cc3c:	1c9c      	adds	r4, r3, #2
 800cc3e:	46a1      	mov	r9, r4
 800cc40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cc44:	2830      	cmp	r0, #48	@ 0x30
 800cc46:	d0fa      	beq.n	800cc3e <__gethex+0x12>
 800cc48:	eba9 0303 	sub.w	r3, r9, r3
 800cc4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cc50:	f7ff ffd6 	bl	800cc00 <__hexdig_fun>
 800cc54:	4605      	mov	r5, r0
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d168      	bne.n	800cd2c <__gethex+0x100>
 800cc5a:	49a0      	ldr	r1, [pc, #640]	@ (800cedc <__gethex+0x2b0>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	4648      	mov	r0, r9
 800cc60:	f7ff ff12 	bl	800ca88 <strncmp>
 800cc64:	4607      	mov	r7, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d167      	bne.n	800cd3a <__gethex+0x10e>
 800cc6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cc6e:	4626      	mov	r6, r4
 800cc70:	f7ff ffc6 	bl	800cc00 <__hexdig_fun>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d062      	beq.n	800cd3e <__gethex+0x112>
 800cc78:	4623      	mov	r3, r4
 800cc7a:	7818      	ldrb	r0, [r3, #0]
 800cc7c:	2830      	cmp	r0, #48	@ 0x30
 800cc7e:	4699      	mov	r9, r3
 800cc80:	f103 0301 	add.w	r3, r3, #1
 800cc84:	d0f9      	beq.n	800cc7a <__gethex+0x4e>
 800cc86:	f7ff ffbb 	bl	800cc00 <__hexdig_fun>
 800cc8a:	fab0 f580 	clz	r5, r0
 800cc8e:	096d      	lsrs	r5, r5, #5
 800cc90:	f04f 0b01 	mov.w	fp, #1
 800cc94:	464a      	mov	r2, r9
 800cc96:	4616      	mov	r6, r2
 800cc98:	3201      	adds	r2, #1
 800cc9a:	7830      	ldrb	r0, [r6, #0]
 800cc9c:	f7ff ffb0 	bl	800cc00 <__hexdig_fun>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d1f8      	bne.n	800cc96 <__gethex+0x6a>
 800cca4:	498d      	ldr	r1, [pc, #564]	@ (800cedc <__gethex+0x2b0>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f7ff feed 	bl	800ca88 <strncmp>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d13f      	bne.n	800cd32 <__gethex+0x106>
 800ccb2:	b944      	cbnz	r4, 800ccc6 <__gethex+0x9a>
 800ccb4:	1c74      	adds	r4, r6, #1
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4616      	mov	r6, r2
 800ccba:	3201      	adds	r2, #1
 800ccbc:	7830      	ldrb	r0, [r6, #0]
 800ccbe:	f7ff ff9f 	bl	800cc00 <__hexdig_fun>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1f8      	bne.n	800ccb8 <__gethex+0x8c>
 800ccc6:	1ba4      	subs	r4, r4, r6
 800ccc8:	00a7      	lsls	r7, r4, #2
 800ccca:	7833      	ldrb	r3, [r6, #0]
 800cccc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ccd0:	2b50      	cmp	r3, #80	@ 0x50
 800ccd2:	d13e      	bne.n	800cd52 <__gethex+0x126>
 800ccd4:	7873      	ldrb	r3, [r6, #1]
 800ccd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ccd8:	d033      	beq.n	800cd42 <__gethex+0x116>
 800ccda:	2b2d      	cmp	r3, #45	@ 0x2d
 800ccdc:	d034      	beq.n	800cd48 <__gethex+0x11c>
 800ccde:	1c71      	adds	r1, r6, #1
 800cce0:	2400      	movs	r4, #0
 800cce2:	7808      	ldrb	r0, [r1, #0]
 800cce4:	f7ff ff8c 	bl	800cc00 <__hexdig_fun>
 800cce8:	1e43      	subs	r3, r0, #1
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b18      	cmp	r3, #24
 800ccee:	d830      	bhi.n	800cd52 <__gethex+0x126>
 800ccf0:	f1a0 0210 	sub.w	r2, r0, #16
 800ccf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccf8:	f7ff ff82 	bl	800cc00 <__hexdig_fun>
 800ccfc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cd00:	fa5f fc8c 	uxtb.w	ip, ip
 800cd04:	f1bc 0f18 	cmp.w	ip, #24
 800cd08:	f04f 030a 	mov.w	r3, #10
 800cd0c:	d91e      	bls.n	800cd4c <__gethex+0x120>
 800cd0e:	b104      	cbz	r4, 800cd12 <__gethex+0xe6>
 800cd10:	4252      	negs	r2, r2
 800cd12:	4417      	add	r7, r2
 800cd14:	f8ca 1000 	str.w	r1, [sl]
 800cd18:	b1ed      	cbz	r5, 800cd56 <__gethex+0x12a>
 800cd1a:	f1bb 0f00 	cmp.w	fp, #0
 800cd1e:	bf0c      	ite	eq
 800cd20:	2506      	moveq	r5, #6
 800cd22:	2500      	movne	r5, #0
 800cd24:	4628      	mov	r0, r5
 800cd26:	b005      	add	sp, #20
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	2500      	movs	r5, #0
 800cd2e:	462c      	mov	r4, r5
 800cd30:	e7b0      	b.n	800cc94 <__gethex+0x68>
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	d1c7      	bne.n	800ccc6 <__gethex+0x9a>
 800cd36:	4627      	mov	r7, r4
 800cd38:	e7c7      	b.n	800ccca <__gethex+0x9e>
 800cd3a:	464e      	mov	r6, r9
 800cd3c:	462f      	mov	r7, r5
 800cd3e:	2501      	movs	r5, #1
 800cd40:	e7c3      	b.n	800ccca <__gethex+0x9e>
 800cd42:	2400      	movs	r4, #0
 800cd44:	1cb1      	adds	r1, r6, #2
 800cd46:	e7cc      	b.n	800cce2 <__gethex+0xb6>
 800cd48:	2401      	movs	r4, #1
 800cd4a:	e7fb      	b.n	800cd44 <__gethex+0x118>
 800cd4c:	fb03 0002 	mla	r0, r3, r2, r0
 800cd50:	e7ce      	b.n	800ccf0 <__gethex+0xc4>
 800cd52:	4631      	mov	r1, r6
 800cd54:	e7de      	b.n	800cd14 <__gethex+0xe8>
 800cd56:	eba6 0309 	sub.w	r3, r6, r9
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	2b07      	cmp	r3, #7
 800cd60:	dc0a      	bgt.n	800cd78 <__gethex+0x14c>
 800cd62:	9801      	ldr	r0, [sp, #4]
 800cd64:	f7fe f93c 	bl	800afe0 <_Balloc>
 800cd68:	4604      	mov	r4, r0
 800cd6a:	b940      	cbnz	r0, 800cd7e <__gethex+0x152>
 800cd6c:	4b5c      	ldr	r3, [pc, #368]	@ (800cee0 <__gethex+0x2b4>)
 800cd6e:	4602      	mov	r2, r0
 800cd70:	21e4      	movs	r1, #228	@ 0xe4
 800cd72:	485c      	ldr	r0, [pc, #368]	@ (800cee4 <__gethex+0x2b8>)
 800cd74:	f7ff fec0 	bl	800caf8 <__assert_func>
 800cd78:	3101      	adds	r1, #1
 800cd7a:	105b      	asrs	r3, r3, #1
 800cd7c:	e7ef      	b.n	800cd5e <__gethex+0x132>
 800cd7e:	f100 0a14 	add.w	sl, r0, #20
 800cd82:	2300      	movs	r3, #0
 800cd84:	4655      	mov	r5, sl
 800cd86:	469b      	mov	fp, r3
 800cd88:	45b1      	cmp	r9, r6
 800cd8a:	d337      	bcc.n	800cdfc <__gethex+0x1d0>
 800cd8c:	f845 bb04 	str.w	fp, [r5], #4
 800cd90:	eba5 050a 	sub.w	r5, r5, sl
 800cd94:	10ad      	asrs	r5, r5, #2
 800cd96:	6125      	str	r5, [r4, #16]
 800cd98:	4658      	mov	r0, fp
 800cd9a:	f7fe fa13 	bl	800b1c4 <__hi0bits>
 800cd9e:	016d      	lsls	r5, r5, #5
 800cda0:	f8d8 6000 	ldr.w	r6, [r8]
 800cda4:	1a2d      	subs	r5, r5, r0
 800cda6:	42b5      	cmp	r5, r6
 800cda8:	dd54      	ble.n	800ce54 <__gethex+0x228>
 800cdaa:	1bad      	subs	r5, r5, r6
 800cdac:	4629      	mov	r1, r5
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7fe fda7 	bl	800b902 <__any_on>
 800cdb4:	4681      	mov	r9, r0
 800cdb6:	b178      	cbz	r0, 800cdd8 <__gethex+0x1ac>
 800cdb8:	1e6b      	subs	r3, r5, #1
 800cdba:	1159      	asrs	r1, r3, #5
 800cdbc:	f003 021f 	and.w	r2, r3, #31
 800cdc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cdc4:	f04f 0901 	mov.w	r9, #1
 800cdc8:	fa09 f202 	lsl.w	r2, r9, r2
 800cdcc:	420a      	tst	r2, r1
 800cdce:	d003      	beq.n	800cdd8 <__gethex+0x1ac>
 800cdd0:	454b      	cmp	r3, r9
 800cdd2:	dc36      	bgt.n	800ce42 <__gethex+0x216>
 800cdd4:	f04f 0902 	mov.w	r9, #2
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7ff febe 	bl	800cb5c <rshift>
 800cde0:	442f      	add	r7, r5
 800cde2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cde6:	42bb      	cmp	r3, r7
 800cde8:	da42      	bge.n	800ce70 <__gethex+0x244>
 800cdea:	9801      	ldr	r0, [sp, #4]
 800cdec:	4621      	mov	r1, r4
 800cdee:	f7fe f937 	bl	800b060 <_Bfree>
 800cdf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	25a3      	movs	r5, #163	@ 0xa3
 800cdfa:	e793      	b.n	800cd24 <__gethex+0xf8>
 800cdfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ce00:	2a2e      	cmp	r2, #46	@ 0x2e
 800ce02:	d012      	beq.n	800ce2a <__gethex+0x1fe>
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d104      	bne.n	800ce12 <__gethex+0x1e6>
 800ce08:	f845 bb04 	str.w	fp, [r5], #4
 800ce0c:	f04f 0b00 	mov.w	fp, #0
 800ce10:	465b      	mov	r3, fp
 800ce12:	7830      	ldrb	r0, [r6, #0]
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	f7ff fef3 	bl	800cc00 <__hexdig_fun>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	f000 000f 	and.w	r0, r0, #15
 800ce20:	4098      	lsls	r0, r3
 800ce22:	ea4b 0b00 	orr.w	fp, fp, r0
 800ce26:	3304      	adds	r3, #4
 800ce28:	e7ae      	b.n	800cd88 <__gethex+0x15c>
 800ce2a:	45b1      	cmp	r9, r6
 800ce2c:	d8ea      	bhi.n	800ce04 <__gethex+0x1d8>
 800ce2e:	492b      	ldr	r1, [pc, #172]	@ (800cedc <__gethex+0x2b0>)
 800ce30:	9303      	str	r3, [sp, #12]
 800ce32:	2201      	movs	r2, #1
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff fe27 	bl	800ca88 <strncmp>
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d1e1      	bne.n	800ce04 <__gethex+0x1d8>
 800ce40:	e7a2      	b.n	800cd88 <__gethex+0x15c>
 800ce42:	1ea9      	subs	r1, r5, #2
 800ce44:	4620      	mov	r0, r4
 800ce46:	f7fe fd5c 	bl	800b902 <__any_on>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d0c2      	beq.n	800cdd4 <__gethex+0x1a8>
 800ce4e:	f04f 0903 	mov.w	r9, #3
 800ce52:	e7c1      	b.n	800cdd8 <__gethex+0x1ac>
 800ce54:	da09      	bge.n	800ce6a <__gethex+0x23e>
 800ce56:	1b75      	subs	r5, r6, r5
 800ce58:	4621      	mov	r1, r4
 800ce5a:	9801      	ldr	r0, [sp, #4]
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	f7fe fb17 	bl	800b490 <__lshift>
 800ce62:	1b7f      	subs	r7, r7, r5
 800ce64:	4604      	mov	r4, r0
 800ce66:	f100 0a14 	add.w	sl, r0, #20
 800ce6a:	f04f 0900 	mov.w	r9, #0
 800ce6e:	e7b8      	b.n	800cde2 <__gethex+0x1b6>
 800ce70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce74:	42bd      	cmp	r5, r7
 800ce76:	dd6f      	ble.n	800cf58 <__gethex+0x32c>
 800ce78:	1bed      	subs	r5, r5, r7
 800ce7a:	42ae      	cmp	r6, r5
 800ce7c:	dc34      	bgt.n	800cee8 <__gethex+0x2bc>
 800ce7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d022      	beq.n	800cecc <__gethex+0x2a0>
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d024      	beq.n	800ced4 <__gethex+0x2a8>
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d115      	bne.n	800ceba <__gethex+0x28e>
 800ce8e:	42ae      	cmp	r6, r5
 800ce90:	d113      	bne.n	800ceba <__gethex+0x28e>
 800ce92:	2e01      	cmp	r6, #1
 800ce94:	d10b      	bne.n	800ceae <__gethex+0x282>
 800ce96:	9a02      	ldr	r2, [sp, #8]
 800ce98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	2301      	movs	r3, #1
 800cea0:	6123      	str	r3, [r4, #16]
 800cea2:	f8ca 3000 	str.w	r3, [sl]
 800cea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cea8:	2562      	movs	r5, #98	@ 0x62
 800ceaa:	601c      	str	r4, [r3, #0]
 800ceac:	e73a      	b.n	800cd24 <__gethex+0xf8>
 800ceae:	1e71      	subs	r1, r6, #1
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f7fe fd26 	bl	800b902 <__any_on>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d1ed      	bne.n	800ce96 <__gethex+0x26a>
 800ceba:	9801      	ldr	r0, [sp, #4]
 800cebc:	4621      	mov	r1, r4
 800cebe:	f7fe f8cf 	bl	800b060 <_Bfree>
 800cec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cec4:	2300      	movs	r3, #0
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	2550      	movs	r5, #80	@ 0x50
 800ceca:	e72b      	b.n	800cd24 <__gethex+0xf8>
 800cecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1f3      	bne.n	800ceba <__gethex+0x28e>
 800ced2:	e7e0      	b.n	800ce96 <__gethex+0x26a>
 800ced4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1dd      	bne.n	800ce96 <__gethex+0x26a>
 800ceda:	e7ee      	b.n	800ceba <__gethex+0x28e>
 800cedc:	0800f0c0 	.word	0x0800f0c0
 800cee0:	0800ef55 	.word	0x0800ef55
 800cee4:	0800f26e 	.word	0x0800f26e
 800cee8:	1e6f      	subs	r7, r5, #1
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	d130      	bne.n	800cf52 <__gethex+0x326>
 800cef0:	b127      	cbz	r7, 800cefc <__gethex+0x2d0>
 800cef2:	4639      	mov	r1, r7
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7fe fd04 	bl	800b902 <__any_on>
 800cefa:	4681      	mov	r9, r0
 800cefc:	117a      	asrs	r2, r7, #5
 800cefe:	2301      	movs	r3, #1
 800cf00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cf04:	f007 071f 	and.w	r7, r7, #31
 800cf08:	40bb      	lsls	r3, r7
 800cf0a:	4213      	tst	r3, r2
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4620      	mov	r0, r4
 800cf10:	bf18      	it	ne
 800cf12:	f049 0902 	orrne.w	r9, r9, #2
 800cf16:	f7ff fe21 	bl	800cb5c <rshift>
 800cf1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cf1e:	1b76      	subs	r6, r6, r5
 800cf20:	2502      	movs	r5, #2
 800cf22:	f1b9 0f00 	cmp.w	r9, #0
 800cf26:	d047      	beq.n	800cfb8 <__gethex+0x38c>
 800cf28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d015      	beq.n	800cf5c <__gethex+0x330>
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d017      	beq.n	800cf64 <__gethex+0x338>
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d109      	bne.n	800cf4c <__gethex+0x320>
 800cf38:	f019 0f02 	tst.w	r9, #2
 800cf3c:	d006      	beq.n	800cf4c <__gethex+0x320>
 800cf3e:	f8da 3000 	ldr.w	r3, [sl]
 800cf42:	ea49 0903 	orr.w	r9, r9, r3
 800cf46:	f019 0f01 	tst.w	r9, #1
 800cf4a:	d10e      	bne.n	800cf6a <__gethex+0x33e>
 800cf4c:	f045 0510 	orr.w	r5, r5, #16
 800cf50:	e032      	b.n	800cfb8 <__gethex+0x38c>
 800cf52:	f04f 0901 	mov.w	r9, #1
 800cf56:	e7d1      	b.n	800cefc <__gethex+0x2d0>
 800cf58:	2501      	movs	r5, #1
 800cf5a:	e7e2      	b.n	800cf22 <__gethex+0x2f6>
 800cf5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf5e:	f1c3 0301 	rsb	r3, r3, #1
 800cf62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <__gethex+0x320>
 800cf6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf6e:	f104 0314 	add.w	r3, r4, #20
 800cf72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf7a:	f04f 0c00 	mov.w	ip, #0
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf88:	d01b      	beq.n	800cfc2 <__gethex+0x396>
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	6002      	str	r2, [r0, #0]
 800cf8e:	2d02      	cmp	r5, #2
 800cf90:	f104 0314 	add.w	r3, r4, #20
 800cf94:	d13c      	bne.n	800d010 <__gethex+0x3e4>
 800cf96:	f8d8 2000 	ldr.w	r2, [r8]
 800cf9a:	3a01      	subs	r2, #1
 800cf9c:	42b2      	cmp	r2, r6
 800cf9e:	d109      	bne.n	800cfb4 <__gethex+0x388>
 800cfa0:	1171      	asrs	r1, r6, #5
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfa8:	f006 061f 	and.w	r6, r6, #31
 800cfac:	fa02 f606 	lsl.w	r6, r2, r6
 800cfb0:	421e      	tst	r6, r3
 800cfb2:	d13a      	bne.n	800d02a <__gethex+0x3fe>
 800cfb4:	f045 0520 	orr.w	r5, r5, #32
 800cfb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfba:	601c      	str	r4, [r3, #0]
 800cfbc:	9b02      	ldr	r3, [sp, #8]
 800cfbe:	601f      	str	r7, [r3, #0]
 800cfc0:	e6b0      	b.n	800cd24 <__gethex+0xf8>
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cfc8:	d8d9      	bhi.n	800cf7e <__gethex+0x352>
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	459b      	cmp	fp, r3
 800cfce:	db17      	blt.n	800d000 <__gethex+0x3d4>
 800cfd0:	6861      	ldr	r1, [r4, #4]
 800cfd2:	9801      	ldr	r0, [sp, #4]
 800cfd4:	3101      	adds	r1, #1
 800cfd6:	f7fe f803 	bl	800afe0 <_Balloc>
 800cfda:	4681      	mov	r9, r0
 800cfdc:	b918      	cbnz	r0, 800cfe6 <__gethex+0x3ba>
 800cfde:	4b1a      	ldr	r3, [pc, #104]	@ (800d048 <__gethex+0x41c>)
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	2184      	movs	r1, #132	@ 0x84
 800cfe4:	e6c5      	b.n	800cd72 <__gethex+0x146>
 800cfe6:	6922      	ldr	r2, [r4, #16]
 800cfe8:	3202      	adds	r2, #2
 800cfea:	f104 010c 	add.w	r1, r4, #12
 800cfee:	0092      	lsls	r2, r2, #2
 800cff0:	300c      	adds	r0, #12
 800cff2:	f7ff fd6b 	bl	800cacc <memcpy>
 800cff6:	4621      	mov	r1, r4
 800cff8:	9801      	ldr	r0, [sp, #4]
 800cffa:	f7fe f831 	bl	800b060 <_Bfree>
 800cffe:	464c      	mov	r4, r9
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d008:	6122      	str	r2, [r4, #16]
 800d00a:	2201      	movs	r2, #1
 800d00c:	615a      	str	r2, [r3, #20]
 800d00e:	e7be      	b.n	800cf8e <__gethex+0x362>
 800d010:	6922      	ldr	r2, [r4, #16]
 800d012:	455a      	cmp	r2, fp
 800d014:	dd0b      	ble.n	800d02e <__gethex+0x402>
 800d016:	2101      	movs	r1, #1
 800d018:	4620      	mov	r0, r4
 800d01a:	f7ff fd9f 	bl	800cb5c <rshift>
 800d01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d022:	3701      	adds	r7, #1
 800d024:	42bb      	cmp	r3, r7
 800d026:	f6ff aee0 	blt.w	800cdea <__gethex+0x1be>
 800d02a:	2501      	movs	r5, #1
 800d02c:	e7c2      	b.n	800cfb4 <__gethex+0x388>
 800d02e:	f016 061f 	ands.w	r6, r6, #31
 800d032:	d0fa      	beq.n	800d02a <__gethex+0x3fe>
 800d034:	4453      	add	r3, sl
 800d036:	f1c6 0620 	rsb	r6, r6, #32
 800d03a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d03e:	f7fe f8c1 	bl	800b1c4 <__hi0bits>
 800d042:	42b0      	cmp	r0, r6
 800d044:	dbe7      	blt.n	800d016 <__gethex+0x3ea>
 800d046:	e7f0      	b.n	800d02a <__gethex+0x3fe>
 800d048:	0800ef55 	.word	0x0800ef55

0800d04c <L_shift>:
 800d04c:	f1c2 0208 	rsb	r2, r2, #8
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	b570      	push	{r4, r5, r6, lr}
 800d054:	f1c2 0620 	rsb	r6, r2, #32
 800d058:	6843      	ldr	r3, [r0, #4]
 800d05a:	6804      	ldr	r4, [r0, #0]
 800d05c:	fa03 f506 	lsl.w	r5, r3, r6
 800d060:	432c      	orrs	r4, r5
 800d062:	40d3      	lsrs	r3, r2
 800d064:	6004      	str	r4, [r0, #0]
 800d066:	f840 3f04 	str.w	r3, [r0, #4]!
 800d06a:	4288      	cmp	r0, r1
 800d06c:	d3f4      	bcc.n	800d058 <L_shift+0xc>
 800d06e:	bd70      	pop	{r4, r5, r6, pc}

0800d070 <__match>:
 800d070:	b530      	push	{r4, r5, lr}
 800d072:	6803      	ldr	r3, [r0, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d07a:	b914      	cbnz	r4, 800d082 <__match+0x12>
 800d07c:	6003      	str	r3, [r0, #0]
 800d07e:	2001      	movs	r0, #1
 800d080:	bd30      	pop	{r4, r5, pc}
 800d082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d086:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d08a:	2d19      	cmp	r5, #25
 800d08c:	bf98      	it	ls
 800d08e:	3220      	addls	r2, #32
 800d090:	42a2      	cmp	r2, r4
 800d092:	d0f0      	beq.n	800d076 <__match+0x6>
 800d094:	2000      	movs	r0, #0
 800d096:	e7f3      	b.n	800d080 <__match+0x10>

0800d098 <__hexnan>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	680b      	ldr	r3, [r1, #0]
 800d09e:	6801      	ldr	r1, [r0, #0]
 800d0a0:	115e      	asrs	r6, r3, #5
 800d0a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0a6:	f013 031f 	ands.w	r3, r3, #31
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	bf18      	it	ne
 800d0ae:	3604      	addne	r6, #4
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	1f37      	subs	r7, r6, #4
 800d0b4:	4682      	mov	sl, r0
 800d0b6:	4690      	mov	r8, r2
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0be:	46b9      	mov	r9, r7
 800d0c0:	463c      	mov	r4, r7
 800d0c2:	9502      	str	r5, [sp, #8]
 800d0c4:	46ab      	mov	fp, r5
 800d0c6:	784a      	ldrb	r2, [r1, #1]
 800d0c8:	1c4b      	adds	r3, r1, #1
 800d0ca:	9303      	str	r3, [sp, #12]
 800d0cc:	b342      	cbz	r2, 800d120 <__hexnan+0x88>
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	9105      	str	r1, [sp, #20]
 800d0d2:	9204      	str	r2, [sp, #16]
 800d0d4:	f7ff fd94 	bl	800cc00 <__hexdig_fun>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d151      	bne.n	800d180 <__hexnan+0xe8>
 800d0dc:	9a04      	ldr	r2, [sp, #16]
 800d0de:	9905      	ldr	r1, [sp, #20]
 800d0e0:	2a20      	cmp	r2, #32
 800d0e2:	d818      	bhi.n	800d116 <__hexnan+0x7e>
 800d0e4:	9b02      	ldr	r3, [sp, #8]
 800d0e6:	459b      	cmp	fp, r3
 800d0e8:	dd13      	ble.n	800d112 <__hexnan+0x7a>
 800d0ea:	454c      	cmp	r4, r9
 800d0ec:	d206      	bcs.n	800d0fc <__hexnan+0x64>
 800d0ee:	2d07      	cmp	r5, #7
 800d0f0:	dc04      	bgt.n	800d0fc <__hexnan+0x64>
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff ffa8 	bl	800d04c <L_shift>
 800d0fc:	4544      	cmp	r4, r8
 800d0fe:	d952      	bls.n	800d1a6 <__hexnan+0x10e>
 800d100:	2300      	movs	r3, #0
 800d102:	f1a4 0904 	sub.w	r9, r4, #4
 800d106:	f844 3c04 	str.w	r3, [r4, #-4]
 800d10a:	f8cd b008 	str.w	fp, [sp, #8]
 800d10e:	464c      	mov	r4, r9
 800d110:	461d      	mov	r5, r3
 800d112:	9903      	ldr	r1, [sp, #12]
 800d114:	e7d7      	b.n	800d0c6 <__hexnan+0x2e>
 800d116:	2a29      	cmp	r2, #41	@ 0x29
 800d118:	d157      	bne.n	800d1ca <__hexnan+0x132>
 800d11a:	3102      	adds	r1, #2
 800d11c:	f8ca 1000 	str.w	r1, [sl]
 800d120:	f1bb 0f00 	cmp.w	fp, #0
 800d124:	d051      	beq.n	800d1ca <__hexnan+0x132>
 800d126:	454c      	cmp	r4, r9
 800d128:	d206      	bcs.n	800d138 <__hexnan+0xa0>
 800d12a:	2d07      	cmp	r5, #7
 800d12c:	dc04      	bgt.n	800d138 <__hexnan+0xa0>
 800d12e:	462a      	mov	r2, r5
 800d130:	4649      	mov	r1, r9
 800d132:	4620      	mov	r0, r4
 800d134:	f7ff ff8a 	bl	800d04c <L_shift>
 800d138:	4544      	cmp	r4, r8
 800d13a:	d936      	bls.n	800d1aa <__hexnan+0x112>
 800d13c:	f1a8 0204 	sub.w	r2, r8, #4
 800d140:	4623      	mov	r3, r4
 800d142:	f853 1b04 	ldr.w	r1, [r3], #4
 800d146:	f842 1f04 	str.w	r1, [r2, #4]!
 800d14a:	429f      	cmp	r7, r3
 800d14c:	d2f9      	bcs.n	800d142 <__hexnan+0xaa>
 800d14e:	1b3b      	subs	r3, r7, r4
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	3304      	adds	r3, #4
 800d156:	3401      	adds	r4, #1
 800d158:	3e03      	subs	r6, #3
 800d15a:	42b4      	cmp	r4, r6
 800d15c:	bf88      	it	hi
 800d15e:	2304      	movhi	r3, #4
 800d160:	4443      	add	r3, r8
 800d162:	2200      	movs	r2, #0
 800d164:	f843 2b04 	str.w	r2, [r3], #4
 800d168:	429f      	cmp	r7, r3
 800d16a:	d2fb      	bcs.n	800d164 <__hexnan+0xcc>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	b91b      	cbnz	r3, 800d178 <__hexnan+0xe0>
 800d170:	4547      	cmp	r7, r8
 800d172:	d128      	bne.n	800d1c6 <__hexnan+0x12e>
 800d174:	2301      	movs	r3, #1
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	2005      	movs	r0, #5
 800d17a:	b007      	add	sp, #28
 800d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d180:	3501      	adds	r5, #1
 800d182:	2d08      	cmp	r5, #8
 800d184:	f10b 0b01 	add.w	fp, fp, #1
 800d188:	dd06      	ble.n	800d198 <__hexnan+0x100>
 800d18a:	4544      	cmp	r4, r8
 800d18c:	d9c1      	bls.n	800d112 <__hexnan+0x7a>
 800d18e:	2300      	movs	r3, #0
 800d190:	f844 3c04 	str.w	r3, [r4, #-4]
 800d194:	2501      	movs	r5, #1
 800d196:	3c04      	subs	r4, #4
 800d198:	6822      	ldr	r2, [r4, #0]
 800d19a:	f000 000f 	and.w	r0, r0, #15
 800d19e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d1a2:	6020      	str	r0, [r4, #0]
 800d1a4:	e7b5      	b.n	800d112 <__hexnan+0x7a>
 800d1a6:	2508      	movs	r5, #8
 800d1a8:	e7b3      	b.n	800d112 <__hexnan+0x7a>
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0dd      	beq.n	800d16c <__hexnan+0xd4>
 800d1b0:	f1c3 0320 	rsb	r3, r3, #32
 800d1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b8:	40da      	lsrs	r2, r3
 800d1ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d1be:	4013      	ands	r3, r2
 800d1c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d1c4:	e7d2      	b.n	800d16c <__hexnan+0xd4>
 800d1c6:	3f04      	subs	r7, #4
 800d1c8:	e7d0      	b.n	800d16c <__hexnan+0xd4>
 800d1ca:	2004      	movs	r0, #4
 800d1cc:	e7d5      	b.n	800d17a <__hexnan+0xe2>

0800d1ce <__ascii_mbtowc>:
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	b901      	cbnz	r1, 800d1d4 <__ascii_mbtowc+0x6>
 800d1d2:	a901      	add	r1, sp, #4
 800d1d4:	b142      	cbz	r2, 800d1e8 <__ascii_mbtowc+0x1a>
 800d1d6:	b14b      	cbz	r3, 800d1ec <__ascii_mbtowc+0x1e>
 800d1d8:	7813      	ldrb	r3, [r2, #0]
 800d1da:	600b      	str	r3, [r1, #0]
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	1e10      	subs	r0, r2, #0
 800d1e0:	bf18      	it	ne
 800d1e2:	2001      	movne	r0, #1
 800d1e4:	b002      	add	sp, #8
 800d1e6:	4770      	bx	lr
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	e7fb      	b.n	800d1e4 <__ascii_mbtowc+0x16>
 800d1ec:	f06f 0001 	mvn.w	r0, #1
 800d1f0:	e7f8      	b.n	800d1e4 <__ascii_mbtowc+0x16>

0800d1f2 <_realloc_r>:
 800d1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f6:	4680      	mov	r8, r0
 800d1f8:	4615      	mov	r5, r2
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	b921      	cbnz	r1, 800d208 <_realloc_r+0x16>
 800d1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d202:	4611      	mov	r1, r2
 800d204:	f7fd be60 	b.w	800aec8 <_malloc_r>
 800d208:	b92a      	cbnz	r2, 800d216 <_realloc_r+0x24>
 800d20a:	f7fd fde9 	bl	800ade0 <_free_r>
 800d20e:	2400      	movs	r4, #0
 800d210:	4620      	mov	r0, r4
 800d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d216:	f000 f840 	bl	800d29a <_malloc_usable_size_r>
 800d21a:	4285      	cmp	r5, r0
 800d21c:	4606      	mov	r6, r0
 800d21e:	d802      	bhi.n	800d226 <_realloc_r+0x34>
 800d220:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d224:	d8f4      	bhi.n	800d210 <_realloc_r+0x1e>
 800d226:	4629      	mov	r1, r5
 800d228:	4640      	mov	r0, r8
 800d22a:	f7fd fe4d 	bl	800aec8 <_malloc_r>
 800d22e:	4607      	mov	r7, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d0ec      	beq.n	800d20e <_realloc_r+0x1c>
 800d234:	42b5      	cmp	r5, r6
 800d236:	462a      	mov	r2, r5
 800d238:	4621      	mov	r1, r4
 800d23a:	bf28      	it	cs
 800d23c:	4632      	movcs	r2, r6
 800d23e:	f7ff fc45 	bl	800cacc <memcpy>
 800d242:	4621      	mov	r1, r4
 800d244:	4640      	mov	r0, r8
 800d246:	f7fd fdcb 	bl	800ade0 <_free_r>
 800d24a:	463c      	mov	r4, r7
 800d24c:	e7e0      	b.n	800d210 <_realloc_r+0x1e>

0800d24e <__ascii_wctomb>:
 800d24e:	4603      	mov	r3, r0
 800d250:	4608      	mov	r0, r1
 800d252:	b141      	cbz	r1, 800d266 <__ascii_wctomb+0x18>
 800d254:	2aff      	cmp	r2, #255	@ 0xff
 800d256:	d904      	bls.n	800d262 <__ascii_wctomb+0x14>
 800d258:	228a      	movs	r2, #138	@ 0x8a
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295
 800d260:	4770      	bx	lr
 800d262:	700a      	strb	r2, [r1, #0]
 800d264:	2001      	movs	r0, #1
 800d266:	4770      	bx	lr

0800d268 <fiprintf>:
 800d268:	b40e      	push	{r1, r2, r3}
 800d26a:	b503      	push	{r0, r1, lr}
 800d26c:	4601      	mov	r1, r0
 800d26e:	ab03      	add	r3, sp, #12
 800d270:	4805      	ldr	r0, [pc, #20]	@ (800d288 <fiprintf+0x20>)
 800d272:	f853 2b04 	ldr.w	r2, [r3], #4
 800d276:	6800      	ldr	r0, [r0, #0]
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	f000 f83f 	bl	800d2fc <_vfiprintf_r>
 800d27e:	b002      	add	sp, #8
 800d280:	f85d eb04 	ldr.w	lr, [sp], #4
 800d284:	b003      	add	sp, #12
 800d286:	4770      	bx	lr
 800d288:	200000b4 	.word	0x200000b4

0800d28c <abort>:
 800d28c:	b508      	push	{r3, lr}
 800d28e:	2006      	movs	r0, #6
 800d290:	f000 fa08 	bl	800d6a4 <raise>
 800d294:	2001      	movs	r0, #1
 800d296:	f7f4 ffdb 	bl	8002250 <_exit>

0800d29a <_malloc_usable_size_r>:
 800d29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d29e:	1f18      	subs	r0, r3, #4
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	bfbc      	itt	lt
 800d2a4:	580b      	ldrlt	r3, [r1, r0]
 800d2a6:	18c0      	addlt	r0, r0, r3
 800d2a8:	4770      	bx	lr

0800d2aa <__sfputc_r>:
 800d2aa:	6893      	ldr	r3, [r2, #8]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	b410      	push	{r4}
 800d2b2:	6093      	str	r3, [r2, #8]
 800d2b4:	da08      	bge.n	800d2c8 <__sfputc_r+0x1e>
 800d2b6:	6994      	ldr	r4, [r2, #24]
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	db01      	blt.n	800d2c0 <__sfputc_r+0x16>
 800d2bc:	290a      	cmp	r1, #10
 800d2be:	d103      	bne.n	800d2c8 <__sfputc_r+0x1e>
 800d2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2c4:	f000 b932 	b.w	800d52c <__swbuf_r>
 800d2c8:	6813      	ldr	r3, [r2, #0]
 800d2ca:	1c58      	adds	r0, r3, #1
 800d2cc:	6010      	str	r0, [r2, #0]
 800d2ce:	7019      	strb	r1, [r3, #0]
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <__sfputs_r>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	4606      	mov	r6, r0
 800d2dc:	460f      	mov	r7, r1
 800d2de:	4614      	mov	r4, r2
 800d2e0:	18d5      	adds	r5, r2, r3
 800d2e2:	42ac      	cmp	r4, r5
 800d2e4:	d101      	bne.n	800d2ea <__sfputs_r+0x12>
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	e007      	b.n	800d2fa <__sfputs_r+0x22>
 800d2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ee:	463a      	mov	r2, r7
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff ffda 	bl	800d2aa <__sfputc_r>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	d1f3      	bne.n	800d2e2 <__sfputs_r+0xa>
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2fc <_vfiprintf_r>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	460d      	mov	r5, r1
 800d302:	b09d      	sub	sp, #116	@ 0x74
 800d304:	4614      	mov	r4, r2
 800d306:	4698      	mov	r8, r3
 800d308:	4606      	mov	r6, r0
 800d30a:	b118      	cbz	r0, 800d314 <_vfiprintf_r+0x18>
 800d30c:	6a03      	ldr	r3, [r0, #32]
 800d30e:	b90b      	cbnz	r3, 800d314 <_vfiprintf_r+0x18>
 800d310:	f7fc fdfa 	bl	8009f08 <__sinit>
 800d314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d316:	07d9      	lsls	r1, r3, #31
 800d318:	d405      	bmi.n	800d326 <_vfiprintf_r+0x2a>
 800d31a:	89ab      	ldrh	r3, [r5, #12]
 800d31c:	059a      	lsls	r2, r3, #22
 800d31e:	d402      	bmi.n	800d326 <_vfiprintf_r+0x2a>
 800d320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d322:	f7fc ff08 	bl	800a136 <__retarget_lock_acquire_recursive>
 800d326:	89ab      	ldrh	r3, [r5, #12]
 800d328:	071b      	lsls	r3, r3, #28
 800d32a:	d501      	bpl.n	800d330 <_vfiprintf_r+0x34>
 800d32c:	692b      	ldr	r3, [r5, #16]
 800d32e:	b99b      	cbnz	r3, 800d358 <_vfiprintf_r+0x5c>
 800d330:	4629      	mov	r1, r5
 800d332:	4630      	mov	r0, r6
 800d334:	f000 f938 	bl	800d5a8 <__swsetup_r>
 800d338:	b170      	cbz	r0, 800d358 <_vfiprintf_r+0x5c>
 800d33a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d33c:	07dc      	lsls	r4, r3, #31
 800d33e:	d504      	bpl.n	800d34a <_vfiprintf_r+0x4e>
 800d340:	f04f 30ff 	mov.w	r0, #4294967295
 800d344:	b01d      	add	sp, #116	@ 0x74
 800d346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	0598      	lsls	r0, r3, #22
 800d34e:	d4f7      	bmi.n	800d340 <_vfiprintf_r+0x44>
 800d350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d352:	f7fc fef1 	bl	800a138 <__retarget_lock_release_recursive>
 800d356:	e7f3      	b.n	800d340 <_vfiprintf_r+0x44>
 800d358:	2300      	movs	r3, #0
 800d35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d35c:	2320      	movs	r3, #32
 800d35e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d362:	f8cd 800c 	str.w	r8, [sp, #12]
 800d366:	2330      	movs	r3, #48	@ 0x30
 800d368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d518 <_vfiprintf_r+0x21c>
 800d36c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d370:	f04f 0901 	mov.w	r9, #1
 800d374:	4623      	mov	r3, r4
 800d376:	469a      	mov	sl, r3
 800d378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37c:	b10a      	cbz	r2, 800d382 <_vfiprintf_r+0x86>
 800d37e:	2a25      	cmp	r2, #37	@ 0x25
 800d380:	d1f9      	bne.n	800d376 <_vfiprintf_r+0x7a>
 800d382:	ebba 0b04 	subs.w	fp, sl, r4
 800d386:	d00b      	beq.n	800d3a0 <_vfiprintf_r+0xa4>
 800d388:	465b      	mov	r3, fp
 800d38a:	4622      	mov	r2, r4
 800d38c:	4629      	mov	r1, r5
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff ffa2 	bl	800d2d8 <__sfputs_r>
 800d394:	3001      	adds	r0, #1
 800d396:	f000 80a7 	beq.w	800d4e8 <_vfiprintf_r+0x1ec>
 800d39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d39c:	445a      	add	r2, fp
 800d39e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 809f 	beq.w	800d4e8 <_vfiprintf_r+0x1ec>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b4:	f10a 0a01 	add.w	sl, sl, #1
 800d3b8:	9304      	str	r3, [sp, #16]
 800d3ba:	9307      	str	r3, [sp, #28]
 800d3bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3c2:	4654      	mov	r4, sl
 800d3c4:	2205      	movs	r2, #5
 800d3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ca:	4853      	ldr	r0, [pc, #332]	@ (800d518 <_vfiprintf_r+0x21c>)
 800d3cc:	f7f2 ff20 	bl	8000210 <memchr>
 800d3d0:	9a04      	ldr	r2, [sp, #16]
 800d3d2:	b9d8      	cbnz	r0, 800d40c <_vfiprintf_r+0x110>
 800d3d4:	06d1      	lsls	r1, r2, #27
 800d3d6:	bf44      	itt	mi
 800d3d8:	2320      	movmi	r3, #32
 800d3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3de:	0713      	lsls	r3, r2, #28
 800d3e0:	bf44      	itt	mi
 800d3e2:	232b      	movmi	r3, #43	@ 0x2b
 800d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3ee:	d015      	beq.n	800d41c <_vfiprintf_r+0x120>
 800d3f0:	9a07      	ldr	r2, [sp, #28]
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f04f 0c0a 	mov.w	ip, #10
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d400:	3b30      	subs	r3, #48	@ 0x30
 800d402:	2b09      	cmp	r3, #9
 800d404:	d94b      	bls.n	800d49e <_vfiprintf_r+0x1a2>
 800d406:	b1b0      	cbz	r0, 800d436 <_vfiprintf_r+0x13a>
 800d408:	9207      	str	r2, [sp, #28]
 800d40a:	e014      	b.n	800d436 <_vfiprintf_r+0x13a>
 800d40c:	eba0 0308 	sub.w	r3, r0, r8
 800d410:	fa09 f303 	lsl.w	r3, r9, r3
 800d414:	4313      	orrs	r3, r2
 800d416:	9304      	str	r3, [sp, #16]
 800d418:	46a2      	mov	sl, r4
 800d41a:	e7d2      	b.n	800d3c2 <_vfiprintf_r+0xc6>
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	1d19      	adds	r1, r3, #4
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	9103      	str	r1, [sp, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	bfbb      	ittet	lt
 800d428:	425b      	neglt	r3, r3
 800d42a:	f042 0202 	orrlt.w	r2, r2, #2
 800d42e:	9307      	strge	r3, [sp, #28]
 800d430:	9307      	strlt	r3, [sp, #28]
 800d432:	bfb8      	it	lt
 800d434:	9204      	strlt	r2, [sp, #16]
 800d436:	7823      	ldrb	r3, [r4, #0]
 800d438:	2b2e      	cmp	r3, #46	@ 0x2e
 800d43a:	d10a      	bne.n	800d452 <_vfiprintf_r+0x156>
 800d43c:	7863      	ldrb	r3, [r4, #1]
 800d43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d440:	d132      	bne.n	800d4a8 <_vfiprintf_r+0x1ac>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	1d1a      	adds	r2, r3, #4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	9203      	str	r2, [sp, #12]
 800d44a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d44e:	3402      	adds	r4, #2
 800d450:	9305      	str	r3, [sp, #20]
 800d452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d528 <_vfiprintf_r+0x22c>
 800d456:	7821      	ldrb	r1, [r4, #0]
 800d458:	2203      	movs	r2, #3
 800d45a:	4650      	mov	r0, sl
 800d45c:	f7f2 fed8 	bl	8000210 <memchr>
 800d460:	b138      	cbz	r0, 800d472 <_vfiprintf_r+0x176>
 800d462:	9b04      	ldr	r3, [sp, #16]
 800d464:	eba0 000a 	sub.w	r0, r0, sl
 800d468:	2240      	movs	r2, #64	@ 0x40
 800d46a:	4082      	lsls	r2, r0
 800d46c:	4313      	orrs	r3, r2
 800d46e:	3401      	adds	r4, #1
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d476:	4829      	ldr	r0, [pc, #164]	@ (800d51c <_vfiprintf_r+0x220>)
 800d478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d47c:	2206      	movs	r2, #6
 800d47e:	f7f2 fec7 	bl	8000210 <memchr>
 800d482:	2800      	cmp	r0, #0
 800d484:	d03f      	beq.n	800d506 <_vfiprintf_r+0x20a>
 800d486:	4b26      	ldr	r3, [pc, #152]	@ (800d520 <_vfiprintf_r+0x224>)
 800d488:	bb1b      	cbnz	r3, 800d4d2 <_vfiprintf_r+0x1d6>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	3307      	adds	r3, #7
 800d48e:	f023 0307 	bic.w	r3, r3, #7
 800d492:	3308      	adds	r3, #8
 800d494:	9303      	str	r3, [sp, #12]
 800d496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d498:	443b      	add	r3, r7
 800d49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d49c:	e76a      	b.n	800d374 <_vfiprintf_r+0x78>
 800d49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e7a8      	b.n	800d3fa <_vfiprintf_r+0xfe>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	3401      	adds	r4, #1
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	f04f 0c0a 	mov.w	ip, #10
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ba:	3a30      	subs	r2, #48	@ 0x30
 800d4bc:	2a09      	cmp	r2, #9
 800d4be:	d903      	bls.n	800d4c8 <_vfiprintf_r+0x1cc>
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d0c6      	beq.n	800d452 <_vfiprintf_r+0x156>
 800d4c4:	9105      	str	r1, [sp, #20]
 800d4c6:	e7c4      	b.n	800d452 <_vfiprintf_r+0x156>
 800d4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e7f0      	b.n	800d4b4 <_vfiprintf_r+0x1b8>
 800d4d2:	ab03      	add	r3, sp, #12
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	462a      	mov	r2, r5
 800d4d8:	4b12      	ldr	r3, [pc, #72]	@ (800d524 <_vfiprintf_r+0x228>)
 800d4da:	a904      	add	r1, sp, #16
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7fb febb 	bl	8009258 <_printf_float>
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	1c78      	adds	r0, r7, #1
 800d4e6:	d1d6      	bne.n	800d496 <_vfiprintf_r+0x19a>
 800d4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4ea:	07d9      	lsls	r1, r3, #31
 800d4ec:	d405      	bmi.n	800d4fa <_vfiprintf_r+0x1fe>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	059a      	lsls	r2, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_vfiprintf_r+0x1fe>
 800d4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4f6:	f7fc fe1f 	bl	800a138 <__retarget_lock_release_recursive>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	065b      	lsls	r3, r3, #25
 800d4fe:	f53f af1f 	bmi.w	800d340 <_vfiprintf_r+0x44>
 800d502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d504:	e71e      	b.n	800d344 <_vfiprintf_r+0x48>
 800d506:	ab03      	add	r3, sp, #12
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	462a      	mov	r2, r5
 800d50c:	4b05      	ldr	r3, [pc, #20]	@ (800d524 <_vfiprintf_r+0x228>)
 800d50e:	a904      	add	r1, sp, #16
 800d510:	4630      	mov	r0, r6
 800d512:	f7fc f939 	bl	8009788 <_printf_i>
 800d516:	e7e4      	b.n	800d4e2 <_vfiprintf_r+0x1e6>
 800d518:	0800f219 	.word	0x0800f219
 800d51c:	0800f223 	.word	0x0800f223
 800d520:	08009259 	.word	0x08009259
 800d524:	0800d2d9 	.word	0x0800d2d9
 800d528:	0800f21f 	.word	0x0800f21f

0800d52c <__swbuf_r>:
 800d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52e:	460e      	mov	r6, r1
 800d530:	4614      	mov	r4, r2
 800d532:	4605      	mov	r5, r0
 800d534:	b118      	cbz	r0, 800d53e <__swbuf_r+0x12>
 800d536:	6a03      	ldr	r3, [r0, #32]
 800d538:	b90b      	cbnz	r3, 800d53e <__swbuf_r+0x12>
 800d53a:	f7fc fce5 	bl	8009f08 <__sinit>
 800d53e:	69a3      	ldr	r3, [r4, #24]
 800d540:	60a3      	str	r3, [r4, #8]
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	071a      	lsls	r2, r3, #28
 800d546:	d501      	bpl.n	800d54c <__swbuf_r+0x20>
 800d548:	6923      	ldr	r3, [r4, #16]
 800d54a:	b943      	cbnz	r3, 800d55e <__swbuf_r+0x32>
 800d54c:	4621      	mov	r1, r4
 800d54e:	4628      	mov	r0, r5
 800d550:	f000 f82a 	bl	800d5a8 <__swsetup_r>
 800d554:	b118      	cbz	r0, 800d55e <__swbuf_r+0x32>
 800d556:	f04f 37ff 	mov.w	r7, #4294967295
 800d55a:	4638      	mov	r0, r7
 800d55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	6922      	ldr	r2, [r4, #16]
 800d562:	1a98      	subs	r0, r3, r2
 800d564:	6963      	ldr	r3, [r4, #20]
 800d566:	b2f6      	uxtb	r6, r6
 800d568:	4283      	cmp	r3, r0
 800d56a:	4637      	mov	r7, r6
 800d56c:	dc05      	bgt.n	800d57a <__swbuf_r+0x4e>
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff fa47 	bl	800ca04 <_fflush_r>
 800d576:	2800      	cmp	r0, #0
 800d578:	d1ed      	bne.n	800d556 <__swbuf_r+0x2a>
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	60a3      	str	r3, [r4, #8]
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	6022      	str	r2, [r4, #0]
 800d586:	701e      	strb	r6, [r3, #0]
 800d588:	6962      	ldr	r2, [r4, #20]
 800d58a:	1c43      	adds	r3, r0, #1
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d004      	beq.n	800d59a <__swbuf_r+0x6e>
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	07db      	lsls	r3, r3, #31
 800d594:	d5e1      	bpl.n	800d55a <__swbuf_r+0x2e>
 800d596:	2e0a      	cmp	r6, #10
 800d598:	d1df      	bne.n	800d55a <__swbuf_r+0x2e>
 800d59a:	4621      	mov	r1, r4
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7ff fa31 	bl	800ca04 <_fflush_r>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0d9      	beq.n	800d55a <__swbuf_r+0x2e>
 800d5a6:	e7d6      	b.n	800d556 <__swbuf_r+0x2a>

0800d5a8 <__swsetup_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4b29      	ldr	r3, [pc, #164]	@ (800d650 <__swsetup_r+0xa8>)
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	6818      	ldr	r0, [r3, #0]
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	b118      	cbz	r0, 800d5bc <__swsetup_r+0x14>
 800d5b4:	6a03      	ldr	r3, [r0, #32]
 800d5b6:	b90b      	cbnz	r3, 800d5bc <__swsetup_r+0x14>
 800d5b8:	f7fc fca6 	bl	8009f08 <__sinit>
 800d5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c0:	0719      	lsls	r1, r3, #28
 800d5c2:	d422      	bmi.n	800d60a <__swsetup_r+0x62>
 800d5c4:	06da      	lsls	r2, r3, #27
 800d5c6:	d407      	bmi.n	800d5d8 <__swsetup_r+0x30>
 800d5c8:	2209      	movs	r2, #9
 800d5ca:	602a      	str	r2, [r5, #0]
 800d5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5d0:	81a3      	strh	r3, [r4, #12]
 800d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d6:	e033      	b.n	800d640 <__swsetup_r+0x98>
 800d5d8:	0758      	lsls	r0, r3, #29
 800d5da:	d512      	bpl.n	800d602 <__swsetup_r+0x5a>
 800d5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5de:	b141      	cbz	r1, 800d5f2 <__swsetup_r+0x4a>
 800d5e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5e4:	4299      	cmp	r1, r3
 800d5e6:	d002      	beq.n	800d5ee <__swsetup_r+0x46>
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	f7fd fbf9 	bl	800ade0 <_free_r>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5f8:	81a3      	strh	r3, [r4, #12]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	6063      	str	r3, [r4, #4]
 800d5fe:	6923      	ldr	r3, [r4, #16]
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	f043 0308 	orr.w	r3, r3, #8
 800d608:	81a3      	strh	r3, [r4, #12]
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	b94b      	cbnz	r3, 800d622 <__swsetup_r+0x7a>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d618:	d003      	beq.n	800d622 <__swsetup_r+0x7a>
 800d61a:	4621      	mov	r1, r4
 800d61c:	4628      	mov	r0, r5
 800d61e:	f000 f883 	bl	800d728 <__smakebuf_r>
 800d622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d626:	f013 0201 	ands.w	r2, r3, #1
 800d62a:	d00a      	beq.n	800d642 <__swsetup_r+0x9a>
 800d62c:	2200      	movs	r2, #0
 800d62e:	60a2      	str	r2, [r4, #8]
 800d630:	6962      	ldr	r2, [r4, #20]
 800d632:	4252      	negs	r2, r2
 800d634:	61a2      	str	r2, [r4, #24]
 800d636:	6922      	ldr	r2, [r4, #16]
 800d638:	b942      	cbnz	r2, 800d64c <__swsetup_r+0xa4>
 800d63a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d63e:	d1c5      	bne.n	800d5cc <__swsetup_r+0x24>
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	0799      	lsls	r1, r3, #30
 800d644:	bf58      	it	pl
 800d646:	6962      	ldrpl	r2, [r4, #20]
 800d648:	60a2      	str	r2, [r4, #8]
 800d64a:	e7f4      	b.n	800d636 <__swsetup_r+0x8e>
 800d64c:	2000      	movs	r0, #0
 800d64e:	e7f7      	b.n	800d640 <__swsetup_r+0x98>
 800d650:	200000b4 	.word	0x200000b4

0800d654 <_raise_r>:
 800d654:	291f      	cmp	r1, #31
 800d656:	b538      	push	{r3, r4, r5, lr}
 800d658:	4605      	mov	r5, r0
 800d65a:	460c      	mov	r4, r1
 800d65c:	d904      	bls.n	800d668 <_raise_r+0x14>
 800d65e:	2316      	movs	r3, #22
 800d660:	6003      	str	r3, [r0, #0]
 800d662:	f04f 30ff 	mov.w	r0, #4294967295
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d66a:	b112      	cbz	r2, 800d672 <_raise_r+0x1e>
 800d66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d670:	b94b      	cbnz	r3, 800d686 <_raise_r+0x32>
 800d672:	4628      	mov	r0, r5
 800d674:	f000 f830 	bl	800d6d8 <_getpid_r>
 800d678:	4622      	mov	r2, r4
 800d67a:	4601      	mov	r1, r0
 800d67c:	4628      	mov	r0, r5
 800d67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d682:	f000 b817 	b.w	800d6b4 <_kill_r>
 800d686:	2b01      	cmp	r3, #1
 800d688:	d00a      	beq.n	800d6a0 <_raise_r+0x4c>
 800d68a:	1c59      	adds	r1, r3, #1
 800d68c:	d103      	bne.n	800d696 <_raise_r+0x42>
 800d68e:	2316      	movs	r3, #22
 800d690:	6003      	str	r3, [r0, #0]
 800d692:	2001      	movs	r0, #1
 800d694:	e7e7      	b.n	800d666 <_raise_r+0x12>
 800d696:	2100      	movs	r1, #0
 800d698:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d69c:	4620      	mov	r0, r4
 800d69e:	4798      	blx	r3
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	e7e0      	b.n	800d666 <_raise_r+0x12>

0800d6a4 <raise>:
 800d6a4:	4b02      	ldr	r3, [pc, #8]	@ (800d6b0 <raise+0xc>)
 800d6a6:	4601      	mov	r1, r0
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	f7ff bfd3 	b.w	800d654 <_raise_r>
 800d6ae:	bf00      	nop
 800d6b0:	200000b4 	.word	0x200000b4

0800d6b4 <_kill_r>:
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	4d07      	ldr	r5, [pc, #28]	@ (800d6d4 <_kill_r+0x20>)
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	4608      	mov	r0, r1
 800d6be:	4611      	mov	r1, r2
 800d6c0:	602b      	str	r3, [r5, #0]
 800d6c2:	f7f4 fdb5 	bl	8002230 <_kill>
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	d102      	bne.n	800d6d0 <_kill_r+0x1c>
 800d6ca:	682b      	ldr	r3, [r5, #0]
 800d6cc:	b103      	cbz	r3, 800d6d0 <_kill_r+0x1c>
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	bd38      	pop	{r3, r4, r5, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20000b0c 	.word	0x20000b0c

0800d6d8 <_getpid_r>:
 800d6d8:	f7f4 bda2 	b.w	8002220 <_getpid>

0800d6dc <__swhatbuf_r>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	460c      	mov	r4, r1
 800d6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	b096      	sub	sp, #88	@ 0x58
 800d6e8:	4615      	mov	r5, r2
 800d6ea:	461e      	mov	r6, r3
 800d6ec:	da0d      	bge.n	800d70a <__swhatbuf_r+0x2e>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6f4:	f04f 0100 	mov.w	r1, #0
 800d6f8:	bf14      	ite	ne
 800d6fa:	2340      	movne	r3, #64	@ 0x40
 800d6fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d700:	2000      	movs	r0, #0
 800d702:	6031      	str	r1, [r6, #0]
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	b016      	add	sp, #88	@ 0x58
 800d708:	bd70      	pop	{r4, r5, r6, pc}
 800d70a:	466a      	mov	r2, sp
 800d70c:	f000 f848 	bl	800d7a0 <_fstat_r>
 800d710:	2800      	cmp	r0, #0
 800d712:	dbec      	blt.n	800d6ee <__swhatbuf_r+0x12>
 800d714:	9901      	ldr	r1, [sp, #4]
 800d716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d71a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d71e:	4259      	negs	r1, r3
 800d720:	4159      	adcs	r1, r3
 800d722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d726:	e7eb      	b.n	800d700 <__swhatbuf_r+0x24>

0800d728 <__smakebuf_r>:
 800d728:	898b      	ldrh	r3, [r1, #12]
 800d72a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d72c:	079d      	lsls	r5, r3, #30
 800d72e:	4606      	mov	r6, r0
 800d730:	460c      	mov	r4, r1
 800d732:	d507      	bpl.n	800d744 <__smakebuf_r+0x1c>
 800d734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	6123      	str	r3, [r4, #16]
 800d73c:	2301      	movs	r3, #1
 800d73e:	6163      	str	r3, [r4, #20]
 800d740:	b003      	add	sp, #12
 800d742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d744:	ab01      	add	r3, sp, #4
 800d746:	466a      	mov	r2, sp
 800d748:	f7ff ffc8 	bl	800d6dc <__swhatbuf_r>
 800d74c:	9f00      	ldr	r7, [sp, #0]
 800d74e:	4605      	mov	r5, r0
 800d750:	4639      	mov	r1, r7
 800d752:	4630      	mov	r0, r6
 800d754:	f7fd fbb8 	bl	800aec8 <_malloc_r>
 800d758:	b948      	cbnz	r0, 800d76e <__smakebuf_r+0x46>
 800d75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d75e:	059a      	lsls	r2, r3, #22
 800d760:	d4ee      	bmi.n	800d740 <__smakebuf_r+0x18>
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	f043 0302 	orr.w	r3, r3, #2
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	e7e2      	b.n	800d734 <__smakebuf_r+0xc>
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	6020      	str	r0, [r4, #0]
 800d772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	9b01      	ldr	r3, [sp, #4]
 800d77a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d77e:	b15b      	cbz	r3, 800d798 <__smakebuf_r+0x70>
 800d780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d784:	4630      	mov	r0, r6
 800d786:	f000 f81d 	bl	800d7c4 <_isatty_r>
 800d78a:	b128      	cbz	r0, 800d798 <__smakebuf_r+0x70>
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	f043 0301 	orr.w	r3, r3, #1
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	431d      	orrs	r5, r3
 800d79c:	81a5      	strh	r5, [r4, #12]
 800d79e:	e7cf      	b.n	800d740 <__smakebuf_r+0x18>

0800d7a0 <_fstat_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4d07      	ldr	r5, [pc, #28]	@ (800d7c0 <_fstat_r+0x20>)
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	602b      	str	r3, [r5, #0]
 800d7ae:	f7f4 fd9f 	bl	80022f0 <_fstat>
 800d7b2:	1c43      	adds	r3, r0, #1
 800d7b4:	d102      	bne.n	800d7bc <_fstat_r+0x1c>
 800d7b6:	682b      	ldr	r3, [r5, #0]
 800d7b8:	b103      	cbz	r3, 800d7bc <_fstat_r+0x1c>
 800d7ba:	6023      	str	r3, [r4, #0]
 800d7bc:	bd38      	pop	{r3, r4, r5, pc}
 800d7be:	bf00      	nop
 800d7c0:	20000b0c 	.word	0x20000b0c

0800d7c4 <_isatty_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4d06      	ldr	r5, [pc, #24]	@ (800d7e0 <_isatty_r+0x1c>)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	602b      	str	r3, [r5, #0]
 800d7d0:	f7f4 fd9e 	bl	8002310 <_isatty>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d102      	bne.n	800d7de <_isatty_r+0x1a>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b103      	cbz	r3, 800d7de <_isatty_r+0x1a>
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	20000b0c 	.word	0x20000b0c

0800d7e4 <atan2>:
 800d7e4:	f000 bb08 	b.w	800ddf8 <__ieee754_atan2>

0800d7e8 <sqrt>:
 800d7e8:	b538      	push	{r3, r4, r5, lr}
 800d7ea:	ed2d 8b02 	vpush	{d8}
 800d7ee:	ec55 4b10 	vmov	r4, r5, d0
 800d7f2:	f000 fa27 	bl	800dc44 <__ieee754_sqrt>
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	462b      	mov	r3, r5
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d802:	eef0 8a60 	vmov.f32	s17, s1
 800d806:	f7f3 f9b1 	bl	8000b6c <__aeabi_dcmpun>
 800d80a:	b990      	cbnz	r0, 800d832 <sqrt+0x4a>
 800d80c:	2200      	movs	r2, #0
 800d80e:	2300      	movs	r3, #0
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f3 f982 	bl	8000b1c <__aeabi_dcmplt>
 800d818:	b158      	cbz	r0, 800d832 <sqrt+0x4a>
 800d81a:	f7fc fc61 	bl	800a0e0 <__errno>
 800d81e:	2321      	movs	r3, #33	@ 0x21
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4610      	mov	r0, r2
 800d828:	4619      	mov	r1, r3
 800d82a:	f7f3 f82f 	bl	800088c <__aeabi_ddiv>
 800d82e:	ec41 0b18 	vmov	d8, r0, r1
 800d832:	eeb0 0a48 	vmov.f32	s0, s16
 800d836:	eef0 0a68 	vmov.f32	s1, s17
 800d83a:	ecbd 8b02 	vpop	{d8}
 800d83e:	bd38      	pop	{r3, r4, r5, pc}

0800d840 <atan>:
 800d840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	ec55 4b10 	vmov	r4, r5, d0
 800d848:	4bbf      	ldr	r3, [pc, #764]	@ (800db48 <atan+0x308>)
 800d84a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d84e:	429e      	cmp	r6, r3
 800d850:	46ab      	mov	fp, r5
 800d852:	d918      	bls.n	800d886 <atan+0x46>
 800d854:	4bbd      	ldr	r3, [pc, #756]	@ (800db4c <atan+0x30c>)
 800d856:	429e      	cmp	r6, r3
 800d858:	d801      	bhi.n	800d85e <atan+0x1e>
 800d85a:	d109      	bne.n	800d870 <atan+0x30>
 800d85c:	b144      	cbz	r4, 800d870 <atan+0x30>
 800d85e:	4622      	mov	r2, r4
 800d860:	462b      	mov	r3, r5
 800d862:	4620      	mov	r0, r4
 800d864:	4629      	mov	r1, r5
 800d866:	f7f2 fd31 	bl	80002cc <__adddf3>
 800d86a:	4604      	mov	r4, r0
 800d86c:	460d      	mov	r5, r1
 800d86e:	e006      	b.n	800d87e <atan+0x3e>
 800d870:	f1bb 0f00 	cmp.w	fp, #0
 800d874:	f340 812b 	ble.w	800dace <atan+0x28e>
 800d878:	a597      	add	r5, pc, #604	@ (adr r5, 800dad8 <atan+0x298>)
 800d87a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d87e:	ec45 4b10 	vmov	d0, r4, r5
 800d882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d886:	4bb2      	ldr	r3, [pc, #712]	@ (800db50 <atan+0x310>)
 800d888:	429e      	cmp	r6, r3
 800d88a:	d813      	bhi.n	800d8b4 <atan+0x74>
 800d88c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d890:	429e      	cmp	r6, r3
 800d892:	d80c      	bhi.n	800d8ae <atan+0x6e>
 800d894:	a392      	add	r3, pc, #584	@ (adr r3, 800dae0 <atan+0x2a0>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	4620      	mov	r0, r4
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	4bac      	ldr	r3, [pc, #688]	@ (800db54 <atan+0x314>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f7f3 f957 	bl	8000b58 <__aeabi_dcmpgt>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d1e7      	bne.n	800d87e <atan+0x3e>
 800d8ae:	f04f 3aff 	mov.w	sl, #4294967295
 800d8b2:	e029      	b.n	800d908 <atan+0xc8>
 800d8b4:	f000 f95c 	bl	800db70 <fabs>
 800d8b8:	4ba7      	ldr	r3, [pc, #668]	@ (800db58 <atan+0x318>)
 800d8ba:	429e      	cmp	r6, r3
 800d8bc:	ec55 4b10 	vmov	r4, r5, d0
 800d8c0:	f200 80bc 	bhi.w	800da3c <atan+0x1fc>
 800d8c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d8c8:	429e      	cmp	r6, r3
 800d8ca:	f200 809e 	bhi.w	800da0a <atan+0x1ca>
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fcf9 	bl	80002cc <__adddf3>
 800d8da:	4b9e      	ldr	r3, [pc, #632]	@ (800db54 <atan+0x314>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f7f2 fcf3 	bl	80002c8 <__aeabi_dsub>
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	460f      	mov	r7, r1
 800d8e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	f7f2 fcec 	bl	80002cc <__adddf3>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	f7f2 ffc6 	bl	800088c <__aeabi_ddiv>
 800d900:	f04f 0a00 	mov.w	sl, #0
 800d904:	4604      	mov	r4, r0
 800d906:	460d      	mov	r5, r1
 800d908:	4622      	mov	r2, r4
 800d90a:	462b      	mov	r3, r5
 800d90c:	4620      	mov	r0, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	f7f2 fe92 	bl	8000638 <__aeabi_dmul>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4680      	mov	r8, r0
 800d91a:	4689      	mov	r9, r1
 800d91c:	f7f2 fe8c 	bl	8000638 <__aeabi_dmul>
 800d920:	a371      	add	r3, pc, #452	@ (adr r3, 800dae8 <atan+0x2a8>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	4606      	mov	r6, r0
 800d928:	460f      	mov	r7, r1
 800d92a:	f7f2 fe85 	bl	8000638 <__aeabi_dmul>
 800d92e:	a370      	add	r3, pc, #448	@ (adr r3, 800daf0 <atan+0x2b0>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fcca 	bl	80002cc <__adddf3>
 800d938:	4632      	mov	r2, r6
 800d93a:	463b      	mov	r3, r7
 800d93c:	f7f2 fe7c 	bl	8000638 <__aeabi_dmul>
 800d940:	a36d      	add	r3, pc, #436	@ (adr r3, 800daf8 <atan+0x2b8>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fcc1 	bl	80002cc <__adddf3>
 800d94a:	4632      	mov	r2, r6
 800d94c:	463b      	mov	r3, r7
 800d94e:	f7f2 fe73 	bl	8000638 <__aeabi_dmul>
 800d952:	a36b      	add	r3, pc, #428	@ (adr r3, 800db00 <atan+0x2c0>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f2 fcb8 	bl	80002cc <__adddf3>
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	f7f2 fe6a 	bl	8000638 <__aeabi_dmul>
 800d964:	a368      	add	r3, pc, #416	@ (adr r3, 800db08 <atan+0x2c8>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fcaf 	bl	80002cc <__adddf3>
 800d96e:	4632      	mov	r2, r6
 800d970:	463b      	mov	r3, r7
 800d972:	f7f2 fe61 	bl	8000638 <__aeabi_dmul>
 800d976:	a366      	add	r3, pc, #408	@ (adr r3, 800db10 <atan+0x2d0>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f2 fca6 	bl	80002cc <__adddf3>
 800d980:	4642      	mov	r2, r8
 800d982:	464b      	mov	r3, r9
 800d984:	f7f2 fe58 	bl	8000638 <__aeabi_dmul>
 800d988:	a363      	add	r3, pc, #396	@ (adr r3, 800db18 <atan+0x2d8>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	4680      	mov	r8, r0
 800d990:	4689      	mov	r9, r1
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f2 fe4f 	bl	8000638 <__aeabi_dmul>
 800d99a:	a361      	add	r3, pc, #388	@ (adr r3, 800db20 <atan+0x2e0>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f7f2 fc92 	bl	80002c8 <__aeabi_dsub>
 800d9a4:	4632      	mov	r2, r6
 800d9a6:	463b      	mov	r3, r7
 800d9a8:	f7f2 fe46 	bl	8000638 <__aeabi_dmul>
 800d9ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800db28 <atan+0x2e8>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fc89 	bl	80002c8 <__aeabi_dsub>
 800d9b6:	4632      	mov	r2, r6
 800d9b8:	463b      	mov	r3, r7
 800d9ba:	f7f2 fe3d 	bl	8000638 <__aeabi_dmul>
 800d9be:	a35c      	add	r3, pc, #368	@ (adr r3, 800db30 <atan+0x2f0>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc80 	bl	80002c8 <__aeabi_dsub>
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	463b      	mov	r3, r7
 800d9cc:	f7f2 fe34 	bl	8000638 <__aeabi_dmul>
 800d9d0:	a359      	add	r3, pc, #356	@ (adr r3, 800db38 <atan+0x2f8>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fc77 	bl	80002c8 <__aeabi_dsub>
 800d9da:	4632      	mov	r2, r6
 800d9dc:	463b      	mov	r3, r7
 800d9de:	f7f2 fe2b 	bl	8000638 <__aeabi_dmul>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f2 fc6f 	bl	80002cc <__adddf3>
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	462b      	mov	r3, r5
 800d9f2:	f7f2 fe21 	bl	8000638 <__aeabi_dmul>
 800d9f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	d148      	bne.n	800da92 <atan+0x252>
 800da00:	4620      	mov	r0, r4
 800da02:	4629      	mov	r1, r5
 800da04:	f7f2 fc60 	bl	80002c8 <__aeabi_dsub>
 800da08:	e72f      	b.n	800d86a <atan+0x2a>
 800da0a:	4b52      	ldr	r3, [pc, #328]	@ (800db54 <atan+0x314>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	4620      	mov	r0, r4
 800da10:	4629      	mov	r1, r5
 800da12:	f7f2 fc59 	bl	80002c8 <__aeabi_dsub>
 800da16:	4b4f      	ldr	r3, [pc, #316]	@ (800db54 <atan+0x314>)
 800da18:	4606      	mov	r6, r0
 800da1a:	460f      	mov	r7, r1
 800da1c:	2200      	movs	r2, #0
 800da1e:	4620      	mov	r0, r4
 800da20:	4629      	mov	r1, r5
 800da22:	f7f2 fc53 	bl	80002cc <__adddf3>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f2 ff2d 	bl	800088c <__aeabi_ddiv>
 800da32:	f04f 0a01 	mov.w	sl, #1
 800da36:	4604      	mov	r4, r0
 800da38:	460d      	mov	r5, r1
 800da3a:	e765      	b.n	800d908 <atan+0xc8>
 800da3c:	4b47      	ldr	r3, [pc, #284]	@ (800db5c <atan+0x31c>)
 800da3e:	429e      	cmp	r6, r3
 800da40:	d21c      	bcs.n	800da7c <atan+0x23c>
 800da42:	4b47      	ldr	r3, [pc, #284]	@ (800db60 <atan+0x320>)
 800da44:	2200      	movs	r2, #0
 800da46:	4620      	mov	r0, r4
 800da48:	4629      	mov	r1, r5
 800da4a:	f7f2 fc3d 	bl	80002c8 <__aeabi_dsub>
 800da4e:	4b44      	ldr	r3, [pc, #272]	@ (800db60 <atan+0x320>)
 800da50:	4606      	mov	r6, r0
 800da52:	460f      	mov	r7, r1
 800da54:	2200      	movs	r2, #0
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7f2 fded 	bl	8000638 <__aeabi_dmul>
 800da5e:	4b3d      	ldr	r3, [pc, #244]	@ (800db54 <atan+0x314>)
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fc33 	bl	80002cc <__adddf3>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	4630      	mov	r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	f7f2 ff0d 	bl	800088c <__aeabi_ddiv>
 800da72:	f04f 0a02 	mov.w	sl, #2
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
 800da7a:	e745      	b.n	800d908 <atan+0xc8>
 800da7c:	4622      	mov	r2, r4
 800da7e:	462b      	mov	r3, r5
 800da80:	4938      	ldr	r1, [pc, #224]	@ (800db64 <atan+0x324>)
 800da82:	2000      	movs	r0, #0
 800da84:	f7f2 ff02 	bl	800088c <__aeabi_ddiv>
 800da88:	f04f 0a03 	mov.w	sl, #3
 800da8c:	4604      	mov	r4, r0
 800da8e:	460d      	mov	r5, r1
 800da90:	e73a      	b.n	800d908 <atan+0xc8>
 800da92:	4b35      	ldr	r3, [pc, #212]	@ (800db68 <atan+0x328>)
 800da94:	4e35      	ldr	r6, [pc, #212]	@ (800db6c <atan+0x32c>)
 800da96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	f7f2 fc13 	bl	80002c8 <__aeabi_dsub>
 800daa2:	4622      	mov	r2, r4
 800daa4:	462b      	mov	r3, r5
 800daa6:	f7f2 fc0f 	bl	80002c8 <__aeabi_dsub>
 800daaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dab6:	f7f2 fc07 	bl	80002c8 <__aeabi_dsub>
 800daba:	f1bb 0f00 	cmp.w	fp, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	f6bf aedc 	bge.w	800d87e <atan+0x3e>
 800dac6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800daca:	461d      	mov	r5, r3
 800dacc:	e6d7      	b.n	800d87e <atan+0x3e>
 800dace:	a51c      	add	r5, pc, #112	@ (adr r5, 800db40 <atan+0x300>)
 800dad0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dad4:	e6d3      	b.n	800d87e <atan+0x3e>
 800dad6:	bf00      	nop
 800dad8:	54442d18 	.word	0x54442d18
 800dadc:	3ff921fb 	.word	0x3ff921fb
 800dae0:	8800759c 	.word	0x8800759c
 800dae4:	7e37e43c 	.word	0x7e37e43c
 800dae8:	e322da11 	.word	0xe322da11
 800daec:	3f90ad3a 	.word	0x3f90ad3a
 800daf0:	24760deb 	.word	0x24760deb
 800daf4:	3fa97b4b 	.word	0x3fa97b4b
 800daf8:	a0d03d51 	.word	0xa0d03d51
 800dafc:	3fb10d66 	.word	0x3fb10d66
 800db00:	c54c206e 	.word	0xc54c206e
 800db04:	3fb745cd 	.word	0x3fb745cd
 800db08:	920083ff 	.word	0x920083ff
 800db0c:	3fc24924 	.word	0x3fc24924
 800db10:	5555550d 	.word	0x5555550d
 800db14:	3fd55555 	.word	0x3fd55555
 800db18:	2c6a6c2f 	.word	0x2c6a6c2f
 800db1c:	bfa2b444 	.word	0xbfa2b444
 800db20:	52defd9a 	.word	0x52defd9a
 800db24:	3fadde2d 	.word	0x3fadde2d
 800db28:	af749a6d 	.word	0xaf749a6d
 800db2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800db30:	fe231671 	.word	0xfe231671
 800db34:	3fbc71c6 	.word	0x3fbc71c6
 800db38:	9998ebc4 	.word	0x9998ebc4
 800db3c:	3fc99999 	.word	0x3fc99999
 800db40:	54442d18 	.word	0x54442d18
 800db44:	bff921fb 	.word	0xbff921fb
 800db48:	440fffff 	.word	0x440fffff
 800db4c:	7ff00000 	.word	0x7ff00000
 800db50:	3fdbffff 	.word	0x3fdbffff
 800db54:	3ff00000 	.word	0x3ff00000
 800db58:	3ff2ffff 	.word	0x3ff2ffff
 800db5c:	40038000 	.word	0x40038000
 800db60:	3ff80000 	.word	0x3ff80000
 800db64:	bff00000 	.word	0xbff00000
 800db68:	0800f2d0 	.word	0x0800f2d0
 800db6c:	0800f2f0 	.word	0x0800f2f0

0800db70 <fabs>:
 800db70:	ec51 0b10 	vmov	r0, r1, d0
 800db74:	4602      	mov	r2, r0
 800db76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db7a:	ec43 2b10 	vmov	d0, r2, r3
 800db7e:	4770      	bx	lr

0800db80 <powf>:
 800db80:	b508      	push	{r3, lr}
 800db82:	ed2d 8b04 	vpush	{d8-d9}
 800db86:	eeb0 8a60 	vmov.f32	s16, s1
 800db8a:	eeb0 9a40 	vmov.f32	s18, s0
 800db8e:	f000 f9f9 	bl	800df84 <__ieee754_powf>
 800db92:	eeb4 8a48 	vcmp.f32	s16, s16
 800db96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9a:	eef0 8a40 	vmov.f32	s17, s0
 800db9e:	d63e      	bvs.n	800dc1e <powf+0x9e>
 800dba0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800dba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba8:	d112      	bne.n	800dbd0 <powf+0x50>
 800dbaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb2:	d039      	beq.n	800dc28 <powf+0xa8>
 800dbb4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbb8:	f000 f839 	bl	800dc2e <finitef>
 800dbbc:	b378      	cbz	r0, 800dc1e <powf+0x9e>
 800dbbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc6:	d52a      	bpl.n	800dc1e <powf+0x9e>
 800dbc8:	f7fc fa8a 	bl	800a0e0 <__errno>
 800dbcc:	2322      	movs	r3, #34	@ 0x22
 800dbce:	e014      	b.n	800dbfa <powf+0x7a>
 800dbd0:	f000 f82d 	bl	800dc2e <finitef>
 800dbd4:	b998      	cbnz	r0, 800dbfe <powf+0x7e>
 800dbd6:	eeb0 0a49 	vmov.f32	s0, s18
 800dbda:	f000 f828 	bl	800dc2e <finitef>
 800dbde:	b170      	cbz	r0, 800dbfe <powf+0x7e>
 800dbe0:	eeb0 0a48 	vmov.f32	s0, s16
 800dbe4:	f000 f823 	bl	800dc2e <finitef>
 800dbe8:	b148      	cbz	r0, 800dbfe <powf+0x7e>
 800dbea:	eef4 8a68 	vcmp.f32	s17, s17
 800dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf2:	d7e9      	bvc.n	800dbc8 <powf+0x48>
 800dbf4:	f7fc fa74 	bl	800a0e0 <__errno>
 800dbf8:	2321      	movs	r3, #33	@ 0x21
 800dbfa:	6003      	str	r3, [r0, #0]
 800dbfc:	e00f      	b.n	800dc1e <powf+0x9e>
 800dbfe:	eef5 8a40 	vcmp.f32	s17, #0.0
 800dc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc06:	d10a      	bne.n	800dc1e <powf+0x9e>
 800dc08:	eeb0 0a49 	vmov.f32	s0, s18
 800dc0c:	f000 f80f 	bl	800dc2e <finitef>
 800dc10:	b128      	cbz	r0, 800dc1e <powf+0x9e>
 800dc12:	eeb0 0a48 	vmov.f32	s0, s16
 800dc16:	f000 f80a 	bl	800dc2e <finitef>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d1d4      	bne.n	800dbc8 <powf+0x48>
 800dc1e:	eeb0 0a68 	vmov.f32	s0, s17
 800dc22:	ecbd 8b04 	vpop	{d8-d9}
 800dc26:	bd08      	pop	{r3, pc}
 800dc28:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800dc2c:	e7f7      	b.n	800dc1e <powf+0x9e>

0800dc2e <finitef>:
 800dc2e:	ee10 3a10 	vmov	r3, s0
 800dc32:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800dc36:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800dc3a:	bfac      	ite	ge
 800dc3c:	2000      	movge	r0, #0
 800dc3e:	2001      	movlt	r0, #1
 800dc40:	4770      	bx	lr
	...

0800dc44 <__ieee754_sqrt>:
 800dc44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	4a68      	ldr	r2, [pc, #416]	@ (800ddec <__ieee754_sqrt+0x1a8>)
 800dc4a:	ec55 4b10 	vmov	r4, r5, d0
 800dc4e:	43aa      	bics	r2, r5
 800dc50:	462b      	mov	r3, r5
 800dc52:	4621      	mov	r1, r4
 800dc54:	d110      	bne.n	800dc78 <__ieee754_sqrt+0x34>
 800dc56:	4622      	mov	r2, r4
 800dc58:	4620      	mov	r0, r4
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f7f2 fcec 	bl	8000638 <__aeabi_dmul>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 fb30 	bl	80002cc <__adddf3>
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	460d      	mov	r5, r1
 800dc70:	ec45 4b10 	vmov	d0, r4, r5
 800dc74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	2d00      	cmp	r5, #0
 800dc7a:	dc0e      	bgt.n	800dc9a <__ieee754_sqrt+0x56>
 800dc7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dc80:	4322      	orrs	r2, r4
 800dc82:	d0f5      	beq.n	800dc70 <__ieee754_sqrt+0x2c>
 800dc84:	b19d      	cbz	r5, 800dcae <__ieee754_sqrt+0x6a>
 800dc86:	4622      	mov	r2, r4
 800dc88:	4620      	mov	r0, r4
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	f7f2 fb1c 	bl	80002c8 <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	f7f2 fdfa 	bl	800088c <__aeabi_ddiv>
 800dc98:	e7e8      	b.n	800dc6c <__ieee754_sqrt+0x28>
 800dc9a:	152a      	asrs	r2, r5, #20
 800dc9c:	d115      	bne.n	800dcca <__ieee754_sqrt+0x86>
 800dc9e:	2000      	movs	r0, #0
 800dca0:	e009      	b.n	800dcb6 <__ieee754_sqrt+0x72>
 800dca2:	0acb      	lsrs	r3, r1, #11
 800dca4:	3a15      	subs	r2, #21
 800dca6:	0549      	lsls	r1, r1, #21
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d0fa      	beq.n	800dca2 <__ieee754_sqrt+0x5e>
 800dcac:	e7f7      	b.n	800dc9e <__ieee754_sqrt+0x5a>
 800dcae:	462a      	mov	r2, r5
 800dcb0:	e7fa      	b.n	800dca8 <__ieee754_sqrt+0x64>
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	02dc      	lsls	r4, r3, #11
 800dcb8:	d5fb      	bpl.n	800dcb2 <__ieee754_sqrt+0x6e>
 800dcba:	1e44      	subs	r4, r0, #1
 800dcbc:	1b12      	subs	r2, r2, r4
 800dcbe:	f1c0 0420 	rsb	r4, r0, #32
 800dcc2:	fa21 f404 	lsr.w	r4, r1, r4
 800dcc6:	4323      	orrs	r3, r4
 800dcc8:	4081      	lsls	r1, r0
 800dcca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dcd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcd6:	07d2      	lsls	r2, r2, #31
 800dcd8:	bf5c      	itt	pl
 800dcda:	005b      	lslpl	r3, r3, #1
 800dcdc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dce0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dce4:	bf58      	it	pl
 800dce6:	0049      	lslpl	r1, r1, #1
 800dce8:	2600      	movs	r6, #0
 800dcea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dcee:	106d      	asrs	r5, r5, #1
 800dcf0:	0049      	lsls	r1, r1, #1
 800dcf2:	2016      	movs	r0, #22
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dcfa:	1917      	adds	r7, r2, r4
 800dcfc:	429f      	cmp	r7, r3
 800dcfe:	bfde      	ittt	le
 800dd00:	193a      	addle	r2, r7, r4
 800dd02:	1bdb      	suble	r3, r3, r7
 800dd04:	1936      	addle	r6, r6, r4
 800dd06:	0fcf      	lsrs	r7, r1, #31
 800dd08:	3801      	subs	r0, #1
 800dd0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800dd0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dd16:	d1f0      	bne.n	800dcfa <__ieee754_sqrt+0xb6>
 800dd18:	4604      	mov	r4, r0
 800dd1a:	2720      	movs	r7, #32
 800dd1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dd20:	429a      	cmp	r2, r3
 800dd22:	eb00 0e0c 	add.w	lr, r0, ip
 800dd26:	db02      	blt.n	800dd2e <__ieee754_sqrt+0xea>
 800dd28:	d113      	bne.n	800dd52 <__ieee754_sqrt+0x10e>
 800dd2a:	458e      	cmp	lr, r1
 800dd2c:	d811      	bhi.n	800dd52 <__ieee754_sqrt+0x10e>
 800dd2e:	f1be 0f00 	cmp.w	lr, #0
 800dd32:	eb0e 000c 	add.w	r0, lr, ip
 800dd36:	da42      	bge.n	800ddbe <__ieee754_sqrt+0x17a>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	db40      	blt.n	800ddbe <__ieee754_sqrt+0x17a>
 800dd3c:	f102 0801 	add.w	r8, r2, #1
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	458e      	cmp	lr, r1
 800dd44:	bf88      	it	hi
 800dd46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dd4a:	eba1 010e 	sub.w	r1, r1, lr
 800dd4e:	4464      	add	r4, ip
 800dd50:	4642      	mov	r2, r8
 800dd52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dd56:	3f01      	subs	r7, #1
 800dd58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dd5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dd64:	d1dc      	bne.n	800dd20 <__ieee754_sqrt+0xdc>
 800dd66:	4319      	orrs	r1, r3
 800dd68:	d01b      	beq.n	800dda2 <__ieee754_sqrt+0x15e>
 800dd6a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ddf0 <__ieee754_sqrt+0x1ac>
 800dd6e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ddf4 <__ieee754_sqrt+0x1b0>
 800dd72:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd76:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd7a:	f7f2 faa5 	bl	80002c8 <__aeabi_dsub>
 800dd7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4640      	mov	r0, r8
 800dd88:	4649      	mov	r1, r9
 800dd8a:	f7f2 fed1 	bl	8000b30 <__aeabi_dcmple>
 800dd8e:	b140      	cbz	r0, 800dda2 <__ieee754_sqrt+0x15e>
 800dd90:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd94:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd98:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd9c:	d111      	bne.n	800ddc2 <__ieee754_sqrt+0x17e>
 800dd9e:	3601      	adds	r6, #1
 800dda0:	463c      	mov	r4, r7
 800dda2:	1072      	asrs	r2, r6, #1
 800dda4:	0863      	lsrs	r3, r4, #1
 800dda6:	07f1      	lsls	r1, r6, #31
 800dda8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ddac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ddb0:	bf48      	it	mi
 800ddb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ddb6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ddba:	4618      	mov	r0, r3
 800ddbc:	e756      	b.n	800dc6c <__ieee754_sqrt+0x28>
 800ddbe:	4690      	mov	r8, r2
 800ddc0:	e7be      	b.n	800dd40 <__ieee754_sqrt+0xfc>
 800ddc2:	f7f2 fa83 	bl	80002cc <__adddf3>
 800ddc6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4640      	mov	r0, r8
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	f7f2 fea3 	bl	8000b1c <__aeabi_dcmplt>
 800ddd6:	b120      	cbz	r0, 800dde2 <__ieee754_sqrt+0x19e>
 800ddd8:	1ca0      	adds	r0, r4, #2
 800ddda:	bf08      	it	eq
 800dddc:	3601      	addeq	r6, #1
 800ddde:	3402      	adds	r4, #2
 800dde0:	e7df      	b.n	800dda2 <__ieee754_sqrt+0x15e>
 800dde2:	1c63      	adds	r3, r4, #1
 800dde4:	f023 0401 	bic.w	r4, r3, #1
 800dde8:	e7db      	b.n	800dda2 <__ieee754_sqrt+0x15e>
 800ddea:	bf00      	nop
 800ddec:	7ff00000 	.word	0x7ff00000
 800ddf0:	20000278 	.word	0x20000278
 800ddf4:	20000270 	.word	0x20000270

0800ddf8 <__ieee754_atan2>:
 800ddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddfc:	ec57 6b11 	vmov	r6, r7, d1
 800de00:	4273      	negs	r3, r6
 800de02:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800df80 <__ieee754_atan2+0x188>
 800de06:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800de0a:	4333      	orrs	r3, r6
 800de0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800de10:	4543      	cmp	r3, r8
 800de12:	ec51 0b10 	vmov	r0, r1, d0
 800de16:	4635      	mov	r5, r6
 800de18:	d809      	bhi.n	800de2e <__ieee754_atan2+0x36>
 800de1a:	4244      	negs	r4, r0
 800de1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de20:	4304      	orrs	r4, r0
 800de22:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800de26:	4544      	cmp	r4, r8
 800de28:	468e      	mov	lr, r1
 800de2a:	4681      	mov	r9, r0
 800de2c:	d907      	bls.n	800de3e <__ieee754_atan2+0x46>
 800de2e:	4632      	mov	r2, r6
 800de30:	463b      	mov	r3, r7
 800de32:	f7f2 fa4b 	bl	80002cc <__adddf3>
 800de36:	ec41 0b10 	vmov	d0, r0, r1
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800de42:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800de46:	4334      	orrs	r4, r6
 800de48:	d103      	bne.n	800de52 <__ieee754_atan2+0x5a>
 800de4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de4e:	f7ff bcf7 	b.w	800d840 <atan>
 800de52:	17bc      	asrs	r4, r7, #30
 800de54:	f004 0402 	and.w	r4, r4, #2
 800de58:	ea53 0909 	orrs.w	r9, r3, r9
 800de5c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800de60:	d107      	bne.n	800de72 <__ieee754_atan2+0x7a>
 800de62:	2c02      	cmp	r4, #2
 800de64:	d05f      	beq.n	800df26 <__ieee754_atan2+0x12e>
 800de66:	2c03      	cmp	r4, #3
 800de68:	d1e5      	bne.n	800de36 <__ieee754_atan2+0x3e>
 800de6a:	a141      	add	r1, pc, #260	@ (adr r1, 800df70 <__ieee754_atan2+0x178>)
 800de6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de70:	e7e1      	b.n	800de36 <__ieee754_atan2+0x3e>
 800de72:	4315      	orrs	r5, r2
 800de74:	d106      	bne.n	800de84 <__ieee754_atan2+0x8c>
 800de76:	f1be 0f00 	cmp.w	lr, #0
 800de7a:	da5f      	bge.n	800df3c <__ieee754_atan2+0x144>
 800de7c:	a13e      	add	r1, pc, #248	@ (adr r1, 800df78 <__ieee754_atan2+0x180>)
 800de7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de82:	e7d8      	b.n	800de36 <__ieee754_atan2+0x3e>
 800de84:	4542      	cmp	r2, r8
 800de86:	d10f      	bne.n	800dea8 <__ieee754_atan2+0xb0>
 800de88:	4293      	cmp	r3, r2
 800de8a:	f104 34ff 	add.w	r4, r4, #4294967295
 800de8e:	d107      	bne.n	800dea0 <__ieee754_atan2+0xa8>
 800de90:	2c02      	cmp	r4, #2
 800de92:	d84c      	bhi.n	800df2e <__ieee754_atan2+0x136>
 800de94:	4b34      	ldr	r3, [pc, #208]	@ (800df68 <__ieee754_atan2+0x170>)
 800de96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de9e:	e7ca      	b.n	800de36 <__ieee754_atan2+0x3e>
 800dea0:	2c02      	cmp	r4, #2
 800dea2:	d848      	bhi.n	800df36 <__ieee754_atan2+0x13e>
 800dea4:	4b31      	ldr	r3, [pc, #196]	@ (800df6c <__ieee754_atan2+0x174>)
 800dea6:	e7f6      	b.n	800de96 <__ieee754_atan2+0x9e>
 800dea8:	4543      	cmp	r3, r8
 800deaa:	d0e4      	beq.n	800de76 <__ieee754_atan2+0x7e>
 800deac:	1a9b      	subs	r3, r3, r2
 800deae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800deb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800deb6:	da1e      	bge.n	800def6 <__ieee754_atan2+0xfe>
 800deb8:	2f00      	cmp	r7, #0
 800deba:	da01      	bge.n	800dec0 <__ieee754_atan2+0xc8>
 800debc:	323c      	adds	r2, #60	@ 0x3c
 800debe:	db1e      	blt.n	800defe <__ieee754_atan2+0x106>
 800dec0:	4632      	mov	r2, r6
 800dec2:	463b      	mov	r3, r7
 800dec4:	f7f2 fce2 	bl	800088c <__aeabi_ddiv>
 800dec8:	ec41 0b10 	vmov	d0, r0, r1
 800decc:	f7ff fe50 	bl	800db70 <fabs>
 800ded0:	f7ff fcb6 	bl	800d840 <atan>
 800ded4:	ec51 0b10 	vmov	r0, r1, d0
 800ded8:	2c01      	cmp	r4, #1
 800deda:	d013      	beq.n	800df04 <__ieee754_atan2+0x10c>
 800dedc:	2c02      	cmp	r4, #2
 800dede:	d015      	beq.n	800df0c <__ieee754_atan2+0x114>
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	d0a8      	beq.n	800de36 <__ieee754_atan2+0x3e>
 800dee4:	a318      	add	r3, pc, #96	@ (adr r3, 800df48 <__ieee754_atan2+0x150>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 f9ed 	bl	80002c8 <__aeabi_dsub>
 800deee:	a318      	add	r3, pc, #96	@ (adr r3, 800df50 <__ieee754_atan2+0x158>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	e014      	b.n	800df20 <__ieee754_atan2+0x128>
 800def6:	a118      	add	r1, pc, #96	@ (adr r1, 800df58 <__ieee754_atan2+0x160>)
 800def8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800defc:	e7ec      	b.n	800ded8 <__ieee754_atan2+0xe0>
 800defe:	2000      	movs	r0, #0
 800df00:	2100      	movs	r1, #0
 800df02:	e7e9      	b.n	800ded8 <__ieee754_atan2+0xe0>
 800df04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df08:	4619      	mov	r1, r3
 800df0a:	e794      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df0c:	a30e      	add	r3, pc, #56	@ (adr r3, 800df48 <__ieee754_atan2+0x150>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	f7f2 f9d9 	bl	80002c8 <__aeabi_dsub>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	a10d      	add	r1, pc, #52	@ (adr r1, 800df50 <__ieee754_atan2+0x158>)
 800df1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df20:	f7f2 f9d2 	bl	80002c8 <__aeabi_dsub>
 800df24:	e787      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df26:	a10a      	add	r1, pc, #40	@ (adr r1, 800df50 <__ieee754_atan2+0x158>)
 800df28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df2c:	e783      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df2e:	a10c      	add	r1, pc, #48	@ (adr r1, 800df60 <__ieee754_atan2+0x168>)
 800df30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df34:	e77f      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df36:	2000      	movs	r0, #0
 800df38:	2100      	movs	r1, #0
 800df3a:	e77c      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df3c:	a106      	add	r1, pc, #24	@ (adr r1, 800df58 <__ieee754_atan2+0x160>)
 800df3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df42:	e778      	b.n	800de36 <__ieee754_atan2+0x3e>
 800df44:	f3af 8000 	nop.w
 800df48:	33145c07 	.word	0x33145c07
 800df4c:	3ca1a626 	.word	0x3ca1a626
 800df50:	54442d18 	.word	0x54442d18
 800df54:	400921fb 	.word	0x400921fb
 800df58:	54442d18 	.word	0x54442d18
 800df5c:	3ff921fb 	.word	0x3ff921fb
 800df60:	54442d18 	.word	0x54442d18
 800df64:	3fe921fb 	.word	0x3fe921fb
 800df68:	0800f328 	.word	0x0800f328
 800df6c:	0800f310 	.word	0x0800f310
 800df70:	54442d18 	.word	0x54442d18
 800df74:	c00921fb 	.word	0xc00921fb
 800df78:	54442d18 	.word	0x54442d18
 800df7c:	bff921fb 	.word	0xbff921fb
 800df80:	7ff00000 	.word	0x7ff00000

0800df84 <__ieee754_powf>:
 800df84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df88:	ee10 4a90 	vmov	r4, s1
 800df8c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800df90:	ed2d 8b02 	vpush	{d8}
 800df94:	ee10 6a10 	vmov	r6, s0
 800df98:	eeb0 8a40 	vmov.f32	s16, s0
 800df9c:	eef0 8a60 	vmov.f32	s17, s1
 800dfa0:	d10c      	bne.n	800dfbc <__ieee754_powf+0x38>
 800dfa2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800dfa6:	0076      	lsls	r6, r6, #1
 800dfa8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800dfac:	f240 829c 	bls.w	800e4e8 <__ieee754_powf+0x564>
 800dfb0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800dfb4:	ecbd 8b02 	vpop	{d8}
 800dfb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfbc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800dfc0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800dfc4:	d802      	bhi.n	800dfcc <__ieee754_powf+0x48>
 800dfc6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800dfca:	d908      	bls.n	800dfde <__ieee754_powf+0x5a>
 800dfcc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800dfd0:	d1ee      	bne.n	800dfb0 <__ieee754_powf+0x2c>
 800dfd2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800dfd6:	0064      	lsls	r4, r4, #1
 800dfd8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800dfdc:	e7e6      	b.n	800dfac <__ieee754_powf+0x28>
 800dfde:	2e00      	cmp	r6, #0
 800dfe0:	da1e      	bge.n	800e020 <__ieee754_powf+0x9c>
 800dfe2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800dfe6:	d22b      	bcs.n	800e040 <__ieee754_powf+0xbc>
 800dfe8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800dfec:	d332      	bcc.n	800e054 <__ieee754_powf+0xd0>
 800dfee:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800dff2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800dff6:	fa49 f503 	asr.w	r5, r9, r3
 800dffa:	fa05 f303 	lsl.w	r3, r5, r3
 800dffe:	454b      	cmp	r3, r9
 800e000:	d126      	bne.n	800e050 <__ieee754_powf+0xcc>
 800e002:	f005 0501 	and.w	r5, r5, #1
 800e006:	f1c5 0502 	rsb	r5, r5, #2
 800e00a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e00e:	d122      	bne.n	800e056 <__ieee754_powf+0xd2>
 800e010:	2c00      	cmp	r4, #0
 800e012:	f280 826f 	bge.w	800e4f4 <__ieee754_powf+0x570>
 800e016:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e01a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e01e:	e7c9      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e020:	2500      	movs	r5, #0
 800e022:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e026:	d1f0      	bne.n	800e00a <__ieee754_powf+0x86>
 800e028:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e02c:	f000 825c 	beq.w	800e4e8 <__ieee754_powf+0x564>
 800e030:	d908      	bls.n	800e044 <__ieee754_powf+0xc0>
 800e032:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800e394 <__ieee754_powf+0x410>
 800e036:	2c00      	cmp	r4, #0
 800e038:	bfa8      	it	ge
 800e03a:	eeb0 0a68 	vmovge.f32	s0, s17
 800e03e:	e7b9      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e040:	2502      	movs	r5, #2
 800e042:	e7ee      	b.n	800e022 <__ieee754_powf+0x9e>
 800e044:	2c00      	cmp	r4, #0
 800e046:	f280 8252 	bge.w	800e4ee <__ieee754_powf+0x56a>
 800e04a:	eeb1 0a68 	vneg.f32	s0, s17
 800e04e:	e7b1      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e050:	2500      	movs	r5, #0
 800e052:	e7da      	b.n	800e00a <__ieee754_powf+0x86>
 800e054:	2500      	movs	r5, #0
 800e056:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e05a:	d102      	bne.n	800e062 <__ieee754_powf+0xde>
 800e05c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e060:	e7a8      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e062:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e066:	d109      	bne.n	800e07c <__ieee754_powf+0xf8>
 800e068:	2e00      	cmp	r6, #0
 800e06a:	db07      	blt.n	800e07c <__ieee754_powf+0xf8>
 800e06c:	eeb0 0a48 	vmov.f32	s0, s16
 800e070:	ecbd 8b02 	vpop	{d8}
 800e074:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e078:	f000 bae8 	b.w	800e64c <__ieee754_sqrtf>
 800e07c:	eeb0 0a48 	vmov.f32	s0, s16
 800e080:	f000 fa50 	bl	800e524 <fabsf>
 800e084:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e088:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e08c:	4647      	mov	r7, r8
 800e08e:	d002      	beq.n	800e096 <__ieee754_powf+0x112>
 800e090:	f1b8 0f00 	cmp.w	r8, #0
 800e094:	d117      	bne.n	800e0c6 <__ieee754_powf+0x142>
 800e096:	2c00      	cmp	r4, #0
 800e098:	bfbc      	itt	lt
 800e09a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e09e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e0a2:	2e00      	cmp	r6, #0
 800e0a4:	da86      	bge.n	800dfb4 <__ieee754_powf+0x30>
 800e0a6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e0aa:	ea58 0805 	orrs.w	r8, r8, r5
 800e0ae:	d104      	bne.n	800e0ba <__ieee754_powf+0x136>
 800e0b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e0b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e0b8:	e77c      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e0ba:	2d01      	cmp	r5, #1
 800e0bc:	f47f af7a 	bne.w	800dfb4 <__ieee754_powf+0x30>
 800e0c0:	eeb1 0a40 	vneg.f32	s0, s0
 800e0c4:	e776      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e0c6:	0ff0      	lsrs	r0, r6, #31
 800e0c8:	3801      	subs	r0, #1
 800e0ca:	ea55 0300 	orrs.w	r3, r5, r0
 800e0ce:	d104      	bne.n	800e0da <__ieee754_powf+0x156>
 800e0d0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e0d4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e0d8:	e76c      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e0da:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e0de:	d973      	bls.n	800e1c8 <__ieee754_powf+0x244>
 800e0e0:	4bad      	ldr	r3, [pc, #692]	@ (800e398 <__ieee754_powf+0x414>)
 800e0e2:	4598      	cmp	r8, r3
 800e0e4:	d808      	bhi.n	800e0f8 <__ieee754_powf+0x174>
 800e0e6:	2c00      	cmp	r4, #0
 800e0e8:	da0b      	bge.n	800e102 <__ieee754_powf+0x17e>
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	ecbd 8b02 	vpop	{d8}
 800e0f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f4:	f000 baa4 	b.w	800e640 <__math_oflowf>
 800e0f8:	4ba8      	ldr	r3, [pc, #672]	@ (800e39c <__ieee754_powf+0x418>)
 800e0fa:	4598      	cmp	r8, r3
 800e0fc:	d908      	bls.n	800e110 <__ieee754_powf+0x18c>
 800e0fe:	2c00      	cmp	r4, #0
 800e100:	dcf3      	bgt.n	800e0ea <__ieee754_powf+0x166>
 800e102:	2000      	movs	r0, #0
 800e104:	ecbd 8b02 	vpop	{d8}
 800e108:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10c:	f000 ba92 	b.w	800e634 <__math_uflowf>
 800e110:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e114:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e118:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800e3a0 <__ieee754_powf+0x41c>
 800e11c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e120:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e124:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e128:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e12c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e130:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e134:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800e3a4 <__ieee754_powf+0x420>
 800e138:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e13c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800e3a8 <__ieee754_powf+0x424>
 800e140:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e144:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800e3ac <__ieee754_powf+0x428>
 800e148:	eef0 6a67 	vmov.f32	s13, s15
 800e14c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e150:	ee16 3a90 	vmov	r3, s13
 800e154:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e158:	f023 030f 	bic.w	r3, r3, #15
 800e15c:	ee06 3a90 	vmov	s13, r3
 800e160:	eee0 6a47 	vfms.f32	s13, s0, s14
 800e164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e168:	3d01      	subs	r5, #1
 800e16a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800e16e:	4305      	orrs	r5, r0
 800e170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e174:	f024 040f 	bic.w	r4, r4, #15
 800e178:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e17c:	bf18      	it	ne
 800e17e:	eeb0 8a47 	vmovne.f32	s16, s14
 800e182:	ee07 4a10 	vmov	s14, r4
 800e186:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e18a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e18e:	ee07 3a90 	vmov	s15, r3
 800e192:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e196:	ee07 4a10 	vmov	s14, r4
 800e19a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e19e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e1a2:	ee17 1a10 	vmov	r1, s14
 800e1a6:	2900      	cmp	r1, #0
 800e1a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1ac:	f340 80dd 	ble.w	800e36a <__ieee754_powf+0x3e6>
 800e1b0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e1b4:	f240 80ca 	bls.w	800e34c <__ieee754_powf+0x3c8>
 800e1b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c0:	bf4c      	ite	mi
 800e1c2:	2001      	movmi	r0, #1
 800e1c4:	2000      	movpl	r0, #0
 800e1c6:	e791      	b.n	800e0ec <__ieee754_powf+0x168>
 800e1c8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e1cc:	bf01      	itttt	eq
 800e1ce:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800e3b0 <__ieee754_powf+0x42c>
 800e1d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e1d6:	f06f 0317 	mvneq.w	r3, #23
 800e1da:	ee17 7a90 	vmoveq	r7, s15
 800e1de:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e1e2:	bf18      	it	ne
 800e1e4:	2300      	movne	r3, #0
 800e1e6:	3a7f      	subs	r2, #127	@ 0x7f
 800e1e8:	441a      	add	r2, r3
 800e1ea:	4b72      	ldr	r3, [pc, #456]	@ (800e3b4 <__ieee754_powf+0x430>)
 800e1ec:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e1f0:	429f      	cmp	r7, r3
 800e1f2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e1f6:	dd06      	ble.n	800e206 <__ieee754_powf+0x282>
 800e1f8:	4b6f      	ldr	r3, [pc, #444]	@ (800e3b8 <__ieee754_powf+0x434>)
 800e1fa:	429f      	cmp	r7, r3
 800e1fc:	f340 80a4 	ble.w	800e348 <__ieee754_powf+0x3c4>
 800e200:	3201      	adds	r2, #1
 800e202:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e206:	2600      	movs	r6, #0
 800e208:	4b6c      	ldr	r3, [pc, #432]	@ (800e3bc <__ieee754_powf+0x438>)
 800e20a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e20e:	ee07 1a10 	vmov	s14, r1
 800e212:	edd3 5a00 	vldr	s11, [r3]
 800e216:	4b6a      	ldr	r3, [pc, #424]	@ (800e3c0 <__ieee754_powf+0x43c>)
 800e218:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e21c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e220:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e224:	1049      	asrs	r1, r1, #1
 800e226:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e22a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e22e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e232:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e236:	ee07 1a90 	vmov	s15, r1
 800e23a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e23e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e242:	ee15 7a10 	vmov	r7, s10
 800e246:	401f      	ands	r7, r3
 800e248:	ee06 7a90 	vmov	s13, r7
 800e24c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e250:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e254:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e258:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e25c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e3c4 <__ieee754_powf+0x440>
 800e260:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800e3c8 <__ieee754_powf+0x444>
 800e264:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e268:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800e3cc <__ieee754_powf+0x448>
 800e26c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e270:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800e3a0 <__ieee754_powf+0x41c>
 800e274:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e278:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e3d0 <__ieee754_powf+0x44c>
 800e27c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e280:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800e3d4 <__ieee754_powf+0x450>
 800e284:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e288:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e28c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e290:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e294:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e298:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e29c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e2a0:	eef0 5a67 	vmov.f32	s11, s15
 800e2a4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e2a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e2ac:	ee15 1a90 	vmov	r1, s11
 800e2b0:	4019      	ands	r1, r3
 800e2b2:	ee05 1a90 	vmov	s11, r1
 800e2b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e2ba:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e2be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e2c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e2ca:	eeb0 6a67 	vmov.f32	s12, s15
 800e2ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e2d2:	ee16 1a10 	vmov	r1, s12
 800e2d6:	4019      	ands	r1, r3
 800e2d8:	ee06 1a10 	vmov	s12, r1
 800e2dc:	eeb0 7a46 	vmov.f32	s14, s12
 800e2e0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e2e4:	493c      	ldr	r1, [pc, #240]	@ (800e3d8 <__ieee754_powf+0x454>)
 800e2e6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e2ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800e3dc <__ieee754_powf+0x458>
 800e2f2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800e3e0 <__ieee754_powf+0x45c>
 800e2f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e3e4 <__ieee754_powf+0x460>
 800e2fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e302:	ed91 7a00 	vldr	s14, [r1]
 800e306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e30a:	ee07 2a10 	vmov	s14, r2
 800e30e:	eef0 6a67 	vmov.f32	s13, s15
 800e312:	4a35      	ldr	r2, [pc, #212]	@ (800e3e8 <__ieee754_powf+0x464>)
 800e314:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e318:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e31c:	ed92 5a00 	vldr	s10, [r2]
 800e320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e324:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e328:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e32c:	ee16 2a90 	vmov	r2, s13
 800e330:	4013      	ands	r3, r2
 800e332:	ee06 3a90 	vmov	s13, r3
 800e336:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e33a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e33e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800e342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e346:	e70f      	b.n	800e168 <__ieee754_powf+0x1e4>
 800e348:	2601      	movs	r6, #1
 800e34a:	e75d      	b.n	800e208 <__ieee754_powf+0x284>
 800e34c:	d152      	bne.n	800e3f4 <__ieee754_powf+0x470>
 800e34e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e3ec <__ieee754_powf+0x468>
 800e352:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e356:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e35a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e362:	f73f af29 	bgt.w	800e1b8 <__ieee754_powf+0x234>
 800e366:	2386      	movs	r3, #134	@ 0x86
 800e368:	e048      	b.n	800e3fc <__ieee754_powf+0x478>
 800e36a:	4a21      	ldr	r2, [pc, #132]	@ (800e3f0 <__ieee754_powf+0x46c>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d907      	bls.n	800e380 <__ieee754_powf+0x3fc>
 800e370:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	bf4c      	ite	mi
 800e37a:	2001      	movmi	r0, #1
 800e37c:	2000      	movpl	r0, #0
 800e37e:	e6c1      	b.n	800e104 <__ieee754_powf+0x180>
 800e380:	d138      	bne.n	800e3f4 <__ieee754_powf+0x470>
 800e382:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e386:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38e:	dbea      	blt.n	800e366 <__ieee754_powf+0x3e2>
 800e390:	e7ee      	b.n	800e370 <__ieee754_powf+0x3ec>
 800e392:	bf00      	nop
 800e394:	00000000 	.word	0x00000000
 800e398:	3f7ffff3 	.word	0x3f7ffff3
 800e39c:	3f800007 	.word	0x3f800007
 800e3a0:	3eaaaaab 	.word	0x3eaaaaab
 800e3a4:	3fb8aa3b 	.word	0x3fb8aa3b
 800e3a8:	36eca570 	.word	0x36eca570
 800e3ac:	3fb8aa00 	.word	0x3fb8aa00
 800e3b0:	4b800000 	.word	0x4b800000
 800e3b4:	001cc471 	.word	0x001cc471
 800e3b8:	005db3d6 	.word	0x005db3d6
 800e3bc:	0800f350 	.word	0x0800f350
 800e3c0:	fffff000 	.word	0xfffff000
 800e3c4:	3e6c3255 	.word	0x3e6c3255
 800e3c8:	3e53f142 	.word	0x3e53f142
 800e3cc:	3e8ba305 	.word	0x3e8ba305
 800e3d0:	3edb6db7 	.word	0x3edb6db7
 800e3d4:	3f19999a 	.word	0x3f19999a
 800e3d8:	0800f340 	.word	0x0800f340
 800e3dc:	3f76384f 	.word	0x3f76384f
 800e3e0:	3f763800 	.word	0x3f763800
 800e3e4:	369dc3a0 	.word	0x369dc3a0
 800e3e8:	0800f348 	.word	0x0800f348
 800e3ec:	3338aa3c 	.word	0x3338aa3c
 800e3f0:	43160000 	.word	0x43160000
 800e3f4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800e3f8:	d971      	bls.n	800e4de <__ieee754_powf+0x55a>
 800e3fa:	15db      	asrs	r3, r3, #23
 800e3fc:	3b7e      	subs	r3, #126	@ 0x7e
 800e3fe:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e402:	4118      	asrs	r0, r3
 800e404:	4408      	add	r0, r1
 800e406:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e40a:	4a3c      	ldr	r2, [pc, #240]	@ (800e4fc <__ieee754_powf+0x578>)
 800e40c:	3b7f      	subs	r3, #127	@ 0x7f
 800e40e:	411a      	asrs	r2, r3
 800e410:	4002      	ands	r2, r0
 800e412:	ee07 2a10 	vmov	s14, r2
 800e416:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e41a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800e41e:	f1c3 0317 	rsb	r3, r3, #23
 800e422:	4118      	asrs	r0, r3
 800e424:	2900      	cmp	r1, #0
 800e426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e42a:	bfb8      	it	lt
 800e42c:	4240      	neglt	r0, r0
 800e42e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e432:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800e500 <__ieee754_powf+0x57c>
 800e436:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800e504 <__ieee754_powf+0x580>
 800e43a:	ee17 3a10 	vmov	r3, s14
 800e43e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e442:	f023 030f 	bic.w	r3, r3, #15
 800e446:	ee07 3a10 	vmov	s14, r3
 800e44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e44e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e452:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e456:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800e508 <__ieee754_powf+0x584>
 800e45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e45e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e462:	eef0 6a67 	vmov.f32	s13, s15
 800e466:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e46a:	eef0 5a66 	vmov.f32	s11, s13
 800e46e:	eee7 5a46 	vfms.f32	s11, s14, s12
 800e472:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e476:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e47a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800e50c <__ieee754_powf+0x588>
 800e47e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800e510 <__ieee754_powf+0x58c>
 800e482:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e486:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800e514 <__ieee754_powf+0x590>
 800e48a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e48e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e518 <__ieee754_powf+0x594>
 800e492:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e496:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800e51c <__ieee754_powf+0x598>
 800e49a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e49e:	eeb0 6a66 	vmov.f32	s12, s13
 800e4a2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800e4a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800e4aa:	ee66 5a86 	vmul.f32	s11, s13, s12
 800e4ae:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e4b2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800e4b6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e4c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4c6:	ee10 3a10 	vmov	r3, s0
 800e4ca:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e4ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4d2:	da06      	bge.n	800e4e2 <__ieee754_powf+0x55e>
 800e4d4:	f000 f82e 	bl	800e534 <scalbnf>
 800e4d8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e4dc:	e56a      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e7a5      	b.n	800e42e <__ieee754_powf+0x4aa>
 800e4e2:	ee00 3a10 	vmov	s0, r3
 800e4e6:	e7f7      	b.n	800e4d8 <__ieee754_powf+0x554>
 800e4e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e4ec:	e562      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e4ee:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800e520 <__ieee754_powf+0x59c>
 800e4f2:	e55f      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e4f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e4f8:	e55c      	b.n	800dfb4 <__ieee754_powf+0x30>
 800e4fa:	bf00      	nop
 800e4fc:	ff800000 	.word	0xff800000
 800e500:	3f317218 	.word	0x3f317218
 800e504:	3f317200 	.word	0x3f317200
 800e508:	35bfbe8c 	.word	0x35bfbe8c
 800e50c:	b5ddea0e 	.word	0xb5ddea0e
 800e510:	3331bb4c 	.word	0x3331bb4c
 800e514:	388ab355 	.word	0x388ab355
 800e518:	bb360b61 	.word	0xbb360b61
 800e51c:	3e2aaaab 	.word	0x3e2aaaab
 800e520:	00000000 	.word	0x00000000

0800e524 <fabsf>:
 800e524:	ee10 3a10 	vmov	r3, s0
 800e528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e52c:	ee00 3a10 	vmov	s0, r3
 800e530:	4770      	bx	lr
	...

0800e534 <scalbnf>:
 800e534:	ee10 3a10 	vmov	r3, s0
 800e538:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e53c:	d02b      	beq.n	800e596 <scalbnf+0x62>
 800e53e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e542:	d302      	bcc.n	800e54a <scalbnf+0x16>
 800e544:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e548:	4770      	bx	lr
 800e54a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e54e:	d123      	bne.n	800e598 <scalbnf+0x64>
 800e550:	4b24      	ldr	r3, [pc, #144]	@ (800e5e4 <scalbnf+0xb0>)
 800e552:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e5e8 <scalbnf+0xb4>
 800e556:	4298      	cmp	r0, r3
 800e558:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e55c:	db17      	blt.n	800e58e <scalbnf+0x5a>
 800e55e:	ee10 3a10 	vmov	r3, s0
 800e562:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e566:	3a19      	subs	r2, #25
 800e568:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e56c:	4288      	cmp	r0, r1
 800e56e:	dd15      	ble.n	800e59c <scalbnf+0x68>
 800e570:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e5ec <scalbnf+0xb8>
 800e574:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e5f0 <scalbnf+0xbc>
 800e578:	ee10 3a10 	vmov	r3, s0
 800e57c:	eeb0 7a67 	vmov.f32	s14, s15
 800e580:	2b00      	cmp	r3, #0
 800e582:	bfb8      	it	lt
 800e584:	eef0 7a66 	vmovlt.f32	s15, s13
 800e588:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e58c:	4770      	bx	lr
 800e58e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e5f4 <scalbnf+0xc0>
 800e592:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e596:	4770      	bx	lr
 800e598:	0dd2      	lsrs	r2, r2, #23
 800e59a:	e7e5      	b.n	800e568 <scalbnf+0x34>
 800e59c:	4410      	add	r0, r2
 800e59e:	28fe      	cmp	r0, #254	@ 0xfe
 800e5a0:	dce6      	bgt.n	800e570 <scalbnf+0x3c>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	dd06      	ble.n	800e5b4 <scalbnf+0x80>
 800e5a6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e5aa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e5ae:	ee00 3a10 	vmov	s0, r3
 800e5b2:	4770      	bx	lr
 800e5b4:	f110 0f16 	cmn.w	r0, #22
 800e5b8:	da09      	bge.n	800e5ce <scalbnf+0x9a>
 800e5ba:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e5f4 <scalbnf+0xc0>
 800e5be:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e5f8 <scalbnf+0xc4>
 800e5c2:	ee10 3a10 	vmov	r3, s0
 800e5c6:	eeb0 7a67 	vmov.f32	s14, s15
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	e7d9      	b.n	800e582 <scalbnf+0x4e>
 800e5ce:	3019      	adds	r0, #25
 800e5d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e5d4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e5d8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e5fc <scalbnf+0xc8>
 800e5dc:	ee07 3a90 	vmov	s15, r3
 800e5e0:	e7d7      	b.n	800e592 <scalbnf+0x5e>
 800e5e2:	bf00      	nop
 800e5e4:	ffff3cb0 	.word	0xffff3cb0
 800e5e8:	4c000000 	.word	0x4c000000
 800e5ec:	7149f2ca 	.word	0x7149f2ca
 800e5f0:	f149f2ca 	.word	0xf149f2ca
 800e5f4:	0da24260 	.word	0x0da24260
 800e5f8:	8da24260 	.word	0x8da24260
 800e5fc:	33000000 	.word	0x33000000

0800e600 <with_errnof>:
 800e600:	b510      	push	{r4, lr}
 800e602:	ed2d 8b02 	vpush	{d8}
 800e606:	eeb0 8a40 	vmov.f32	s16, s0
 800e60a:	4604      	mov	r4, r0
 800e60c:	f7fb fd68 	bl	800a0e0 <__errno>
 800e610:	eeb0 0a48 	vmov.f32	s0, s16
 800e614:	ecbd 8b02 	vpop	{d8}
 800e618:	6004      	str	r4, [r0, #0]
 800e61a:	bd10      	pop	{r4, pc}

0800e61c <xflowf>:
 800e61c:	b130      	cbz	r0, 800e62c <xflowf+0x10>
 800e61e:	eef1 7a40 	vneg.f32	s15, s0
 800e622:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e626:	2022      	movs	r0, #34	@ 0x22
 800e628:	f7ff bfea 	b.w	800e600 <with_errnof>
 800e62c:	eef0 7a40 	vmov.f32	s15, s0
 800e630:	e7f7      	b.n	800e622 <xflowf+0x6>
	...

0800e634 <__math_uflowf>:
 800e634:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e63c <__math_uflowf+0x8>
 800e638:	f7ff bff0 	b.w	800e61c <xflowf>
 800e63c:	10000000 	.word	0x10000000

0800e640 <__math_oflowf>:
 800e640:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e648 <__math_oflowf+0x8>
 800e644:	f7ff bfea 	b.w	800e61c <xflowf>
 800e648:	70000000 	.word	0x70000000

0800e64c <__ieee754_sqrtf>:
 800e64c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e650:	4770      	bx	lr
	...

0800e654 <_init>:
 800e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e656:	bf00      	nop
 800e658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65a:	bc08      	pop	{r3}
 800e65c:	469e      	mov	lr, r3
 800e65e:	4770      	bx	lr

0800e660 <_fini>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	bf00      	nop
 800e664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e666:	bc08      	pop	{r3}
 800e668:	469e      	mov	lr, r3
 800e66a:	4770      	bx	lr
